{"version":3,"sources":["duocoder.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_class","name","dir","_this","this","children","arguments","undefined","parent","forEach","child","value","index","2","Language","Category","./category","./language","3","ace","ext","4","setupMain","setupLearn","setLanguage","viewCode","viewDesc","./set_language","./setup_learn","./setup_main","./view_code","./view_desc","5","language","$panel","$","$title","find","text","6","mousemove","removeClass","$code","pageX","pageY","each","$match","_$match$offset","offset","top","left","bottom","height","right","width","match","data","filter","addClass","7","$stick_to_bottom_fake","$stick_to_bottom_real","$lang_from","$fullscreen","onResize","toggleClass","window","resize","click","location","pathname","replace","hostname","hash","slice","animate","scrollTop","$unfocused","onScroll","document","scroll","8","matchings","num","content","push","html","editor","edit","attr","setTheme","getSession","setMode","renderer","on","matching","$spans","$span","span","indexOf","substring","trim","console","error","9","desc","$desc","markdown","toHTML","10","DOM","Server","_require","_$","extend","langCpp","langPy","categories","category","loadCode","then","loadDesc","sub","./bean","./dom","./server","rsvp","11","request","url","type","./request","12","RSVP","ajax","defaults","options","Promise","resolve","reject","callbacks","success","response","reason","opts","13","./load_code","./load_desc","14","get","path","./ajax/get","15","16","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","17","global","factory","define","amd","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","constructor","withOwnPromise","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","isArray","reject$1","needsResolver","needsNew","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","err","val","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","createTextNode","observe","characterData","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","splice","trigger","_isArray","toString","Date","getTime","o_create","create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"duocoder.js","sourcesContent":["/**\n * DuoCoder - Duolingo for Coders\n * @version v0.0.1\n * @author Jason Park\n * @link https://github.com/parkjs814/DuoCoder\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, dir) {\n    var _this = this;\n\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, _class);\n\n    this.parent = null;\n    this.name = name;\n    this.dir = dir;\n    this.children = children;\n    children.forEach(function (child) {\n      child.parent = _this;\n    });\n  }\n\n  _createClass(_class, [{\n    key: \"sub\",\n    value: function sub(index) {\n      return this.children[index];\n    }\n  }]);\n\n  return _class;\n}();\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar Language = require('./language');\nvar Category = require('./category');\n\nmodule.exports = {\n  Language: Language,\n  Category: Category\n};\n\n},{\"./category\":1,\"./language\":3}],3:[function(require,module,exports){\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, ace, ext) {\n    _classCallCheck(this, _class);\n\n    this.name = name;\n    this.ace = ace;\n    this.ext = ext;\n  }\n\n  return _class;\n}();\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\nvar setupLearn = require('./setup_learn');\nvar setLanguage = require('./set_language');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\n\nmodule.exports = {\n  setupMain: setupMain,\n  setupLearn: setupLearn,\n  setLanguage: setLanguage,\n  viewCode: viewCode,\n  viewDesc: viewDesc\n};\n\n},{\"./set_language\":5,\"./setup_learn\":6,\"./setup_main\":7,\"./view_code\":8,\"./view_desc\":9}],5:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $title = $panel.find('.title');\n  $title.text(language.name);\n};\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('.code').mousemove(function (e) {\n    $('.match').removeClass('selected');\n    var $code = $(this);\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    $code.find('.match').each(function () {\n      var $match = $(this);\n\n      var _$match$offset = $match.offset(),\n          top = _$match$offset.top,\n          left = _$match$offset.left;\n\n      var bottom = top + $match.height();\n      var right = left + $match.width();\n      if (top < pageY && pageY < bottom && left < pageX && pageX < right) {\n        (function () {\n          var match = $match.data('match');\n          $('.match').filter(function () {\n            return $(this).data('match') == match;\n          }).addClass('selected');\n        })();\n      }\n    });\n  });\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var $stick_to_bottom_fake = $('.stick-to-bottom.fake');\n  var $stick_to_bottom_real = $('.stick-to-bottom.real');\n  var $lang_from = $('#lang-from');\n  var $fullscreen = $('.fullscreen');\n  var onResize = function onResize() {\n    var top = $lang_from.offset().top + $lang_from.height();\n    var bottom = $stick_to_bottom_fake.offset().top;\n    $fullscreen.toggleClass('full', top < bottom);\n    $stick_to_bottom_real.toggleClass('stick', top < bottom);\n  };\n  onResize();\n  $(window).resize(onResize);\n\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function () {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 500);\n        return false;\n      }\n    }\n  });\n\n  var $unfocused = $('.focused');\n  var onScroll = function onScroll() {\n    $unfocused.toggleClass('unfocused', $(document).scrollTop() <= 168);\n  };\n  onScroll();\n  $(window).scroll(onScroll);\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language, code) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $code = $panel.find('.code');\n  var matchings = [];\n  code = code.replace(/#(\\d+){\\[([^(\\]})]*)\\]}/g, function (match, num, content) {\n    matchings.push([content, num]);\n    return content;\n  });\n  matchings.push(['', '']);\n  $code.html(code);\n\n  var editor = ace.edit($code.attr('id'));\n  editor.setTheme('ace/theme/monokai');\n  editor.getSession().setMode('ace/mode/' + language.ace);\n\n  editor.renderer.on('afterRender', function () {\n    var i = 0;\n    var matching = matchings[i].slice(0);\n    var $spans = $code.find('span');\n    $spans.each(function () {\n      var $span = $(this);\n      var span = $span.text();\n      if (span.indexOf(matching[0]) == 0) {\n        matching[0] = matching[0].substring(span.length).trim();\n        $span.addClass('match');\n        $span.data('match', matching[1]);\n        if (matching[0].length == 0) {\n          matching = matchings[++i].slice(0);\n        }\n      } else {\n        console.error('something wrong');\n      }\n    });\n  });\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, desc) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $desc = $panel.find('.desc');\n  $desc.html(markdown.toHTML(desc));\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\n\nvar _require = require('./bean'),\n    Language = _require.Language,\n    Category = _require.Category;\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar langCpp = new Language('C++', 'c_cpp', 'cpp');\nvar langPy = new Language('Python', 'python', 'py');\nvar langJava = new Language('Java', 'java', 'java');\nvar langJs = new Language('EMCAScript', 'javascript', 'js');\n\nvar categories = [new Category('Variables', 'variable', [new Category('Definition', 'definition'), new Category('Boolean Type', 'boolean'), new Category('Numeric Types', 'numeric'), new Category('Strings', 'string'), new Category('Data Structures', 'data_structure'), new Category('Constants', 'constant')])];\n\nvar setLanguage = function setLanguage(index, category, language) {\n  DOM.setLanguage(index, language);\n  Server.loadCode(category, language).then(function (code) {\n    DOM.viewCode(index, language, code);\n  });\n  Server.loadDesc(category, language).then(function (desc) {\n    DOM.viewDesc(index, desc);\n  });\n};\n\n$(function () {\n  setLanguage(0, categories[0].sub(0), langCpp);\n  setLanguage(1, categories[0].sub(0), langPy);\n});\n\nextend(true, window, {\n  DOM: DOM\n});\n\n},{\"./bean\":2,\"./dom\":4,\"./server\":13,\"rsvp\":17}],11:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":12}],12:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\n\nvar _$ = $,\n    ajax = _$.ajax,\n    extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        resolve(response);\n      },\n      error: function error(reason) {\n        reject(reason);\n      }\n    };\n    var opts = extend({}, defaults, options, callbacks, { url: url });\n    ajax(opts);\n  });\n};\n\n},{\"rsvp\":17}],13:[function(require,module,exports){\n'use strict';\n\nvar loadCode = require('./load_code');\nvar loadDesc = require('./load_desc');\n\nmodule.exports = {\n  loadCode: loadCode,\n  loadDesc: loadDesc\n};\n\n},{\"./load_code\":14,\"./load_desc\":15}],14:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/code.' + language.ext;\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":11}],15:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/desc.md';\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":11}],16:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],17:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":16}]},{},[10])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}