{"version":3,"sources":["duocoder.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","panelVars","language","editor","matchings","_this","this","panel","setLanguage","index","setEditor","setMatchings","getLanguage","getEditor","getMatchings","2","3","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_class","name","dir","children","arguments","undefined","parent","forEach","child","value","4","Language","Category","./category","./language","5","ace","ext","Server","languages","getLanguages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","../server","6","setupMain","initEditor","initCategories","setupLayout","viewCode","viewDesc","viewComparison","./init_categories","./init_editor","./set_language","./setup_layout","./setup_main","./view_code","./view_comparison","./view_desc","7","RSVP","app","from","to","loadCategory","category","Promise","resolve","loadCode","then","loadDesc","categories","$index","append","$sub_index","j","click","removeClass","addClass","$li","$ul","data","sub","../app","rsvp","8","afterRender","$panel","$code","find","edit","attr","setTheme","getSession","setMode","renderer","on","matching","slice","$spans","each","$span","span","text","indexOf","substring","trim","console","error","9","$title","10","mousemove","pageX","pageY","$match","_$match$offset","offset","top","left","bottom","height","right","width","match","filter","11","setupLanguages","setupStickToBottom","setupSmoothScroll","./setup_languages","./setup_smooth_scroll","./setup_stick_to_bottom","12","_arr","_loop","container","_i","$container","$lang","$logo","$lang_to","$lang_from_selected","$lang_to_selected","from_index","to_index","val","submit","../../server","13","location","pathname","replace","hostname","hash","animate","scrollTop","$unfocused","onScroll","toggleClass","document","window","scroll","14","$stick_to_bottom_fake","$stick_to_bottom_real","$lang_from","$fullscreen","onResize","resize","15","num","content","push","parseInt","setValue","16","_slicedToArray","sliceIterator","arr","_n","_d","_e","_s","Array","isArray","$desc","pair","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Math","comparisons","empty","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","comparison","_comparison","pieces_from","pieces_to","is_same","every","element","$line","_arr2","_i2","pieces","$group","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","piece","$piece","clone","_iterator2","17","desc","html","markdown","toHTML","18","DOM","Storage","App","_require","getCategories","reason","assert","main","learn","lang_from_ext","getUrlParameter","lang_to_ext","set","get","lang_from","getWithExt","lang_to","sParam","params","decodeURIComponent","search","split","param","./app","./app/constructor","./bean","./dom","./server","./storage","19","request","url","type","./request","20","ajax","defaults","options","reject","callbacks","success","response","opts","21","../bean","22","23","./get_categories","./get_languages","./load_code","./load_desc","24","path","./ajax/get","25","26","27","_set","_get","getName","./manager","28","Cookies","remove","29","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","30","global","factory","define","amd","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","constructor","withOwnPromise","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","counter","Result","getThen$1","obj","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","createTextNode","observe","characterData","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","splice","trigger","_isArray","toString","Date","getTime","o_create","create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"duocoder.js","sourcesContent":["/**\n * DuoCoder - Duolingo for Coders\n * @version v0.0.1\n * @author Jason Park\n * @link https://github.com/parkjs814/DuoCoder\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar panelVars = {\n  language: null,\n  editor: null,\n  matchings: null\n};\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.panel = [extend(true, {}, panelVars), extend(true, {}, panelVars)];\n\n  this.setLanguage = function (index, language) {\n    _this.panel[index].language = language;\n  };\n\n  this.setEditor = function (index, editor) {\n    _this.panel[index].editor = editor;\n  };\n\n  this.setMatchings = function (index, matchings) {\n    _this.panel[index].matchings = matchings;\n  };\n\n  this.getLanguage = function (index) {\n    return _this.panel[index].language;\n  };\n\n  this.getEditor = function (index) {\n    return _this.panel[index].editor;\n  };\n\n  this.getMatchings = function (index) {\n    return _this.panel[index].matchings;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, dir) {\n    var _this = this;\n\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, _class);\n\n    this.parent = null;\n    this.name = name;\n    this.dir = dir;\n    this.children = children;\n    children.forEach(function (child) {\n      child.parent = _this;\n    });\n  }\n\n  _createClass(_class, [{\n    key: \"sub\",\n    value: function sub(index) {\n      return this.children[index];\n    }\n  }]);\n\n  return _class;\n}();\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar Language = require('./language');\nvar Category = require('./category');\n\nmodule.exports = {\n  Language: Language,\n  Category: Category\n};\n\n},{\"./category\":3,\"./language\":5}],5:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, ace, ext) {\n    _classCallCheck(this, _class);\n\n    this.name = name;\n    this.ace = ace;\n    this.ext = ext;\n  }\n\n  _createClass(_class, null, [{\n    key: 'getWithExt',\n    value: function getWithExt(ext) {\n      var Server = require('../server');\n      var languages = Server.getLanguages();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var language = _step.value;\n\n          if (language.ext == ext) return language;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return _class;\n}();\n\n},{\"../server\":23}],6:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\nvar initEditor = require('./init_editor');\nvar initCategories = require('./init_categories');\nvar setupLayout = require('./setup_layout');\nvar setLanguage = require('./set_language');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar viewComparison = require('./view_comparison');\n\nmodule.exports = {\n  setupMain: setupMain,\n  initEditor: initEditor,\n  initCategories: initCategories,\n  setupLayout: setupLayout,\n  setLanguage: setLanguage,\n  viewCode: viewCode,\n  viewDesc: viewDesc,\n  viewComparison: viewComparison\n};\n\n},{\"./init_categories\":7,\"./init_editor\":8,\"./set_language\":9,\"./setup_layout\":10,\"./setup_main\":11,\"./view_code\":15,\"./view_comparison\":16,\"./view_desc\":17}],7:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar Server = require('../server');\nvar app = require('../app');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\n\nvar from = 0,\n    to = 1;\n\nvar loadCategory = function loadCategory(index, category, language) {\n  return new RSVP.Promise(function (resolve) {\n    Server.loadCode(category, language).then(function (code) {\n      viewCode(index, language, code);\n      resolve();\n    });\n    if (index == to) {\n      Server.loadDesc(category, language).then(viewDesc);\n    }\n  });\n};\n\nmodule.exports = function (categories) {\n  var $index = $('#index');\n  categories.forEach(function (category, i) {\n    $index.append('<li>' + (i + 1) + '| ' + category.name + '</li>');\n    var $sub_index = $('<ul class=\"sub\" data-category=\"' + i + '\"></ul>');\n    $index.append($sub_index);\n    category.children.forEach(function (category, j) {\n      $sub_index.append('<li data-subcategory=\"' + j + '\">' + category.name + '</li>');\n    });\n  });\n\n  $('#index > li').click(function () {\n    $('#index > li.active').removeClass('active');\n    $(this).addClass('active');\n  });\n\n  $('ul.sub > li').click(function () {\n    $('ul.sub > li.active').removeClass('active');\n    $(this).addClass('active');\n    var $li = $(this);\n    var $ul = $(this).parent();\n    loadCategory(from, categories[$ul.data('category')].sub($li.data('subcategory')), app.getLanguage(from));\n    loadCategory(to, categories[$ul.data('category')].sub($li.data('subcategory')), app.getLanguage(to));\n  });\n\n  $('#index > li:eq(0)').click();\n  $('ul.sub > li:eq(0)').click();\n};\n\n},{\"../app\":2,\"../server\":23,\"./view_code\":15,\"./view_desc\":17,\"rsvp\":30}],8:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, language, afterRender) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $code = $panel.find('.code');\n  var editor = ace.edit($code.attr('id'));\n  editor.setTheme('ace/theme/monokai');\n  if (index == 0) $panel.find('.desc').addClass('ace-monokai');\n  editor.getSession().setMode('ace/mode/' + language.ace);\n  editor.renderer.on('afterRender', function () {\n    var matchings = app.getMatchings(index);\n    if (!matchings || matchings.length == 0) return;\n    var i = 0;\n    var matching = matchings[i].slice(0);\n    var $spans = $code.find('span');\n    $spans.each(function () {\n      var $span = $(this);\n      var span = $span.text();\n      if (span.indexOf(matching[0]) == 0) {\n        matching[0] = matching[0].substring(span.length).trim();\n        $span.addClass('match');\n        $span.data('match', matching[1]);\n        if (matching[0].length == 0) {\n          matching = matchings[++i].slice(0);\n        }\n      } else {\n        console.error('something wrong');\n      }\n    });\n    if (afterRender) afterRender();\n  });\n  return editor;\n};\n\n},{\"../app\":2}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $title = $panel.find('.title');\n  $title.text(language.name);\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('.code, #comparison').mousemove(function (e) {\n    $('.match').removeClass('selected');\n    var $code = $(this);\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    $code.find('.match').each(function () {\n      var $match = $(this);\n\n      var _$match$offset = $match.offset(),\n          top = _$match$offset.top,\n          left = _$match$offset.left;\n\n      var bottom = top + $match.height();\n      var right = left + $match.width();\n      if (top < pageY && pageY < bottom && left < pageX && pageX < right) {\n        (function () {\n          var match = $match.data('match');\n          $('.match').filter(function () {\n            return $(this).data('match') == match;\n          }).addClass('selected');\n        })();\n      }\n    });\n  });\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar setupLanguages = require('./setup_languages');\nvar setupStickToBottom = require('./setup_stick_to_bottom');\nvar setupSmoothScroll = require('./setup_smooth_scroll');\n\nmodule.exports = function () {\n  setupLanguages();\n  setupStickToBottom();\n  setupSmoothScroll();\n};\n\n},{\"./setup_languages\":12,\"./setup_smooth_scroll\":13,\"./setup_stick_to_bottom\":14}],12:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nvar languages = Server.getLanguages();\n\nmodule.exports = function () {\n  var _arr = ['#lang-from', '#lang-to'];\n\n  var _loop = function _loop() {\n    var container = _arr[_i];\n    var $container = $(container);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var language = _step.value;\n\n        var $lang = $('<a class=\"lang\" href=\"' + (container == '#lang-from' ? '#dots' : '#top') + '\"></a>');\n        $container.append($lang);\n        var $logo = $('<div class=\"logo\" style=\"background-image: url(\\'./images/lang_' + language.ext + '.png\\')\"></div>');\n        $lang.append($logo);\n        $logo.append('<div class=\"logo mono\" style=\"background-image: url(\\'./images/lang_' + language.ext + '_mono.png\\')\"></div>');\n        $lang.append('<div class=\"name\">' + language.name + '</div>');\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    $container.find('.lang').click(function () {\n      $container.find('.lang.selected').removeClass('selected');\n      $(this).addClass('selected');\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  $('.lang').click(function () {\n    var $lang_to = $('#lang-to');\n    var $lang_from_selected = $('#lang-from .lang.selected');\n    var $lang_to_selected = $('#lang-to .lang.selected');\n    if ($lang_from_selected.length && $lang_to_selected.length) {\n      var from_index = $lang_from_selected.index();\n      var to_index = $lang_to_selected.index() - 2;\n      $lang_to.find('[name=\"lang_from\"]').val(languages[from_index].ext);\n      $lang_to.find('[name=\"lang_to\"]').val(languages[to_index].ext);\n      $lang_to.submit();\n    }\n  });\n};\n\n},{\"../../server\":23}],13:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function () {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 500);\n        return false;\n      }\n    }\n  });\n  var $unfocused = $('.focused');\n  var onScroll = function onScroll() {\n    $unfocused.toggleClass('unfocused', $(document).scrollTop() <= 168);\n  };\n  onScroll();\n  $(window).scroll(onScroll);\n};\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var $stick_to_bottom_fake = $('.stick-to-bottom.fake');\n  var $stick_to_bottom_real = $('.stick-to-bottom.real');\n  var $lang_from = $('#lang-from');\n  var $fullscreen = $('.fullscreen');\n  var onResize = function onResize() {\n    var top = $lang_from.offset().top + $lang_from.height();\n    var bottom = $stick_to_bottom_fake.offset().top;\n    $fullscreen.toggleClass('full', top < bottom);\n    $stick_to_bottom_real.toggleClass('stick', top < bottom);\n  };\n  onResize();\n  $(window).resize(onResize);\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, language, code) {\n  var matchings = [];\n  app.setMatchings(index, matchings);\n  code = code.replace(/#(\\d+){\\[([^(\\]})]*)\\]}/g, function (match, num, content) {\n    matchings.push([content, parseInt(num)]);\n    return content;\n  });\n  matchings.push(['', -1]);\n  app.getEditor(index).setValue(code, -1);\n};\n\n},{\"../app\":2}],16:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = function () {\n  var $desc = $('#comparison');\n  var pair = [app.getMatchings(from), app.getMatchings(to)];\n\n  var max = -1;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = pair[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var matchings = _step.value;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = matchings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var matching = _step3.value;\n\n          max = Math.max(max, matching[1]);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var comparisons = [];\n  for (var i = 0; i <= max; i++) {\n    comparisons.push([[], []]);\n  }\n  var _arr = [from, to];\n\n  var _loop = function _loop() {\n    var i = _arr[_i];\n    $('.panel:eq(' + i + ') .code .match').each(function () {\n      var $match = $(this);\n      var match = $match.data('match');\n      comparisons[match][i].push($match);\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n\n  $desc.empty();\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    var _loop2 = function _loop2() {\n      var comparison = _step2.value;\n\n      var _comparison = _slicedToArray(comparison, 2),\n          pieces_from = _comparison[0],\n          pieces_to = _comparison[1];\n\n      var is_same = pieces_from.length == pieces_to.length && pieces_from.every(function (element, index) {\n        return element.text() == pieces_to[index].text();\n      });\n      if (is_same) return 'continue';\n      var $line = $('<div class=\"line\"></div>');\n      $desc.append($line);\n      var _arr2 = [pieces_from, pieces_to];\n      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n        var pieces = _arr2[_i2];\n        var $group = $('<span class=\"group\"></span>');\n        $line.append($group);\n        if (!pieces.length) {\n          $group.append('<span class=\"empty\"></span>');\n        }\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = pieces[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var piece = _step4.value;\n\n            var $piece = piece.clone();\n            $piece.data('match', piece.data('match'));\n            $group.append($piece);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    };\n\n    for (var _iterator2 = comparisons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ret2 = _loop2();\n\n      if (_ret2 === 'continue') continue;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n};\n\n},{\"../app\":2}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (desc) {\n  var $desc = $('#description');\n  $desc.html(markdown.toHTML(desc));\n};\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar Storage = require('./storage');\nvar app = require('./app');\nvar App = require('./app/constructor');\n\nvar _require = require('./bean'),\n    Language = _require.Language;\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar categories = Server.getCategories();\nvar languages = Server.getLanguages();\nvar from = 0,\n    to = 1;\n\n// set global promise error handler\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, window, {\n  main: DOM.setupMain,\n  learn: function learn() {\n    extend(true, app, new App());\n    var lang_from_ext = getUrlParameter('lang_from');\n    var lang_to_ext = getUrlParameter('lang_to');\n    if (lang_from_ext && lang_to_ext) {\n      Storage.language.set(from, lang_from_ext);\n      Storage.language.set(to, lang_to_ext);\n    } else {\n      lang_from_ext = Storage.language.get(from);\n      lang_to_ext = Storage.language.get(to);\n    }\n    var lang_from = Language.getWithExt(lang_from_ext);\n    var lang_to = Language.getWithExt(lang_to_ext);\n    app.setLanguage(from, lang_from);\n    app.setLanguage(to, lang_to);\n    app.setEditor(from, DOM.initEditor(from, lang_from, DOM.viewComparison));\n    app.setEditor(to, DOM.initEditor(to, lang_to, DOM.viewComparison));\n    DOM.initCategories(categories);\n    DOM.setupLayout();\n    DOM.setLanguage(from, lang_from);\n    DOM.setLanguage(to, lang_to);\n  }\n});\n\nvar getUrlParameter = function getUrlParameter(sParam) {\n  var params = decodeURIComponent(window.location.search.substring(1)).split('&');\n  for (var i = 0; i < params.length; i++) {\n    var param = params[i].split('=');\n    if (param[0] === sParam) {\n      return param[1] === undefined ? true : param[1];\n    }\n  }\n  return null;\n};\n\n},{\"./app\":2,\"./app/constructor\":1,\"./bean\":4,\"./dom\":6,\"./server\":23,\"./storage\":26,\"rsvp\":30}],19:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":20}],20:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar _$ = $,\n    ajax = _$.ajax,\n    extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        resolve(response);\n      },\n      error: function error(reason) {\n        reject(reason);\n      }\n    };\n    var opts = extend({}, defaults, options, callbacks, { url: url });\n    ajax(opts);\n  });\n};\n\n},{\"rsvp\":30}],21:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Category = _require.Category;\n\nmodule.exports = function () {\n  return categories;\n};\n\nvar categories = [new Category('Variables', 'var', [new Category('Definition', 'def'), new Category('Boolean Type', 'bool'), new Category('Numeric Types', 'num'), new Category('Strings', 'str'), new Category('Data Structures', 'data_structure'), new Category('Constants', 'const')]), new Category('Operators', 'operator', [new Category('Boolean Operations', 'bool'), new Category('Comparisons', 'compare'), new Category('Bitwise Operations', 'bitwise')]), new Category('Conditionals', 'conditional', [new Category('If / Else Statement', 'if_else'), new Category('Switch / Case Statement', 'switch_case'), new Category('Ternary Operator', 'ternary')]), new Category('Loops', 'loop', [new Category('For Statement', 'for'), new Category('While Statement', 'while'), new Category('Continue Statement', 'continue'), new Category('Break Statement', 'break')]), new Category('Functions', 'func', [new Category('Definition', 'def'), new Category('Parameters', 'param'), new Category('Return Statement', 'return')]), new Category('Classes', 'class', [new Category('Definition', 'def'), new Category('Class Variables', 'cls_var'), new Category('Class Functions', 'cls_func'), new Category('Instances', 'obj'), new Category('Instance Variables', 'obj_var'), new Category('Instance Functions', 'obj_func'), new Category('Inheritance', 'inherit')]), new Category('Built-In', 'built_in', [new Category('Math Functions', 'math'), new Category('String Functions', 'str'), new Category('Data Structure Operations', 'data_structure'), new Category('Others', 'etc')])];\n\n},{\"../bean\":4}],22:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Language = _require.Language;\n\nmodule.exports = function () {\n  return languages;\n};\n\nvar languages = [new Language('C++', 'c_cpp', 'cpp'), new Language('Python', 'python', 'py'), new Language('Java', 'java', 'java'), new Language('EMCAScript', 'javascript', 'js'), new Language('Nada.', null, 'idk')];\n\n},{\"../bean\":4}],23:[function(require,module,exports){\n'use strict';\n\nvar loadCode = require('./load_code');\nvar loadDesc = require('./load_desc');\nvar getCategories = require('./get_categories');\nvar getLanguages = require('./get_languages');\n\nmodule.exports = {\n  loadCode: loadCode,\n  loadDesc: loadDesc,\n  getCategories: getCategories,\n  getLanguages: getLanguages\n};\n\n},{\"./get_categories\":21,\"./get_languages\":22,\"./load_code\":24,\"./load_desc\":25}],24:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/code.' + language.ext;\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":19}],25:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/desc.md';\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":19}],26:[function(require,module,exports){\n'use strict';\n\nvar language = require('./language');\n\nmodule.exports = {\n  language: language\n};\n\n},{\"./language\":27}],27:[function(require,module,exports){\n'use strict';\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar getName = function getName(index) {\n  return 'lang_' + index;\n};\n\nmodule.exports = {\n  set: function set(index, ext) {\n    return _set(getName(index), ext);\n  },\n  get: function get(index) {\n    return _get(getName(index));\n  }\n};\n\n},{\"./manager\":28}],28:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  set: function set(name, value) {\n    Cookies.set(name, value);\n  },\n  get: function get(name) {\n    Cookies.get(name);\n  },\n  remove: function remove(name) {\n    Cookies.remove(name);\n  }\n};\n\n},{}],29:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],30:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":29}]},{},[18])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}