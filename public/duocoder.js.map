{"version":3,"sources":["duocoder.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","panelVars","language","editor","matchings","_this","this","panel","exam_mode","setLanguage","index","setEditor","setMatchings","setCode","enterExamMode","exitExamMode","getLanguage","getEditor","getMatchings","getCode","readable","replace","isExamMode","2","3","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_class","name","dir","children","arguments","undefined","parent","element","next","forEach","child","value","4","Language","Category","./category","./language","5","ace","ext","Server","languages","getLanguages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","../server","6","app","viewCode","to","enter","addClass","css","setReadOnly","setValue","exit","keep_code","removeClass","../app","./view_code","7","setupMain","initEditor","initCategories","setupLayout","setupMatching","setupExam","viewDesc","viewComparison","exam","./exam","./init_categories","./init_editor","./set_language","./setup_exam","./setup_layout","./setup_main","./setup_matching","./view_comparison","./view_desc","8","Storage","from","loadCategory","category","loadCode","then","loadDesc","categories","$index","append","$sub_index","j","click","$li","$ul","data","sub","set","get","../storage","9","afterRender","$panel","$code","find","edit","attr","setTheme","getSession","setMode","setUseWrapMode","setShowFoldWidgets","renderer","on","10","$title","text","11","util","calculateProgress","code_answer","code_user","similarity","zip","progress","getValue","s1","s2","longer","shorter","longerLength","editDistance","parseFloat","costs","lastValue","newValue","charAt","Math","min","../util","12","$next","hasClass","$active","is","$active_parent","alert","13","setupLanguages","setupStickToBottom","setupSmoothScroll","./setup_languages","./setup_smooth_scroll","./setup_stick_to_bottom","14","_arr","_loop","container","_i","$container","$lang","$logo","$lang_to","$lang_from_selected","$lang_to_selected","from_index","to_index","val","submit","../../server","15","location","pathname","hostname","hash","slice","animate","scrollTop","offset","top","$unfocused","onScroll","toggleClass","document","window","scroll","16","$stick_to_bottom_fake","$stick_to_bottom_real","$lang_from","$fullscreen","onResize","height","bottom","resize","17","mousemove","pageX","pageY","each","$match","_$match$offset","left","right","width","match","filter","18","lines","split","omit_num","num","content","parseInt","push","join","19","_slicedToArray","sliceIterator","arr","_n","_d","_e","_s","Array","isArray","$desc","pair","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","matching","comparisons","_loop2","_i2","_matchings","every","empty","last_line","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop3","comparison","_comparison","pieces_from","pieces_to","is_same","line","$line","_arr2","_i3","pieces","$group","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","piece","$piece","clone","_iterator2","20","desc","converter","showdown","Converter","html","makeHtml","21","RSVP","DOM","App","_require","getCategories","reason","console","assert","main","learn","lang_from_ext","getUrlParameter","lang_to_ext","changed","lang_from","getWithExt","lang_to","sParam","params","decodeURIComponent","search","substring","param","./app","./app/constructor","./bean","./dom","./server","./storage","rsvp","22","request","url","type","./request","23","ajax","defaults","options","Promise","resolve","reject","callbacks","success","response","error","opts","24","../bean","25","26","./get_categories","./get_languages","./load_code","./load_desc","27","path","./ajax/get","28","29","_typeof","obj","constructor","_set","_get","getName","substr","dirs","grep","v","_ret","./manager","30","31","32","Cookies","remove","33","trim","34","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","35","global","factory","define","amd","indexOf","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","withOwnPromise","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","counter","Result","getThen$1","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","createTextNode","observe","characterData","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","splice","trigger","_isArray","toString","Date","getTime","o_create","create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"duocoder.js","sourcesContent":["/**\n * DuoCoder - Duolingo for Coders\n * @version v0.0.1\n * @author Jason Park\n * @link https://github.com/parkjs814/DuoCoder\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar panelVars = {\n  language: null,\n  editor: null,\n  matchings: null,\n  code: ''\n};\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.panel = [extend(true, {}, panelVars), extend(true, {}, panelVars)];\n  this.exam_mode = false;\n\n  this.setLanguage = function (index, language) {\n    _this.panel[index].language = language;\n  };\n\n  this.setEditor = function (index, editor) {\n    _this.panel[index].editor = editor;\n  };\n\n  this.setMatchings = function (index, matchings) {\n    _this.panel[index].matchings = matchings;\n  };\n\n  this.setCode = function (index, code) {\n    _this.panel[index].code = code;\n  };\n\n  this.enterExamMode = function () {\n    _this.exam_mode = true;\n  };\n\n  this.exitExamMode = function () {\n    _this.exam_mode = false;\n  };\n\n  this.getLanguage = function (index) {\n    return _this.panel[index].language;\n  };\n\n  this.getEditor = function (index) {\n    return _this.panel[index].editor;\n  };\n\n  this.getMatchings = function (index) {\n    return _this.panel[index].matchings;\n  };\n\n  this.getCode = function (index, readable) {\n    var code = _this.panel[index].code;\n    if (readable) return code.replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, '$2');else return code;\n  };\n\n  this.isExamMode = function () {\n    return _this.exam_mode;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, dir) {\n    var _this = this;\n\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, _class);\n\n    this.parent = null;\n    this.name = name;\n    this.dir = dir;\n    this.children = children;\n    this.element = null;\n    this.next = null;\n    children.forEach(function (child) {\n      child.parent = _this;\n    });\n  }\n\n  _createClass(_class, [{\n    key: \"sub\",\n    value: function sub(index) {\n      return this.children[index];\n    }\n  }]);\n\n  return _class;\n}();\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar Language = require('./language');\nvar Category = require('./category');\n\nmodule.exports = {\n  Language: Language,\n  Category: Category\n};\n\n},{\"./category\":3,\"./language\":5}],5:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, ace, ext) {\n    _classCallCheck(this, _class);\n\n    this.name = name;\n    this.ace = ace;\n    this.ext = ext;\n  }\n\n  _createClass(_class, null, [{\n    key: 'getWithExt',\n    value: function getWithExt(ext) {\n      var Server = require('../server');\n      var languages = Server.getLanguages();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var language = _step.value;\n\n          if (language.ext == ext) return language;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return _class;\n}();\n\n},{\"../server\":26}],6:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar viewCode = require('./view_code');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = {\n  enter: function enter() {\n    app.enterExamMode();\n    $('#next').addClass('selected');\n    $('.desc-container .blur').css('display', 'block');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(false);\n    editor.setValue('');\n  },\n  exit: function exit(keep_code) {\n    app.exitExamMode();\n    $('#next').removeClass('selected next');\n    $('.desc-container .blur').css('display', '');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(true);\n    if (!keep_code) viewCode(to, app.getCode(to));\n  }\n};\n\n},{\"../app\":2,\"./view_code\":18}],7:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\nvar initEditor = require('./init_editor');\nvar initCategories = require('./init_categories');\nvar setupLayout = require('./setup_layout');\nvar setupMatching = require('./setup_matching');\nvar setupExam = require('./setup_exam');\nvar setLanguage = require('./set_language');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar viewComparison = require('./view_comparison');\nvar exam = require('./exam');\n\nmodule.exports = {\n  setupMain: setupMain,\n  initEditor: initEditor,\n  initCategories: initCategories,\n  setupLayout: setupLayout,\n  setupMatching: setupMatching,\n  setupExam: setupExam,\n  setLanguage: setLanguage,\n  viewCode: viewCode,\n  viewDesc: viewDesc,\n  viewComparison: viewComparison,\n  exam: exam\n};\n\n},{\"./exam\":6,\"./init_categories\":8,\"./init_editor\":9,\"./set_language\":10,\"./setup_exam\":11,\"./setup_layout\":12,\"./setup_main\":13,\"./setup_matching\":17,\"./view_code\":18,\"./view_comparison\":19,\"./view_desc\":20}],8:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../server');\nvar Storage = require('../storage');\nvar app = require('../app');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar exam = require('./exam');\n\nvar from = 0,\n    to = 1;\n\nvar loadCategory = function loadCategory(index, category, language) {\n  Server.loadCode(category, language).then(function (code) {\n    exam.exit();\n    app.setCode(index, code);\n    viewCode(index, code);\n  });\n  if (index == to) {\n    Server.loadDesc(category, language).then(viewDesc);\n  }\n};\n\nmodule.exports = function (categories) {\n  var $index = $('#index');\n  categories.forEach(function (category, i) {\n    category.element = $('<li>' + (i + 1) + '| ' + category.name + '</li>');\n    $index.append(category.element);\n    var $sub_index = $('<ul class=\"sub\" data-category=\"' + i + '\"></ul>');\n    $index.append($sub_index);\n    category.children.forEach(function (category, j) {\n      category.element = $('<li data-subcategory=\"' + j + '\">' + category.name + '</li>');\n      $sub_index.append(category.element);\n    });\n  });\n\n  $('#index > li').click(function () {\n    $('#index > li.active').removeClass('active');\n    $(this).addClass('active');\n  });\n\n  $('ul.sub > li').click(function () {\n    $('ul.sub > li.active').removeClass('active');\n    $(this).addClass('active');\n    var $li = $(this);\n    var $ul = $(this).parent();\n    var category = categories[$ul.data('category')].sub($li.data('subcategory'));\n    Storage.category.set(category);\n    loadCategory(from, category, app.getLanguage(from));\n    loadCategory(to, category, app.getLanguage(to));\n    exam.exit();\n  });\n\n  var category = Storage.category.get();\n  do {\n    category.element.click();\n    category = category.parent;\n  } while (category);\n};\n\n},{\"../app\":2,\"../server\":26,\"../storage\":30,\"./exam\":6,\"./view_code\":18,\"./view_desc\":20}],9:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, language, afterRender) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $code = $panel.find('.code');\n  var editor = ace.edit($code.attr('id'));\n  editor.setTheme('ace/theme/monokai');\n  if (index == 0) $panel.find('.desc').addClass('ace-monokai');\n  editor.getSession().setMode('ace/mode/' + language.ace);\n  editor.getSession().setUseWrapMode(true);\n  editor.setShowFoldWidgets(false);\n  editor.setReadOnly(true);\n\n  editor.renderer.on('afterRender', function () {\n    if (app.isExamMode()) return;\n\n    if (afterRender) afterRender();\n  });\n  return editor;\n};\n\n},{\"../app\":2}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $title = $panel.find('.title');\n  $title.text(language.name);\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\nvar util = require('../util');\n\nvar from = 0,\n    to = 1;\n\nvar calculateProgress = function calculateProgress(code_answer, code_user) {\n  return similarity(util.zip(code_answer), util.zip(code_user));\n};\n\nmodule.exports = function () {\n  var editor = app.getEditor(to);\n  editor.on('change', function (e) {\n    if (!app.isExamMode()) return;\n    var progress = calculateProgress(app.getCode(to, true), editor.getValue());\n    $('.progress').css('width', progress * 100 + '%');\n    if (progress == 1) {\n      exam.exit(true);\n      $('#next').addClass('next');\n      $('.progress').css('width', '');\n    }\n  });\n};\n\n/**\n * http://stackoverflow.com/questions/10473745/compare-strings-javascript-return-of-likely\n */\n\nvar similarity = function similarity(s1, s2) {\n  var longer = s1;\n  var shorter = s2;\n  if (s1.length < s2.length) {\n    longer = s2;\n    shorter = s1;\n  }\n  var longerLength = longer.length;\n  if (longerLength == 0) {\n    return 1.0;\n  }\n  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);\n};\n\nvar editDistance = function editDistance(s1, s2) {\n  var costs = [];\n  for (var i = 0; i <= s1.length; i++) {\n    var lastValue = i;\n    for (var j = 0; j <= s2.length; j++) {\n      if (i == 0) costs[j] = j;else {\n        if (j > 0) {\n          var newValue = costs[j - 1];\n          if (s1.charAt(i - 1) != s2.charAt(j - 1)) newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;\n          costs[j - 1] = lastValue;\n          lastValue = newValue;\n        }\n      }\n    }\n    if (i > 0) costs[s2.length] = lastValue;\n  }\n  return costs[s2.length];\n};\n\n},{\"../app\":2,\"../util\":33,\"./exam\":6}],12:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\n\nmodule.exports = function () {\n  $('#next').click(function () {\n    var $next = $(this);\n    if ($next.hasClass('next')) {\n      var $active = $('.sub > li.active');\n      if ($active.is(':last-child')) {\n        var $active_parent = $('#index > li.active');\n        if ($active_parent.is(':nth-last-child(2)')) {\n          alert('Congrats!');\n        } else {\n          $active_parent.next().next().click();\n          $('#index > li.active + .sub > li:first-child').click();\n        }\n      } else {\n        $active.next().click();\n      }\n      $next.removeClass('next');\n    } else {\n      if (app.isExamMode()) {\n        exam.exit();\n      } else {\n        exam.enter();\n      }\n    }\n  });\n};\n\n},{\"../app\":2,\"./exam\":6}],13:[function(require,module,exports){\n'use strict';\n\nvar setupLanguages = require('./setup_languages');\nvar setupStickToBottom = require('./setup_stick_to_bottom');\nvar setupSmoothScroll = require('./setup_smooth_scroll');\n\nmodule.exports = function () {\n  setupLanguages();\n  setupStickToBottom();\n  setupSmoothScroll();\n};\n\n},{\"./setup_languages\":14,\"./setup_smooth_scroll\":15,\"./setup_stick_to_bottom\":16}],14:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nvar languages = Server.getLanguages();\n\nmodule.exports = function () {\n  var _arr = ['#lang-from', '#lang-to'];\n\n  var _loop = function _loop() {\n    var container = _arr[_i];\n    var $container = $(container);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var language = _step.value;\n\n        var $lang = $('<a class=\"lang\" href=\"' + (container == '#lang-from' ? '#dots' : '#top') + '\"></a>');\n        $container.append($lang);\n        var $logo = $('<div class=\"logo\" style=\"background-image: url(\\'./images/lang_' + language.ext + '.png\\')\"></div>');\n        $lang.append($logo);\n        $logo.append('<div class=\"logo mono\" style=\"background-image: url(\\'./images/lang_' + language.ext + '_mono.png\\')\"></div>');\n        $lang.append('<div class=\"name\">' + language.name + '</div>');\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    $container.find('.lang').click(function () {\n      $container.find('.lang.selected').removeClass('selected');\n      $(this).addClass('selected');\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  $('.lang').click(function () {\n    var $lang_to = $('#lang-to');\n    var $lang_from_selected = $('#lang-from .lang.selected');\n    var $lang_to_selected = $('#lang-to .lang.selected');\n    if ($lang_from_selected.length && $lang_to_selected.length) {\n      var from_index = $lang_from_selected.index();\n      var to_index = $lang_to_selected.index() - 2;\n      $lang_to.find('[name=\"lang_from\"]').val(languages[from_index].ext);\n      $lang_to.find('[name=\"lang_to\"]').val(languages[to_index].ext);\n      $lang_to.submit();\n    }\n  });\n};\n\n},{\"../../server\":26}],15:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function () {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 500);\n        return false;\n      }\n    }\n  });\n  var $unfocused = $('.focused');\n  var onScroll = function onScroll() {\n    $unfocused.toggleClass('unfocused', $(document).scrollTop() <= 168);\n  };\n  onScroll();\n  $(window).scroll(onScroll);\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var $stick_to_bottom_fake = $('.stick-to-bottom.fake');\n  var $stick_to_bottom_real = $('.stick-to-bottom.real');\n  var $lang_from = $('#lang-from');\n  var $fullscreen = $('.fullscreen');\n  var onResize = function onResize() {\n    var top = $lang_from.offset().top + $lang_from.height();\n    var bottom = $stick_to_bottom_fake.offset().top;\n    $fullscreen.toggleClass('full', top < bottom);\n    $stick_to_bottom_real.toggleClass('stick', top < bottom);\n  };\n  onResize();\n  $(window).resize(onResize);\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('.code, #comparison').mousemove(function (e) {\n    $('.match').removeClass('selected');\n    var $code = $(this);\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    $code.find('.match').each(function () {\n      var $match = $(this);\n\n      var _$match$offset = $match.offset(),\n          top = _$match$offset.top,\n          left = _$match$offset.left;\n\n      var bottom = top + $match.height();\n      var right = left + $match.width();\n      if (top < pageY && pageY < bottom && left < pageX && pageX < right) {\n        (function () {\n          var match = $match.data('match');\n          $('.match').filter(function () {\n            return $(this).data('match') == match;\n          }).addClass('selected');\n        })();\n      }\n    });\n  });\n};\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, code) {\n  var matchings = [];\n  app.setMatchings(index, matchings);\n  var lines = code.split(/\\r?\\n/);\n  var omit_num = 99999;\n\n  var _loop = function _loop(i) {\n    lines[i] = lines[i].replace(/(^|\\]\\})(((?!#\\d+\\{\\[).)+)/gm, '$1#' + omit_num + '{[$2]}');\n    lines[i] = lines[i].replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, function (match, num, content) {\n      num = parseInt(num);\n      if (num == omit_num) num = -1;\n      matchings.push([content, num, i]);\n      return content;\n    });\n  };\n\n  for (var i = 0; i < lines.length; i++) {\n    _loop(i);\n  }\n  code = lines.join('\\n');\n  app.getEditor(index).setValue(code, -1);\n};\n\n},{\"../app\":2}],19:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = function () {\n  var $desc = $('#comparison');\n  var pair = [app.getMatchings(from), app.getMatchings(to)];\n\n  var max = -1;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = pair[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var matchings = _step.value;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = matchings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var matching = _step3.value;\n\n          max = Math.max(max, matching[1]);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var comparisons = [];\n  for (var i = 0; i <= max; i++) {\n    comparisons.push([[], [], -1]);\n  }\n  var _arr = [from, to];\n\n  var _loop2 = function _loop2() {\n    var i = _arr[_i];\n    $('.panel:eq(' + i + ') .code .match').each(function () {\n      var $match = $(this);\n      var match = $match.data('match');\n      comparisons[match][i].push($match);\n      if (i == 0 && comparisons[match][2] == -1) {\n        comparisons[match][2] = $match.parent().parent().index();\n      }\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop2();\n  }\n\n  var _loop = function _loop(_i2) {\n    if (comparisons[_i2][2] == -1) {\n      var _matchings = pair[0];\n      _matchings.every(function (matching) {\n        if (matching[1] == _i2) {\n          comparisons[_i2][2] = matching[2];\n          return false;\n        }\n        return true;\n      });\n    }\n  };\n\n  for (var _i2 = 0; _i2 <= max; _i2++) {\n    _loop(_i2);\n  }\n  $desc.empty();\n  $desc.append('<h2>Key Changes</h2>');\n  $desc.append('<h6>Not all changes are shown.</h6>');\n  var last_line = -1;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    var _loop3 = function _loop3() {\n      var comparison = _step2.value;\n\n      var _comparison = _slicedToArray(comparison, 2),\n          pieces_from = _comparison[0],\n          pieces_to = _comparison[1];\n\n      var is_same = pieces_from.length == pieces_to.length && pieces_from.every(function (element, index) {\n        return element.text() == pieces_to[index].text();\n      });\n      if (is_same) return 'continue';\n      var line = comparison[2];\n      if (last_line != line) {\n        last_line = line;\n        $desc.append('<div class=\"line line-number\">Line ' + (line + 1) + '</div>');\n      }\n      var $line = $('<div class=\"line\"></div>');\n      $desc.append($line);\n      var _arr2 = [pieces_from, pieces_to];\n      for (var _i3 = 0; _i3 < _arr2.length; _i3++) {\n        var pieces = _arr2[_i3];\n        var $group = $('<span class=\"group\"></span>');\n        $line.append($group);\n        if (!pieces.length) {\n          $group.append('<span class=\"empty\"></span>');\n        }\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = pieces[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var piece = _step4.value;\n\n            var $piece = piece.clone();\n            $piece.data('match', piece.data('match'));\n            $group.append($piece);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    };\n\n    for (var _iterator2 = comparisons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ret3 = _loop3();\n\n      if (_ret3 === 'continue') continue;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n};\n\n},{\"../app\":2}],20:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (desc) {\n  var converter = new showdown.Converter();\n\n  var $desc = $('#description');\n  $desc.html(converter.makeHtml(desc));\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar Storage = require('./storage');\nvar app = require('./app');\nvar App = require('./app/constructor');\n\nvar _require = require('./bean'),\n    Language = _require.Language;\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar categories = Server.getCategories();\nvar from = 0,\n    to = 1;\n\n// set global promise error handler\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, window, {\n  main: DOM.setupMain,\n  learn: function learn() {\n    extend(true, app, new App());\n    extend(true, window, { app: app });\n    var lang_from_ext = getUrlParameter('lang_from');\n    var lang_to_ext = getUrlParameter('lang_to');\n    if (lang_from_ext && lang_to_ext) {\n      var changed = Storage.language.set(from, lang_from_ext) || Storage.language.set(to, lang_to_ext);\n      if (changed) Storage.category.set(categories[0].sub(0));\n    } else {\n      lang_from_ext = Storage.language.get(from);\n      lang_to_ext = Storage.language.get(to);\n    }\n    var lang_from = Language.getWithExt(lang_from_ext);\n    var lang_to = Language.getWithExt(lang_to_ext);\n    app.setLanguage(from, lang_from);\n    app.setLanguage(to, lang_to);\n    app.setEditor(from, DOM.initEditor(from, lang_from, DOM.viewComparison));\n    app.setEditor(to, DOM.initEditor(to, lang_to, DOM.viewComparison));\n    DOM.initCategories(categories);\n    DOM.setupLayout();\n    DOM.setupMatching();\n    DOM.setupExam();\n    DOM.setLanguage(from, lang_from);\n    DOM.setLanguage(to, lang_to);\n  }\n});\n\nvar getUrlParameter = function getUrlParameter(sParam) {\n  var params = decodeURIComponent(window.location.search.substring(1)).split('&');\n  for (var i = 0; i < params.length; i++) {\n    var param = params[i].split('=');\n    if (param[0] === sParam) {\n      return param[1] === undefined ? true : param[1];\n    }\n  }\n  return null;\n};\n\n},{\"./app\":2,\"./app/constructor\":1,\"./bean\":4,\"./dom\":7,\"./server\":26,\"./storage\":30,\"rsvp\":35}],22:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":23}],23:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar _$ = $,\n    ajax = _$.ajax,\n    extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        resolve(response);\n      },\n      error: function error(reason) {\n        reject(reason);\n      }\n    };\n    var opts = extend({}, defaults, options, callbacks, { url: url });\n    ajax(opts);\n  });\n};\n\n},{\"rsvp\":35}],24:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Category = _require.Category;\n\nmodule.exports = function () {\n  return categories;\n};\n\nvar categories = [new Category('Comments', 'comment', [new Category('Single Line Comments', 'single'), new Category('Multiple Lines Comments', 'multi')]), new Category('Variables', 'var', [new Category('Definition', 'def'), new Category('Boolean Type', 'bool'), new Category('Numeric Types', 'num'), new Category('Strings', 'str'), new Category('Data Structures', 'data_structure'), new Category('Constants', 'const')]), new Category('Operators', 'operator', [new Category('Boolean Operations', 'bool'), new Category('Comparisons', 'compare'), new Category('Bitwise Operations', 'bitwise')]), new Category('Conditionals', 'conditional', [new Category('If / Else Statement', 'if_else'), new Category('Switch / Case Statement', 'switch_case'), new Category('Ternary Operator', 'ternary')]), new Category('Loops', 'loop', [new Category('For Statement', 'for'), new Category('While Statement', 'while'), new Category('Continue Statement', 'continue'), new Category('Break Statement', 'break')]), new Category('Functions', 'func', [new Category('Definition', 'def'), new Category('Parameters', 'param'), new Category('Return Statement', 'return')]), new Category('Classes', 'class', [new Category('Definition', 'def'), new Category('Class Variables', 'cls_var'), new Category('Class Functions', 'cls_func'), new Category('Instances', 'obj'), new Category('Instance Variables', 'obj_var'), new Category('Instance Functions', 'obj_func'), new Category('Inheritance', 'inherit')]), new Category('Built-In', 'built_in', [new Category('Math Functions', 'math'), new Category('String Functions', 'str'), new Category('Data Structure Operations', 'data_structure'), new Category('Others', 'etc')])];\n\n},{\"../bean\":4}],25:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Language = _require.Language;\n\nmodule.exports = function () {\n  return languages;\n};\n\nvar languages = [new Language('C++', 'c_cpp', 'cpp'), new Language('Python', 'python', 'py'), new Language('Java', 'java', 'java'), new Language('EMCAScript', 'javascript', 'js'), new Language('Nada.', null, 'idk')];\n\n},{\"../bean\":4}],26:[function(require,module,exports){\n'use strict';\n\nvar loadCode = require('./load_code');\nvar loadDesc = require('./load_desc');\nvar getCategories = require('./get_categories');\nvar getLanguages = require('./get_languages');\n\nmodule.exports = {\n  loadCode: loadCode,\n  loadDesc: loadDesc,\n  getCategories: getCategories,\n  getLanguages: getLanguages\n};\n\n},{\"./get_categories\":24,\"./get_languages\":25,\"./load_code\":27,\"./load_desc\":28}],27:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/code.' + language.ext;\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],28:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/desc.md';\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],29:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar Server = require('../server');\n\nvar getName = function getName() {\n  return 'category';\n};\n\nmodule.exports = {\n  set: function set(category) {\n    var path = '';\n    do {\n      path = category.dir + '/' + path;\n      category = category.parent;\n    } while (category);\n    path.substr(0, path.length - 1);\n    return _set(getName(), path);\n  },\n  get: function get() {\n    var categories = Server.getCategories();\n    var dirs = _get(getName()).split('/');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var dir = _step.value;\n\n        var category = $.grep(categories, function (category) {\n          return category.dir == dir;\n        })[0];\n        categories = category.children;\n        if (!categories.length) return {\n            v: category\n          };\n      };\n\n      for (var _iterator = dirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ret = _loop();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n},{\"../server\":26,\"./manager\":32}],30:[function(require,module,exports){\n'use strict';\n\nvar language = require('./language');\nvar category = require('./category');\n\nmodule.exports = {\n  language: language,\n  category: category\n};\n\n},{\"./category\":29,\"./language\":31}],31:[function(require,module,exports){\n'use strict';\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar getName = function getName(index) {\n  return 'lang_' + index;\n};\n\nmodule.exports = {\n  set: function set(index, ext) {\n    return _set(getName(index), ext);\n  },\n  get: function get(index) {\n    return _get(getName(index));\n  }\n};\n\n},{\"./manager\":32}],32:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  set: function set(name, value) {\n    if (Cookies.get(name) == value) return false;\n    Cookies.set(name, value);\n    return true;\n  },\n  get: function get(name) {\n    return Cookies.get(name);\n  },\n  remove: function remove(name) {\n    Cookies.remove(name);\n    return true;\n  }\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  zip: function zip(code) {\n    return code.trim().replace(/^\\s*[\\r\\n]/gm, '').replace(/\\b\\s+\\B/g, '').replace(/\\B\\s+\\b/g, '').replace(/\\B\\s+\\B/g, '');\n  }\n};\n\n},{}],34:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],35:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":34}]},{},[21])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}