{"version":3,"sources":["duocoder.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","panelVars","language","editor","matchings","lines","_this","this","panel","exam_mode","setLanguage","index","setEditor","setMatchings","setCode","setLines","enterExamMode","exitExamMode","getLanguage","getEditor","getMatchings","getCode","readable","replace","getLines","isExamMode","2","3","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_class","name","dir","children","arguments","undefined","parent","element","next","forEach","child","value","4","Language","Category","./category","./language","5","ace","ext","complete","Server","languages","getLanguages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","../server","6","app","viewCode","to","enter","addClass","css","setReadOnly","setValue","exit","keep_code","removeClass","../app","./view_code","7","setupMain","initEditor","initCategories","setupLayout","setupMatching","setupExam","viewDesc","viewComparison","exam","./exam","./init_categories","./init_editor","./set_language","./setup_exam","./setup_layout","./setup_main","./setup_matching","./view_comparison","./view_desc","8","Storage","from","loadCategory","category","loadCode","then","loadDesc","categories","$index","append","$sub_index","j","click","$li","$ul","data","sub","set","get","../storage","9","afterRender","$panel","$code","find","edit","attr","setTheme","getSession","setMode","setUseWrapMode","setShowFoldWidgets","renderer","on","10","$title","text","11","util","calculateProgress","code_answer","code_user","similarity","zip","progress","getValue","s1","s2","longer","shorter","longerLength","editDistance","parseFloat","costs","lastValue","newValue","charAt","Math","min","../util","12","$next","hasClass","$active","is","$active_parent","alert","13","setupLanguages","setupStickToBottom","setupSmoothScroll","./setup_languages","./setup_smooth_scroll","./setup_stick_to_bottom","14","_arr","_loop","container","_i","$container","$lang","$logo","$form","$lang_from_selected","$lang_to_selected","from_index","to_index","val","submit","../../server","15","location","pathname","hostname","hash","slice","animate","scrollTop","offset","top","$unfocused","onScroll","toggleClass","document","window","scroll","16","$stick_to_bottom_fake","$stick_to_bottom_real","$lang_from","$fullscreen","onResize","height","bottom","resize","17","mousemove","pageX","pageY","each","$match","_$match$offset","left","right","width","match","filter","18","split","omit_num","num","content","parseInt","push","join","19","_slicedToArray","sliceIterator","arr","_n","_d","_e","_s","Array","isArray","$desc","pair","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","matching","editors","$temp_snippets","_i4","html","line","$textLayer","$renderLine","comparisons","_arr2","_loop2","_i2","_i3","_matchings","every","empty","last_line","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop3","comparison","_comparison","pieces_from","pieces_to","is_same","$line","_arr3","_i5","pieces","$group","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","piece","$piece","clone","_iterator2","20","desc","converter","showdown","Converter","makeHtml","21","RSVP","DOM","App","_require","getCategories","reason","console","assert","main","learn","lang_from_ext","getUrlParameter","lang_to_ext","changed","lang_from","getWithExt","lang_to","sParam","params","decodeURIComponent","search","substring","param","./app","./app/constructor","./bean","./dom","./server","./storage","rsvp","22","request","url","type","./request","23","ajax","defaults","options","Promise","resolve","reject","callbacks","success","response","error","opts","24","../bean","25","26","./get_categories","./get_languages","./load_code","./load_desc","27","path","./ajax/get","28","29","_typeof","obj","constructor","_set","_get","getName","substr","dirs","grep","v","_ret","./manager","30","31","32","Cookies","remove","33","trim","34","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","35","global","factory","define","amd","indexOf","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","withOwnPromise","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","counter","Result","getThen$1","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","createTextNode","observe","characterData","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","splice","trigger","_isArray","toString","Date","getTime","o_create","create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"CAOA,QAAUA,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIK,GAAE,GAAIC,OAAM,uBAAuBN,EAAE,IAAK,MAAMK,GAAEE,KAAK,mBAAmBF,EAAE,GAAIG,GAAEX,EAAEG,IAAIS,WAAYb,GAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGS,QAAkD,IAAI,GAA1CL,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKa,GAAG,SAAST,EAAQU,EAAOJ,GACvd,YAEA,IAAIK,GAAKC,EACLC,EAASF,EAAGE,OAGZC,GACFC,SAAU,KACVC,OAAQ,KACRC,UAAW,KACXb,KAAM,GACNc,OAAO,EAGTR,GAAOJ,QAAU,WACf,GAAIa,GAAQC,IAEZA,MAAKC,OAASR,GAAO,KAAUC,GAAYD,GAAO,KAAUC,IAC5DM,KAAKE,WAAY,EAEjBF,KAAKG,YAAc,SAAUC,EAAOT,GAClCI,EAAME,MAAMG,GAAOT,SAAWA,GAGhCK,KAAKK,UAAY,SAAUD,EAAOR,GAChCG,EAAME,MAAMG,GAAOR,OAASA,GAG9BI,KAAKM,aAAe,SAAUF,EAAOP,GACnCE,EAAME,MAAMG,GAAOP,UAAYA,GAGjCG,KAAKO,QAAU,SAAUH,EAAOpB,GAC9Be,EAAME,MAAMG,GAAOpB,KAAOA,GAG5BgB,KAAKQ,SAAW,SAAUJ,EAAON,GAC/BC,EAAME,MAAMG,GAAON,MAAQA,GAG7BE,KAAKS,cAAgB,WACnBV,EAAMG,WAAY,GAGpBF,KAAKU,aAAe,WAClBX,EAAMG,WAAY,GAGpBF,KAAKW,YAAc,SAAUP,GAC3B,MAAOL,GAAME,MAAMG,GAAOT,UAG5BK,KAAKY,UAAY,SAAUR,GACzB,MAAOL,GAAME,MAAMG,GAAOR,QAG5BI,KAAKa,aAAe,SAAUT,GAC5B,MAAOL,GAAME,MAAMG,GAAOP,WAG5BG,KAAKc,QAAU,SAAUV,EAAOW,GAC9B,GAAI/B,GAAOe,EAAME,MAAMG,GAAOpB,IAC9B,OAAI+B,GAAiB/B,EAAKgC,QAAQ,gCAAiC,MAAkBhC,GAGvFgB,KAAKiB,SAAW,SAAUb,GACxB,MAAOL,GAAME,MAAMG,GAAON,OAG5BE,KAAKkB,WAAa,WAChB,MAAOnB,GAAMG,iBAIXiB,GAAG,SAASvC,EAAQU,EAAOJ,GACjC,YAEAI,GAAOJ,gBAEDkC,GAAG,SAASxC,EAAQU,EAAOJ,GACjC,YAIA,SAASmC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAI/C,GAAI,EAAGA,EAAI+C,EAAMxC,OAAQP,IAAK,CAAE,GAAIgD,GAAaD,EAAM/C,EAAIgD,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeP,EAAQE,EAAWM,IAAKN,IAAiB,MAAO,UAAUN,EAAaa,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,KAIhiBjC,GAAOJ,QAAU,WACf,QAASqD,GAAOC,EAAMC,GACpB,GAAI1C,GAAQC,KAER0C,EAAWC,UAAUvD,OAAS,GAAsBwD,SAAjBD,UAAU,GAAmBA,UAAU,KAE9EtB,GAAgBrB,KAAMuC,GAEtBvC,KAAK6C,OAAS,KACd7C,KAAKwC,KAAOA,EACZxC,KAAKyC,IAAMA,EACXzC,KAAK0C,SAAWA,EAChB1C,KAAK8C,QAAU,KACf9C,KAAK+C,KAAO,KACZL,EAASM,QAAQ,SAAUC,GACzBA,EAAMJ,OAAS9C,IAWnB,MAPA0B,GAAac,IACXJ,IAAK,MACLe,MAAO,SAAa9C,GAClB,MAAOJ,MAAK0C,SAAStC,OAIlBmC,UAGHY,GAAG,SAASvE,EAAQU,EAAOJ,GACjC,YAEA,IAAIkE,GAAWxE,EAAQ,cACnByE,EAAWzE,EAAQ,aAEvBU,GAAOJ,SACLkE,SAAUA,EACVC,SAAUA,KAGTC,aAAa,EAAEC,aAAa,IAAIC,GAAG,SAAS5E,EAAQU,EAAOJ,GAC9D,YAIA,SAASmC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAI/C,GAAI,EAAGA,EAAI+C,EAAMxC,OAAQP,IAAK,CAAE,GAAIgD,GAAaD,EAAM/C,EAAIgD,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeP,EAAQE,EAAWM,IAAKN,IAAiB,MAAO,UAAUN,EAAaa,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,KAIhiBjC,GAAOJ,QAAU,WACf,QAASqD,GAAOC,EAAMiB,EAAKC,GACzB,GAAIC,KAAWhB,UAAUvD,OAAS,GAAsBwD,SAAjBD,UAAU,KAAmBA,UAAU,EAE9EtB,GAAgBrB,KAAMuC,GAEtBvC,KAAKwC,KAAOA,EACZxC,KAAKyD,IAAMA,EACXzD,KAAK0D,IAAMA,EACX1D,KAAK2D,SAAWA,EAmClB,MAhCAlC,GAAac,EAAQ,OACnBJ,IAAK,aACLe,MAAO,SAAoBQ,GACzB,GAAIE,GAAShF,EAAQ,aACjBiF,EAAYD,EAAOE,eACnBC,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBrB,MAErB,KACE,IAAK,GAA8CsB,GAA1CC,EAAYN,EAAUO,OAAOC,cAAsBN,GAA6BG,EAAQC,EAAUpB,QAAQuB,MAAOP,GAA4B,EAAM,CAC1J,GAAIpE,GAAWuE,EAAMhB,KAErB,IAAIvD,EAAS+D,KAAOA,EAAK,MAAO/D,IAElC,MAAO4E,GACPP,GAAoB,EACpBC,EAAiBM,EACjB,QACA,KACOR,GAA6BI,EAAUK,QAC1CL,EAAUK,SAEZ,QACA,GAAIR,EACF,KAAMC,SAOT1B,OAGNkC,YAAY,KAAKC,GAAG,SAAS9F,EAAQU,EAAOJ,GAC/C,YAEA,IAAIyF,GAAM/F,EAAQ,UACdgG,EAAWhG,EAAQ,eAGnBiG,EAAK,CAETvF,GAAOJ,SACL4F,MAAO,WACLH,EAAIlE,gBACJjB,EAAE,SAASuF,SAAS,YACpBvF,EAAE,yBAAyBwF,IAAI,UAAW,QAC1C,IAAIpF,GAAS+E,EAAI/D,UAAUiE,EAC3BjF,GAAOqF,aAAY,GACnBrF,EAAOsF,SAAS,KAElBC,KAAM,SAAcC,GAClBT,EAAIjE,eACJlB,EAAE,SAAS6F,YAAY,iBACvB7F,EAAE,yBAAyBwF,IAAI,UAAW,GAC1C,IAAIpF,GAAS+E,EAAI/D,UAAUiE,EAC3BjF,GAAOqF,aAAY,GACdG,GAAWR,EAASC,EAAIF,EAAI7D,QAAQ+D,QAI1CS,SAAS,EAAEC,cAAc,KAAKC,GAAG,SAAS5G,EAAQU,EAAOJ,GAC5D,YAEA,IAAIuG,GAAY7G,EAAQ,gBACpB8G,EAAa9G,EAAQ,iBACrB+G,EAAiB/G,EAAQ,qBACzBgH,EAAchH,EAAQ,kBACtBiH,EAAgBjH,EAAQ,oBACxBkH,EAAYlH,EAAQ,gBACpBuB,EAAcvB,EAAQ,kBACtBgG,EAAWhG,EAAQ,eACnBmH,EAAWnH,EAAQ,eACnBoH,EAAiBpH,EAAQ,qBACzBqH,EAAOrH,EAAQ,SAEnBU,GAAOJ,SACLuG,UAAWA,EACXC,WAAYA,EACZC,eAAgBA,EAChBC,YAAaA,EACbC,cAAeA,EACfC,UAAWA,EACX3F,YAAaA,EACbyE,SAAUA,EACVmB,SAAUA,EACVC,eAAgBA,EAChBC,KAAMA,KAGLC,SAAS,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,iBAAiB,GAAGC,eAAe,GAAGC,iBAAiB,GAAGC,eAAe,GAAGC,mBAAmB,GAAGlB,cAAc,GAAGmB,oBAAoB,GAAGC,cAAc,KAAKC,GAAG,SAAShI,EAAQU,EAAOJ,GAC9O,YAEA,IAAI0E,GAAShF,EAAQ,aACjBiI,EAAUjI,EAAQ,cAClB+F,EAAM/F,EAAQ,UACdgG,EAAWhG,EAAQ,eACnBmH,EAAWnH,EAAQ,eACnBqH,EAAOrH,EAAQ,UAEfkI,EAAO,EACPjC,EAAK,EAELkC,EAAe,SAAsB3G,EAAO4G,EAAUrH,GACxDiE,EAAOqD,SAASD,EAAUrH,GAAUuH,KAAK,SAAUlI,GACjDiH,EAAKd,OACLR,EAAIpE,QAAQH,EAAOpB,GACnB4F,EAASxE,EAAOpB,KAEdoB,GAASyE,GACXjB,EAAOuD,SAASH,EAAUrH,GAAUuH,KAAKnB,GAI7CzG,GAAOJ,QAAU,SAAUkI,GACzB,GAAIC,GAAS7H,EAAE,SACf4H,GAAWpE,QAAQ,SAAUgE,EAAUnI,GACrCmI,EAASlE,QAAUtD,EAAE,QAAUX,EAAI,GAAK,KAAOmI,EAASxE,KAAO,SAC/D6E,EAAOC,OAAON,EAASlE,QACvB,IAAIyE,GAAa/H,EAAE,kCAAoCX,EAAI,UAC3DwI,GAAOC,OAAOC,GACdP,EAAStE,SAASM,QAAQ,SAAUgE,EAAUQ,GAC5CR,EAASlE,QAAUtD,EAAE,yBAA2BgI,EAAI,KAAOR,EAASxE,KAAO,SAC3E+E,EAAWD,OAAON,EAASlE,aAI/BtD,EAAE,eAAeiI,MAAM,WACrBjI,EAAE,sBAAsB6F,YAAY,UACpC7F,EAAEQ,MAAM+E,SAAS,YAGnBvF,EAAE,eAAeiI,MAAM,WACrBjI,EAAE,sBAAsB6F,YAAY,UACpC7F,EAAEQ,MAAM+E,SAAS,SACjB,IAAI2C,GAAMlI,EAAEQ,MACR2H,EAAMnI,EAAEQ,MAAM6C,SACdmE,EAAWI,EAAWO,EAAIC,KAAK,aAAaC,IAAIH,EAAIE,KAAK,eAC7Df,GAAQG,SAASc,IAAId,GACrBD,EAAaD,EAAME,EAAUrC,EAAIhE,YAAYmG,IAC7CC,EAAalC,EAAImC,EAAUrC,EAAIhE,YAAYkE,IAC3CoB,EAAKd,QAGP,IAAI6B,GAAWH,EAAQG,SAASe,KAChC,GACEf,GAASlE,QAAQ2E,QACjBT,EAAWA,EAASnE,aACbmE,MAGR1B,SAAS,EAAEb,YAAY,GAAGuD,aAAa,GAAG9B,SAAS,EAAEX,cAAc,GAAGoB,cAAc,KAAKsB,GAAG,SAASrJ,EAAQU,EAAOJ,GACvH,YAEA,IAAIyF,GAAM/F,EAAQ,UACdoH,EAAiBpH,EAAQ,oBAE7BU,GAAOJ,QAAU,SAAUkB,EAAOT,EAAUuI,GAC1C,GAAIC,GAAS3I,EAAE,aAAeY,EAAQ,KAClCgI,EAAQD,EAAOE,KAAK,SACpBzI,EAAS6D,IAAI6E,KAAKF,EAAMG,KAAK,MAWjC,OAVA3I,GAAO4I,SAAS,qBACH,GAATpI,GAAY+H,EAAOE,KAAK,SAAStD,SAAS,eAC9CnF,EAAO6I,aAAaC,QAAQ,YAAc/I,EAAS8D,KACnD7D,EAAO6I,aAAaE,gBAAe,GACnC/I,EAAOgJ,oBAAmB,GAC1BhJ,EAAOqF,aAAY,GACnBrF,EAAOiJ,SAASC,GAAG,yBAA0B,WACvCnE,EAAIzD,cACR8E,MAEKpG,KAGN0F,SAAS,EAAEoB,oBAAoB,KAAKqC,IAAI,SAASnK,EAAQU,EAAOJ,GACnE,YAEAI,GAAOJ,QAAU,SAAUkB,EAAOT,GAChC,GAAIwI,GAAS3I,EAAE,aAAeY,EAAQ,KAClC4I,EAASb,EAAOE,KAAK,SACzBW,GAAOC,KAAKtJ,EAAS6C,YAGjB0G,IAAI,SAAStK,EAAQU,EAAOJ,GAClC,YAEA,IAAIyF,GAAM/F,EAAQ,UACdqH,EAAOrH,EAAQ,UACfuK,EAAOvK,EAAQ,WAGfiG,EAAK,EAELuE,EAAoB,SAA2BC,EAAaC,GAC9D,MAAOC,GAAWJ,EAAKK,IAAIH,GAAcF,EAAKK,IAAIF,IAGpDhK,GAAOJ,QAAU,WACf,GAAIU,GAAS+E,EAAI/D,UAAUiE,EAC3BjF,GAAOkJ,GAAG,SAAU,SAAU1K,GAC5B,GAAKuG,EAAIzD,aAAT,CACA,GAAIuI,GAAWL,EAAkBzE,EAAI7D,QAAQ+D,GAAI,GAAOjF,EAAO8J,WAC/DlK,GAAE,aAAawF,IAAI,QAAoB,IAAXyE,EAAiB,KAC7B,GAAZA,IACFxD,EAAKd,MAAK,GACV3F,EAAE,SAASuF,SAAS,QACpBvF,EAAE,aAAawF,IAAI,QAAS,QASlC,IAAIuE,GAAa,SAAoBI,EAAIC,GACvC,GAAIC,GAASF,EACTG,EAAUF,CACVD,GAAGvK,OAASwK,EAAGxK,SACjByK,EAASD,EACTE,EAAUH,EAEZ,IAAII,GAAeF,EAAOzK,MAC1B,OAAoB,IAAhB2K,EACK,GAEDA,EAAeC,EAAaH,EAAQC,IAAYG,WAAWF,IAGjEC,EAAe,SAAsBL,EAAIC,GAE3C,IAAK,GADDM,MACKrL,EAAI,EAAGA,GAAK8K,EAAGvK,OAAQP,IAAK,CAEnC,IAAK,GADDsL,GAAYtL,EACP2I,EAAI,EAAGA,GAAKoC,EAAGxK,OAAQoI,IAC9B,GAAS,GAAL3I,EAAQqL,EAAM1C,GAAKA,MACrB,IAAIA,EAAI,EAAG,CACT,GAAI4C,GAAWF,EAAM1C,EAAI,EACrBmC,GAAGU,OAAOxL,EAAI,IAAM+K,EAAGS,OAAO7C,EAAI,KAAI4C,EAAWE,KAAKC,IAAID,KAAKC,IAAIH,EAAUD,GAAYD,EAAM1C,IAAM,GACzG0C,EAAM1C,EAAI,GAAK2C,EACfA,EAAYC,EAIdvL,EAAI,IAAGqL,EAAMN,EAAGxK,QAAU+K,GAEhC,MAAOD,GAAMN,EAAGxK,WAGfkG,SAAS,EAAEkF,UAAU,GAAGtE,SAAS,IAAIuE,IAAI,SAAS7L,EAAQU,EAAOJ,GACpE,YAEA,IAAIyF,GAAM/F,EAAQ,UACdqH,EAAOrH,EAAQ,SAEnBU,GAAOJ,QAAU,WACfM,EAAE,SAASiI,MAAM,WACf,GAAIiD,GAAQlL,EAAEQ,KACd,IAAI0K,EAAMC,SAAS,QAAS,CAC1B,GAAIC,GAAUpL,EAAE,mBAChB,IAAIoL,EAAQC,GAAG,eAAgB,CAC7B,GAAIC,GAAiBtL,EAAE,qBACnBsL,GAAeD,GAAG,sBACpBE,MAAM,cAEND,EAAe/H,OAAOA,OAAO0E,QAC7BjI,EAAE,8CAA8CiI,aAGlDmD,GAAQ7H,OAAO0E,OAEjBiD,GAAMrF,YAAY,YAEdV,GAAIzD,aACN+E,EAAKd,OAELc,EAAKnB,aAMVQ,SAAS,EAAEY,SAAS,IAAI8E,IAAI,SAASpM,EAAQU,EAAOJ,GACvD,YAEA,IAAI+L,GAAiBrM,EAAQ,qBACzBsM,EAAqBtM,EAAQ,2BAC7BuM,EAAoBvM,EAAQ,wBAEhCU,GAAOJ,QAAU,WACf+L,IACAC,IACAC,OAGCC,oBAAoB,GAAGC,wBAAwB,GAAGC,0BAA0B,KAAKC,IAAI,SAAS3M,EAAQU,EAAOJ,GAChH,YAEA,IAAI0E,GAAShF,EAAQ,gBAEjBiF,EAAYD,EAAOE,cAEvBxE,GAAOJ,QAAU,WA+Cf,IAAK,GA9CDsM,IAAQ,aAAc,YAEtBC,EAAQ,WACV,GAAIC,GAAYF,EAAKG,GACjBC,EAAapM,EAAEkM,GACf3H,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBrB,MAErB,KACE,IAAK,GAA8CsB,GAA1CC,EAAYN,EAAUO,OAAOC,cAAsBN,GAA6BG,EAAQC,EAAUpB,QAAQuB,MAAOP,GAA4B,EAAM,CAC1J,GAAIpE,GAAWuE,EAAMhB,MAEjB2I,EAAQrM,EAAE,0BAAyC,cAAbkM,EAA4B,QAAU,QAAU,SAC1FE,GAAWtE,OAAOuE,EAClB,IAAIC,GAAQtM,EAAE,kEAAoEG,EAAS+D,IAAM,kBACjGmI,GAAMvE,OAAOwE,GACbA,EAAMxE,OAAO,uEAAyE3H,EAAS+D,IAAM,wBACrGmI,EAAMvE,OAAO,qBAAuB3H,EAAS6C,KAAO,WAEtD,MAAO+B,GACPP,GAAoB,EACpBC,EAAiBM,EACjB,QACA,KACOR,GAA6BI,EAAUK,QAC1CL,EAAUK,SAEZ,QACA,GAAIR,EACF,KAAMC,IAKZ2H,EAAWvD,KAAK,SAASZ,MAAM,WAC7B,GAAI9H,GAAWkE,EAAUrE,EAAEQ,MAAMI,QACjC,OAAKT,GAASgE,UAIdiI,EAAWvD,KAAK,kBAAkBhD,YAAY,gBAC9C7F,GAAEQ,MAAM+E,SAAS,iBAJfgG,OAAM,qCAAuCpL,EAAS6C,KAAO,QAQ1DmJ,EAAK,EAAGA,EAAKH,EAAKpM,OAAQuM,IACjCF,GAEFjM,GAAE,SAASiI,MAAM,WACf,GAAIsE,GAAQvM,EAAE,QACVwM,EAAsBxM,EAAE,6BACxByM,EAAoBzM,EAAE,0BAC1B,IAAIwM,EAAoB5M,QAAU6M,EAAkB7M,OAAQ,CAC1D,GAAI8M,GAAaF,EAAoB5L,QACjC+L,EAAWF,EAAkB7L,OACjC2L,GAAM1D,KAAK,sBAAsB+D,IAAIvI,EAAUqI,GAAYxI,KAC3DqI,EAAM1D,KAAK,oBAAoB+D,IAAIvI,EAAUsI,GAAUzI,KACvDqI,EAAMM,eAKTC,eAAe,KAAKC,IAAI,SAAS3N,EAAQU,EAAOJ,GACnD,YAEAI,GAAOJ,QAAU,WACfM,EAAE,gCAAgCiI,MAAM,WACtC,GAAI+E,SAASC,SAASzL,QAAQ,MAAO,KAAOhB,KAAKyM,SAASzL,QAAQ,MAAO,KAAOwL,SAASE,UAAY1M,KAAK0M,SAAU,CAClH,GAAI/K,GAASnC,EAAEQ,KAAK2M,KAEpB,IADAhL,EAASA,EAAOvC,OAASuC,EAASnC,EAAE,SAAWQ,KAAK2M,KAAKC,MAAM,GAAK,KAChEjL,EAAOvC,OAIT,MAHAI,GAAE,cAAcqN,SACdC,UAAWnL,EAAOoL,SAASC,KAC1B,MACI,IAIb,IAAIC,GAAazN,EAAE,YACf0N,EAAW,WACbD,EAAWE,YAAY,YAAa3N,EAAE4N,UAAUN,aAAe,KAEjEI,KACA1N,EAAE6N,QAAQC,OAAOJ,SAGbK,IAAI,SAAS3O,EAAQU,EAAOJ,GAClC,YAEAI,GAAOJ,QAAU,WACf,GAAIsO,GAAwBhO,EAAE,yBAC1BiO,EAAwBjO,EAAE,yBAC1BkO,EAAalO,EAAE,cACfmO,EAAcnO,EAAE,eAChBoO,EAAW,WACb,GAAIZ,GAAMU,EAAWX,SAASC,IAAMU,EAAWG,SAC3CC,EAASN,EAAsBT,SAASC,GAC5CW,GAAYR,YAAY,OAAQH,EAAMc,GACtCL,EAAsBN,YAAY,QAASH,EAAMc,GAEnDF,KACApO,EAAE6N,QAAQU,OAAOH,SAGbI,IAAI,SAASpP,EAAQU,EAAOJ,GAClC,YAEAI,GAAOJ,QAAU,WACfM,EAAE,sBAAsByO,UAAU,SAAU7P,GAC1CoB,EAAE,UAAU6F,YAAY,WACxB,IAAI+C,GAAQ5I,EAAEQ,MACVkO,EAAQ9P,EAAE8P,MACVC,EAAQ/P,EAAE+P,KAEd/F,GAAMC,KAAK,UAAU+F,KAAK,WACxB,GAAIC,GAAS7O,EAAEQ,MAEXsO,EAAiBD,EAAOtB,SACxBC,EAAMsB,EAAetB,IACrBuB,EAAOD,EAAeC,KAEtBT,EAASd,EAAMqB,EAAOR,SACtBW,EAAQD,EAAOF,EAAOI,OACtBzB,GAAMmB,GAASA,EAAQL,GAAUS,EAAOL,GAASA,EAAQM,IAC3D,WACE,GAAIE,GAAQL,EAAOzG,KAAK,QACxBpI,GAAE,UAAUmP,OAAO,WACjB,MAAOnP,GAAEQ,MAAM4H,KAAK,UAAY8G,IAC/B3J,SAAS,yBAOhB6J,IAAI,SAAShQ,EAAQU,EAAOJ,GAClC,YAEA,IAAIyF,GAAM/F,EAAQ,SAElBU,GAAOJ,QAAU,SAAUkB,EAAOpB,GAChC,GAAIa,KACJ8E,GAAIrE,aAAaF,EAAOP,EACxB,IAAIC,GAAQd,EAAK6P,MAAM,QACvBlK,GAAInE,SAASJ,EAAON,EAAMV,OAa1B,KAAK,GAZD0P,GAAW,MAEXrD,EAAQ,SAAe5M,GACzBiB,EAAMjB,GAAKiB,EAAMjB,GAAGmC,QAAQ,+BAAgC,MAAQ8N,EAAW,UAC/EhP,EAAMjB,GAAKiB,EAAMjB,GAAGmC,QAAQ,gCAAiC,SAAU0N,EAAOK,EAAKC,GAIjF,MAHAD,GAAME,SAASF,GACXA,GAAOD,IAAUC,GAAM,GAC3BlP,EAAUqP,MAAMF,EAASD,EAAKlQ,IACvBmQ,KAIFnQ,EAAI,EAAGA,EAAIiB,EAAMV,OAAQP,IAChC4M,EAAM5M,EAERG,GAAOc,EAAMqP,KAAK,MAClBxK,EAAI/D,UAAUR,GAAO8E,SAASlG,GAAM,MAGnCsG,SAAS,IAAI8J,IAAI,SAASxQ,EAAQU,EAAOJ,GAC5C,YAEA,IAAImQ,GAAiB,WAAc,QAASC,GAAcC,EAAK1Q,GAAK,GAAI2M,MAAegE,GAAK,EAAUC,GAAK,EAAWC,EAAK9M,MAAW,KAAM,IAAK,GAAiC+M,GAA7BhE,EAAK4D,EAAInL,OAAOC,cAAmBmL,GAAMG,EAAKhE,EAAG5I,QAAQuB,QAAoBkH,EAAK0D,KAAKS,EAAGzM,QAAYrE,GAAK2M,EAAKpM,SAAWP,GAA3D2Q,GAAK,IAAoE,MAAOjL,GAAOkL,GAAK,EAAMC,EAAKnL,EAAO,QAAU,KAAWiL,GAAM7D,EAAW,QAAGA,EAAW,SAAO,QAAU,GAAI8D,EAAI,KAAMC,IAAQ,MAAOlE,GAAQ,MAAO,UAAU+D,EAAK1Q,GAAK,GAAI+Q,MAAMC,QAAQN,GAAQ,MAAOA,EAAY,IAAInL,OAAOC,WAAYpC,QAAOsN,GAAQ,MAAOD,GAAcC,EAAK1Q,EAAa,MAAM,IAAI2C,WAAU,4DAEllBmD,EAAM/F,EAAQ,UAEdkI,EAAO,EACPjC,EAAK,CAETvF,GAAOJ,QAAU,WACf,GAAI4Q,GAAQtQ,EAAE,eACVuQ,GAAQpL,EAAI9D,aAAaiG,GAAOnC,EAAI9D,aAAagE,IAEjDmL,GAAM,EACNjM,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBrB,MAErB,KACE,IAAK,GAAyCsB,GAArCC,EAAY4L,EAAK3L,OAAOC,cAAsBN,GAA6BG,EAAQC,EAAUpB,QAAQuB,MAAOP,GAA4B,EAAM,CACrJ,GAAIlE,GAAYqE,EAAMhB,KAEtB,IAAiB,MAAbrD,EAAmB,MACvB,IAAIoQ,IAA6B,EAC7BC,GAAqB,EACrBC,EAAkBvN,MAEtB,KACE,IAAK,GAA+CwN,GAA3CC,EAAaxQ,EAAUuE,OAAOC,cAAuB4L,GAA8BG,EAASC,EAAWtN,QAAQuB,MAAO2L,GAA6B,EAAM,CAChK,GAAIK,GAAWF,EAAOlN,KAEtB8M,GAAM1F,KAAK0F,IAAIA,EAAKM,EAAS,KAE/B,MAAO/L,GACP2L,GAAqB,EACrBC,EAAkB5L,EAClB,QACA,KACO0L,GAA8BI,EAAW7L,QAC5C6L,EAAW7L,SAEb,QACA,GAAI0L,EACF,KAAMC,MAKd,MAAO5L,GACPP,GAAoB,EACpBC,EAAiBM,EACjB,QACA,KACOR,GAA6BI,EAAUK,QAC1CL,EAAUK,SAEZ,QACA,GAAIR,EACF,KAAMC,IAQZ,IAAK,GAHDsM,IAAW5L,EAAI/D,UAAUkG,GAAOnC,EAAI/D,UAAUiE,IAC9C2L,GAAkBhR,EAAE,uBAAwBA,EAAE,wBAC9CgM,GAAQ1E,EAAMjC,GACT8G,EAAK,EAAGA,EAAKH,EAAKpM,OAAQuM,IAAM,CAKvC,IAAK,GAJD8E,GAAMjF,EAAKG,GACX+E,KACA9Q,EAAS2Q,EAAQE,GACjB3Q,EAAQ6E,EAAI1D,SAASwP,GAChBE,EAAO,EAAGA,GAAQ7Q,EAAO6Q,IAChCD,EAAKxB,KAAK,SACVtP,EAAOiJ,SAAS+H,WAAWC,YAAYH,EAAMC,GAAM,GAAM,GACzDD,EAAKxB,KAAK,SAEZsB,GAAeC,GAAKC,KAAKA,EAAKvB,KAAK,KAIrC,IAAK,GADD2B,MACKjS,EAAI,EAAGA,GAAKmR,EAAKnR,IACxBiS,EAAY5B,aAAc,GAgB5B,KAAK,GAdD6B,IAASjK,EAAMjC,GAEfmM,EAAS,WACX,GAAInS,GAAIkS,EAAME,EACdT,GAAe3R,GAAGwJ,KAAK,UAAU+F,KAAK,WACpC,GAAIC,GAAS7O,EAAEQ,MACX0O,EAAQL,EAAOzG,KAAK,QACxBkJ,GAAYpC,GAAO7P,GAAGqQ,KAAKb,GAClB,GAALxP,GAAUiS,EAAYpC,GAAO,KAAM,IACrCoC,EAAYpC,GAAO,GAAKL,EAAOxL,SAASzC,YAKrC6Q,EAAM,EAAGA,EAAMF,EAAM3R,OAAQ6R,IACpCD,GAgBF,KAAK,GAbDvF,GAAQ,SAAeyF,GACzB,GAAIJ,EAAYI,GAAK,KAAM,EAAI,CAC7B,GAAIC,GAAapB,EAAK,EACtBoB,GAAWC,MAAM,SAAUd,GACzB,MAAIA,GAAS,IAAMY,IACjBJ,EAAYI,GAAK,GAAKZ,EAAS,IACxB,OAONY,EAAM,EAAGA,GAAOlB,EAAKkB,IAC5BzF,EAAMyF,EAERpB,GAAMuB,QACNvB,EAAMxI,OAAO,wBACbwI,EAAMxI,OAAO,sCACb,IAAIgK,IAAY,EACZC,GAA6B,EAC7BC,GAAqB,EACrBC,EAAkB7O,MAEtB,KAwDE,IAAK,GAAiD8O,GAvDlDC,EAAS,WACX,GAAIC,GAAaF,EAAOxO,MAEpB2O,EAAcxC,EAAeuC,EAAY,GACzCE,EAAcD,EAAY,GAC1BE,EAAYF,EAAY,GAExBG,EAAUF,EAAY1S,QAAU2S,EAAU3S,QAAU0S,EAAYV,MAAM,SAAUtO,EAAS1C,GAC3F,MAAO0C,GAAQmG,QAAU8I,EAAU3R,GAAO6I,QAE5C,IAAI+I,EAAS,MAAO,UACpB,IAAIrB,GAAOiB,EAAW,EAClBN,IAAaX,IACfW,EAAYX,EACZb,EAAMxI,OAAO,uCAAyCqJ,EAAO,GAAK,UAEpE,IAAIsB,GAAQzS,EAAE,2BACdsQ,GAAMxI,OAAO2K,EAEb,KAAK,GADDC,IAASJ,EAAaC,GACjBI,EAAM,EAAGA,EAAMD,EAAM9S,OAAQ+S,IAAO,CAC3C,GAAIC,GAASF,EAAMC,GACfE,EAAS7S,EAAE,8BACfyS,GAAM3K,OAAO+K,GACRD,EAAOhT,QACViT,EAAO/K,OAAO,8BAEhB,IAAIgL,IAA6B,EAC7BC,GAAqB,EACrBC,EAAkB5P,MAEtB,KACE,IAAK,GAA4C6P,GAAxCC,EAAaN,EAAOhO,OAAOC,cAAuBiO,GAA8BG,EAASC,EAAW3P,QAAQuB,MAAOgO,GAA6B,EAAM,CAC7J,GAAIK,GAAQF,EAAOvP,MAEf0P,EAASD,EAAME,OACnBD,GAAOhL,KAAK,QAAS+K,EAAM/K,KAAK,UAChCyK,EAAO/K,OAAOsL,IAEhB,MAAOrO,GACPgO,GAAqB,EACrBC,EAAkBjO,EAClB,QACA,KACO+N,GAA8BI,EAAWlO,QAC5CkO,EAAWlO,SAEb,QACA,GAAI+N,EACF,KAAMC,OAOPM,EAAahC,EAAY1M,OAAOC,cAAuBkN,GAA8BG,EAASoB,EAAW/P,QAAQuB,MAAOiN,GAA6B,EAAM,CACtJI,KAId,MAAOpN,GACPiN,GAAqB,EACrBC,EAAkBlN,EAClB,QACA,KACOgN,GAA8BuB,EAAWtO,QAC5CsO,EAAWtO,SAEb,QACA,GAAIgN,EACF,KAAMC,QAMXnM,SAAS,IAAIyN,IAAI,SAASnU,EAAQU,EAAOJ,GAC5C,YAEAI,GAAOJ,QAAU,SAAU8T,GACzB,GAAIC,GAAY,GAAIC,UAASC,UAEzBrD,EAAQtQ,EAAE,eACdsQ,GAAMY,KAAKuC,EAAUG,SAASJ,UAG1BK,IAAI,SAASzU,EAAQU,EAAOJ,GAClC,YAEA,IAAIoU,GAAO1U,EAAQ,QACf2U,EAAM3U,EAAQ,SACdgF,EAAShF,EAAQ,YACjBiI,EAAUjI,EAAQ,aAClB+F,EAAM/F,EAAQ,SACd4U,EAAM5U,EAAQ,qBAEd6U,EAAW7U,EAAQ,UACnBwE,EAAWqQ,EAASrQ,SAEpB7D,EAAKC,EACLC,EAASF,EAAGE,OAGZ2H,EAAaxD,EAAO8P,gBACpB5M,EAAO,EACPjC,EAAK,CAGTyO,GAAKxK,GAAG,QAAS,SAAU6K,GACzBC,QAAQC,QAAO,EAAOF,KAGxBlU,GAAO,EAAM4N,QACXyG,KAAMP,EAAI9N,UACVsO,MAAO,WACLtU,GAAO,EAAMkF,EAAK,GAAI6O,IACtB/T,GAAO,EAAM4N,QAAU1I,IAAKA,GAC5B,IAAIqP,GAAgBC,EAAgB,aAChCC,EAAcD,EAAgB,UAClC,IAAID,GAAiBE,EAAa,CAChC,GAAIC,GAAUtN,EAAQlH,SAASmI,IAAIhB,EAAMkN,IAAkBnN,EAAQlH,SAASmI,IAAIjD,EAAIqP,EAChFC,IAAStN,EAAQG,SAASc,IAAIV,EAAW,GAAGS,IAAI,QAEpDmM,GAAgBnN,EAAQlH,SAASoI,IAAIjB,GACrCoN,EAAcrN,EAAQlH,SAASoI,IAAIlD,EAErC,IAAIuP,GAAYhR,EAASiR,WAAWL,GAChCM,EAAUlR,EAASiR,WAAWH,EAClCvP,GAAIxE,YAAY2G,EAAMsN,GACtBzP,EAAIxE,YAAY0E,EAAIyP,GACpB3P,EAAItE,UAAUyG,EAAMyM,EAAI7N,WAAWoB,EAAMsN,IACzCzP,EAAItE,UAAUwE,EAAI0O,EAAI7N,WAAWb,EAAIyP,IACrCf,EAAI5N,eAAeyB,GACnBmM,EAAI3N,cACJ2N,EAAI1N,gBACJ0N,EAAIzN,YACJyN,EAAIpT,YAAY2G,EAAMsN,GACtBb,EAAIpT,YAAY0E,EAAIyP,KAIxB,IAAIL,GAAkB,SAAyBM,GAE7C,IAAK,GADDC,GAASC,mBAAmBpH,OAAOb,SAASkI,OAAOC,UAAU,IAAI9F,MAAM,KAClEhQ,EAAI,EAAGA,EAAI2V,EAAOpV,OAAQP,IAAK,CACtC,GAAI+V,GAAQJ,EAAO3V,GAAGgQ,MAAM,IAC5B,IAAI+F,EAAM,KAAOL,EACf,MAAoB3R,UAAbgS,EAAM,IAA0BA,EAAM,GAGjD,MAAO,SAGNC,QAAQ,EAAEC,oBAAoB,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,GAAGC,YAAY,GAAGC,KAAO,KAAKC,IAAI,SAASxW,EAAQU,EAAOJ,GAC7H,YAEA,IAAImW,GAAUzW,EAAQ,YAEtBU,GAAOJ,QAAU,SAAUoW,GACzB,MAAOD,GAAQC,GACbC,KAAM,WAIPC,YAAY,KAAKC,IAAI,SAAS7W,EAAQU,EAAOJ,GAChD,YAEA,IAAIoU,GAAO1U,EAAQ,QACfW,EAAKC,EACLkW,EAAOnW,EAAGmW,KACVjW,EAASF,EAAGE,OAGZkW,IAEJrW,GAAOJ,QAAU,SAAUoW,GACzB,GAAIM,GAAUjT,UAAUvD,OAAS,GAAsBwD,SAAjBD,UAAU,GAAmBA,UAAU,KAE7E,OAAO,IAAI2Q,GAAKuC,QAAQ,SAAUC,EAASC,GACzC,GAAIC,IACFC,QAAS,SAAiBC,GACxBJ,EAAQI,IAEVC,MAAO,SAAexC,GACpBoC,EAAOpC,KAGPyC,EAAO3W,KAAWkW,EAAUC,EAASI,GAAaV,IAAKA,GAC3DI,GAAKU,QAINjB,KAAO,KAAKkB,IAAI,SAASzX,EAAQU,EAAOJ,GAC3C,YAEA,IAAIuU,GAAW7U,EAAQ,WACnByE,EAAWoQ,EAASpQ,QAExB/D,GAAOJ,QAAU,WACf,MAAOkI,GAGT,IAAIA,IAAc,GAAI/D,GAAS,WAAY,WAAY,GAAIA,GAAS,uBAAwB,UAAW,GAAIA,GAAS,0BAA2B,WAAY,GAAIA,GAAS,YAAa,OAAQ,GAAIA,GAAS,aAAc,OAAQ,GAAIA,GAAS,eAAgB,QAAS,GAAIA,GAAS,gBAAiB,OAAQ,GAAIA,GAAS,UAAW,OAAQ,GAAIA,GAAS,kBAAmB,kBAAmB,GAAIA,GAAS,YAAa,WAAY,GAAIA,GAAS,YAAa,YAAa,GAAIA,GAAS,qBAAsB,QAAS,GAAIA,GAAS,cAAe,WAAY,GAAIA,GAAS,qBAAsB,aAAc,GAAIA,GAAS,eAAgB,eAAgB,GAAIA,GAAS,sBAAuB,WAAY,GAAIA,GAAS,0BAA2B,eAAgB,GAAIA,GAAS,mBAAoB,aAAc,GAAIA,GAAS,QAAS,QAAS,GAAIA,GAAS,gBAAiB,OAAQ,GAAIA,GAAS,kBAAmB,SAAU,GAAIA,GAAS,qBAAsB,YAAa,GAAIA,GAAS,kBAAmB,WAAY,GAAIA,GAAS,YAAa,QAAS,GAAIA,GAAS,aAAc,OAAQ,GAAIA,GAAS,aAAc,SAAU,GAAIA,GAAS,mBAAoB,YAAa,GAAIA,GAAS,UAAW,SAAU,GAAIA,GAAS,aAAc,OAAQ,GAAIA,GAAS,kBAAmB,WAAY,GAAIA,GAAS,kBAAmB,YAAa,GAAIA,GAAS,YAAa,OAAQ,GAAIA,GAAS,qBAAsB,WAAY,GAAIA,GAAS,qBAAsB,YAAa,GAAIA,GAAS,cAAe,aAAc,GAAIA,GAAS,WAAY,YAAa,GAAIA,GAAS,iBAAkB,QAAS,GAAIA,GAAS,mBAAoB,OAAQ,GAAIA,GAAS,4BAA6B,kBAAmB,GAAIA,GAAS,SAAU,YAE1oDiT,UAAU,IAAIC,IAAI,SAAS3X,EAAQU,EAAOJ,GAC7C,YAEA,IAAIuU,GAAW7U,EAAQ,WACnBwE,EAAWqQ,EAASrQ,QAExB9D,GAAOJ,QAAU,WACf,MAAO2E,GAGT,IAAIA,IAAa,GAAIT,GAAS,MAAO,QAAS,OAAQ,GAAIA,GAAS,SAAU,SAAU,MAAO,GAAIA,GAAS,OAAQ,OAAQ,SAAQ,IAAQ,GAAIA,GAAS,aAAc,aAAc,OAAM,IAAQ,GAAIA,GAAS,QAAS,KAAM,QAAO,OAElOkT,UAAU,IAAIE,IAAI,SAAS5X,EAAQU,EAAOJ,GAC7C,YAEA,IAAI+H,GAAWrI,EAAQ,eACnBuI,EAAWvI,EAAQ,eACnB8U,EAAgB9U,EAAQ,oBACxBkF,EAAelF,EAAQ,kBAE3BU,GAAOJ,SACL+H,SAAUA,EACVE,SAAUA,EACVuM,cAAeA,EACf5P,aAAcA,KAGb2S,mBAAmB,GAAGC,kBAAkB,GAAGC,cAAc,GAAGC,cAAc,KAAKC,IAAI,SAASjY,EAAQU,EAAOJ,GAC9G,YAEA,IAAI6I,GAAMnJ,EAAQ,aAElBU,GAAOJ,QAAU,SAAU8H,EAAUrH,GACnC,GAAImX,GAAOnX,EAAS+D,IAAM,SAAW/D,EAAS+D,GAC9C,GACEoT,GAAO9P,EAASvE,IAAM,IAAMqU,EAC5B9P,EAAWA,EAASnE,aACbmE,EACT,OAAOe,GAAI,UAAY+O,MAGtBC,aAAa,KAAKC,IAAI,SAASpY,EAAQU,EAAOJ,GACjD,YAEA,IAAI6I,GAAMnJ,EAAQ,aAElBU,GAAOJ,QAAU,SAAU8H,EAAUrH,GACnC,GAAImX,GAAOnX,EAAS+D,IAAM,UAC1B,GACEoT,GAAO9P,EAASvE,IAAM,IAAMqU,EAC5B9P,EAAWA,EAASnE,aACbmE,EACT,OAAOe,GAAI,UAAY+O,MAGtBC,aAAa,KAAKE,IAAI,SAASrY,EAAQU,EAAOJ,GACjD,YAEA,IAAIgY,GAA4B,kBAAX9S,SAAoD,gBAApBA,QAAOC,SAAwB,SAAU8S,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAX/S,SAAyB+S,EAAIC,cAAgBhT,QAAU+S,IAAQ/S,OAAO9B,UAAY,eAAkB6U,IAElQ1D,EAAW7U,EAAQ,aACnByY,EAAO5D,EAAS3L,IAChBwP,EAAO7D,EAAS1L,IAEhBnE,EAAShF,EAAQ,aAEjB2Y,EAAU,WACZ,MAAO,WAGTjY,GAAOJ,SACL4I,IAAK,SAAad,GAChB,GAAI8P,GAAO,EACX,GACEA,GAAO9P,EAASvE,IAAM,IAAMqU,EAC5B9P,EAAWA,EAASnE,aACbmE,EAET,OADA8P,GAAKU,OAAO,EAAGV,EAAK1X,OAAS,GACtBiY,EAAKE,IAAWT,IAEzB/O,IAAK,WACH,GAAIX,GAAaxD,EAAO8P,gBACpB+D,EAAOH,EAAKC,KAAW1I,MAAM,KAC7B9K,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBrB,MAErB,KAaE,IAAK,GAAyCsB,GAZ1CuH,EAAQ,WACV,GAAIhJ,GAAMyB,EAAMhB,MAEZ8D,EAAWxH,EAAEkY,KAAKtQ,EAAY,SAAUJ,GAC1C,MAAOA,GAASvE,KAAOA,IACtB,EAEH,IADA2E,EAAaJ,EAAStE,UACjB0E,EAAWhI,OAAQ,OACpBuY,EAAG3Q,IAIA7C,EAAYsT,EAAKrT,OAAOC,cAAsBN,GAA6BG,EAAQC,EAAUpB,QAAQuB,MAAOP,GAA4B,EAAM,CACrJ,GAAI6T,GAAOnM,GAEX,IAAoE,YAA/C,mBAATmM,GAAuB,YAAcV,EAAQU,IAAqB,MAAOA,GAAKD,GAE5F,MAAOpT,GACPP,GAAoB,EACpBC,EAAiBM,EACjB,QACA,KACOR,GAA6BI,EAAUK,QAC1CL,EAAUK,SAEZ,QACA,GAAIR,EACF,KAAMC,IAKZ,MAAO,UAIRQ,YAAY,GAAGoT,YAAY,KAAKC,IAAI,SAASlZ,EAAQU,EAAOJ,GAC/D,YAEA,IAAIS,GAAWf,EAAQ,cACnBoI,EAAWpI,EAAQ,aAEvBU,GAAOJ,SACLS,SAAUA,EACVqH,SAAUA,KAGT1D,aAAa,GAAGC,aAAa,KAAKwU,IAAI,SAASnZ,EAAQU,EAAOJ,GACjE,YAEA,IAAIuU,GAAW7U,EAAQ,aACnByY,EAAO5D,EAAS3L,IAChBwP,EAAO7D,EAAS1L,IAEhBwP,EAAU,SAAiBnX,GAC7B,MAAO,QAAUA,EAGnBd,GAAOJ,SACL4I,IAAK,SAAa1H,EAAOsD,GACvB,MAAO2T,GAAKE,EAAQnX,GAAQsD,IAE9BqE,IAAK,SAAa3H,GAChB,MAAOkX,GAAKC,EAAQnX,QAIrByX,YAAY,KAAKG,IAAI,SAASpZ,EAAQU,EAAOJ,GAChD,YAEAI,GAAOJ,SACL4I,IAAK,SAAatF,EAAMU,GACtB,MAAI+U,SAAQlQ,IAAIvF,IAASU,IACzB+U,QAAQnQ,IAAItF,EAAMU,IACX,IAET6E,IAAK,SAAavF,GAChB,MAAOyV,SAAQlQ,IAAIvF,IAErB0V,OAAQ,SAAgB1V,GAEtB,MADAyV,SAAQC,OAAO1V,IACR,SAIL2V,IAAI,SAASvZ,EAAQU,EAAOJ,GAClC,YAEAI,GAAOJ,SACLsK,IAAK,SAAaxK,GAChB,MAAOA,GAAKoZ,OAAOpX,QAAQ,eAAgB,IAAIA,QAAQ,WAAY,IAAIA,QAAQ,WAAY,IAAIA,QAAQ,WAAY,WAIjHqX,IAAI,SAASzZ,EAAQU,EAAOJ,GAYlC,QAASoZ,KACL,KAAM,IAAIvZ,OAAM,mCAEpB,QAASwZ,KACL,KAAM,IAAIxZ,OAAM,qCAsBpB,QAASyZ,GAAWC,GAChB,GAAIC,IAAqBC,WAErB,MAAOA,YAAWF,EAAK,EAG3B,KAAKC,IAAqBJ,IAAqBI,IAAqBC,WAEhE,MADAD,GAAmBC,WACZA,WAAWF,EAAK,EAE3B,KAEI,MAAOC,GAAiBD,EAAK,GAC/B,MAAMra,GACJ,IAEI,MAAOsa,GAAiBvZ,KAAK,KAAMsZ,EAAK,GAC1C,MAAMra,GAEJ,MAAOsa,GAAiBvZ,KAAKa,KAAMyY,EAAK,KAMpD,QAASG,GAAgBC,GACrB,GAAIC,IAAuBC,aAEvB,MAAOA,cAAaF,EAGxB,KAAKC,IAAuBP,IAAwBO,IAAuBC,aAEvE,MADAD,GAAqBC,aACdA,aAAaF,EAExB,KAEI,MAAOC,GAAmBD,GAC5B,MAAOza,GACL,IAEI,MAAO0a,GAAmB3Z,KAAK,KAAM0Z,GACvC,MAAOza,GAGL,MAAO0a,GAAmB3Z,KAAKa,KAAM6Y,KAYjD,QAASG,KACAC,GAAaC,IAGlBD,GAAW,EACPC,EAAa9Z,OACb+Z,EAAQD,EAAaE,OAAOD,GAE5BE,GAAa,EAEbF,EAAM/Z,QACNka,KAIR,QAASA,KACL,IAAIL,EAAJ,CAGA,GAAIM,GAAUf,EAAWQ,EACzBC,IAAW,CAGX,KADA,GAAIO,GAAML,EAAM/Z,OACVoa,GAAK,CAGP,IAFAN,EAAeC,EACfA,OACSE,EAAaG,GACdN,GACAA,EAAaG,GAAYI,KAGjCJ,IAAa,EACbG,EAAML,EAAM/Z,OAEhB8Z,EAAe,KACfD,GAAW,EACXL,EAAgBW,IAiBpB,QAASG,GAAKjB,EAAKkB,GACf3Z,KAAKyY,IAAMA,EACXzY,KAAK2Z,MAAQA,EAYjB,QAASC,MAhKT,GAOIlB,GACAI,EARAe,EAAUva,EAAOJ,YAgBpB,WACG,IAEQwZ,EADsB,kBAAfC,YACYA,WAEAL,EAEzB,MAAOla,GACLsa,EAAmBJ,EAEvB,IAEQQ,EADwB,kBAAjBC,cACcA,aAEAR,EAE3B,MAAOna,GACL0a,EAAqBP,KAuD7B,IAEIW,GAFAC,KACAF,GAAW,EAEXI,GAAa,CAyCjBQ,GAAQC,SAAW,SAAUrB,GACzB,GAAIsB,GAAO,GAAInK,OAAMjN,UAAUvD,OAAS,EACxC,IAAIuD,UAAUvD,OAAS,EACnB,IAAK,GAAIP,GAAI,EAAGA,EAAI8D,UAAUvD,OAAQP,IAClCkb,EAAKlb,EAAI,GAAK8D,UAAU9D,EAGhCsa,GAAMjK,KAAK,GAAIwK,GAAKjB,EAAKsB,IACJ,IAAjBZ,EAAM/Z,QAAiB6Z,GACvBT,EAAWc,IASnBI,EAAKpX,UAAUmX,IAAM,WACjBzZ,KAAKyY,IAAIuB,MAAM,KAAMha,KAAK2Z,QAE9BE,EAAQI,MAAQ,UAChBJ,EAAQK,SAAU,EAClBL,EAAQM,OACRN,EAAQO,QACRP,EAAQQ,QAAU,GAClBR,EAAQS,YAIRT,EAAQ/Q,GAAK8Q,EACbC,EAAQU,YAAcX,EACtBC,EAAQW,KAAOZ,EACfC,EAAQY,IAAMb,EACdC,EAAQa,eAAiBd,EACzBC,EAAQc,mBAAqBf,EAC7BC,EAAQe,KAAOhB,EAEfC,EAAQgB,QAAU,SAAUrY,GACxB,KAAM,IAAIzD,OAAM,qCAGpB8a,EAAQiB,IAAM,WAAc,MAAO,KACnCjB,EAAQkB,MAAQ,SAAUtY,GACtB,KAAM,IAAI1D,OAAM,mCAEpB8a,EAAQmB,MAAQ,WAAa,MAAO,SAE9BC,IAAI,SAASrc,EAAQU,EAAOJ,IAClC,SAAW2a,EAAQqB,IASlB,SAAUA,EAAQC,GACE,gBAAZjc,IAA0C,mBAAXI,GAAyB6b,EAAQjc,GACrD,kBAAXkc,SAAyBA,OAAOC,IAAMD,QAAQ,WAAYD,GAChEA,EAASD,EAAO5H,KAAO4H,EAAO5H,WAC/BtT,KAAM,SAAWd,GAAW,YAE9B,SAASoc,GAAQtF,EAAWuF,GAC1B,IAAK,GAAI1c,GAAI,EAAGI,EAAI+W,EAAU5W,OAAQP,EAAII,EAAGJ,IAC3C,GAAImX,EAAUnX,KAAO0c,EACnB,MAAO1c,EAIX,QAAO,EAGT,QAAS2c,GAAaC,GACpB,GAAIzF,GAAYyF,EAAOC,iBAMvB,OAJK1F,KACHA,EAAYyF,EAAOC,sBAGd1F,EAgLT,QAAS2F,GAAUnZ,EAAMU,GACvB,MAAa,YAATV,MAIFoZ,IAAW,GAAE,QAAS1Y,GAIC,IAArBP,UAAUvD,OAGLwc,GAAOpZ,QAFdoZ,GAAOpZ,GAAQU,GAMnB,QAAS2Y,GAAiBC,GACxB,MAAoB,kBAANA,IAAiC,gBAANA,IAAwB,OAANA,EAG7D,QAASC,GAAWD,GAClB,MAAoB,kBAANA,GAGhB,QAASE,GAAgBF,GACvB,MAAoB,gBAANA,IAAwB,OAANA,EAoBlC,QAASG,MAeT,QAASC,KACPvD,WAAW,WACT,IAAK,GAAI9Z,GAAI,EAAGA,EAAIsa,GAAM/Z,OAAQP,IAAK,CACrC,GAAIsd,GAAQhD,GAAMta,GAEdud,EAAUD,EAAMC,OAEpBA,GAAQC,KAAOD,EAAQja,IAAMia,EAAQE,GACrCF,EAAQG,UAAYH,EAAQja,IAAMia,EAAQI,QACtCJ,EAAQjG,QACViG,EAAQK,MAAQL,EAAQjG,MAAMsG,OAGhCb,GAAgB,QAAEO,EAAM3Z,KAAM2Z,EAAMC,SAEtCjD,GAAM/Z,OAAS,GACd,IAEL,QAASsd,GAAWC,EAAWC,EAAS3Z,GAClC,IAAMkW,GAAMjK,MACd1M,KAAMma,EACNP,SACEja,IAAKya,EAAQC,SACbP,GAAIM,EAAQE,IACZH,UAAWA,EACXI,OAAQH,EAAQI,QAChBR,QAASvZ,GAASA,EAAM6Z,IACxBG,MAAOL,EAAQM,OACfC,UAAWC,KACXjH,MAAOyF,GAAO,yBAA2B,GAAI7c,OAAM6d,EAAQM,QAAU,SAEvEhB,IAoCJ,QAASmB,GAAU5B,EAAQwB,GAEzB,GAAI1b,GAAcvB,IAElB,IAAIyb,GAA4B,gBAAXA,IAAuBA,EAAOrE,cAAgB7V,EACjE,MAAOka,EAGT,IAAImB,GAAU,GAAIrb,GAAYqY,EAAMqD,EAEpC,OADAnH,GAAQ8G,EAASnB,GACVmB,EAGT,QAASU,KACP,MAAO,IAAI9b,WAAU,wDAGvB,QAASoY,MAQT,QAAS2D,GAAQX,GACf,IACE,MAAOA,GAAQ1V,KACf,MAAOiP,GAEP,MADAqH,IAAerH,MAAQA,EAChBqH,IAIX,QAASC,GAAQvW,EAAMhE,EAAOwa,EAAoBC,GAChD,IACEzW,EAAK/H,KAAK+D,EAAOwa,EAAoBC,GACrC,MAAOvf,GACP,MAAOA,IAIX,QAASwf,GAAsBhB,EAASiB,EAAU3W,GAChD0U,GAAOkC,MAAM,SAAUlB,GACrB,GAAImB,IAAS,EACT5H,EAAQsH,EAAQvW,EAAM2W,EAAU,SAAU3a,GACxC6a,IAGJA,GAAS,EACLF,IAAa3a,EACf4S,EAAQ8G,EAAS1Z,EAAON,QAExBob,EAAQpB,EAAS1Z,KAElB,SAAUyQ,GACPoK,IAGJA,GAAS,EAEThI,EAAO6G,EAASjJ,KACf,YAAciJ,EAAQM,QAAU,sBAE9Ba,GAAU5H,IACb4H,GAAS,EACThI,EAAO6G,EAASzG,KAEjByG,GAGL,QAASqB,GAAkBrB,EAASiB,GAC9BA,EAASK,SAAWC,GACtBH,EAAQpB,EAASiB,EAASb,SACjBa,EAASK,SAAWE,IAC7BP,EAASQ,SAAW,KACpBtI,EAAO6G,EAASiB,EAASb,UAEzBsB,EAAUT,EAAUjb,OAAW,SAAUM,GACnC2a,IAAa3a,EACf4S,EAAQ8G,EAAS1Z,EAAON,QAExBob,EAAQpB,EAAS1Z,IAElB,SAAUyQ,GACX,MAAOoC,GAAO6G,EAASjJ,KAK7B,QAAS4K,GAAoB3B,EAAS4B,EAAeC,GAC/CD,EAAcpH,cAAgBwF,EAAQxF,aAAeqH,IAAWvX,GAAQ0V,EAAQxF,YAAYtB,UAAYuH,EAC1GY,EAAkBrB,EAAS4B,GAEvBC,IAAWjB,GACbzH,EAAO6G,EAASY,GAAerH,OACXvT,SAAX6b,EACTT,EAAQpB,EAAS4B,GACRzC,EAAW0C,GACpBb,EAAsBhB,EAAS4B,EAAeC,GAE9CT,EAAQpB,EAAS4B,GAKvB,QAAS1I,GAAQ8G,EAAS1Z,GACpB0Z,IAAY1Z,EACd8a,EAAQpB,EAAS1Z,GACR2Y,EAAiB3Y,GAC1Bqb,EAAoB3B,EAAS1Z,EAAOqa,EAAQra,IAE5C8a,EAAQpB,EAAS1Z,GAIrB,QAASwb,GAAiB9B,GACpBA,EAAQyB,UACVzB,EAAQyB,SAASzB,EAAQI,SAG3B2B,EAAQ/B,GAGV,QAASoB,GAAQpB,EAAS1Z,GACpB0Z,EAAQsB,SAAWU,KAIvBhC,EAAQI,QAAU9Z,EAClB0Z,EAAQsB,OAASC,GAEmB,IAAhCvB,EAAQiC,aAAazf,OACnBwc,GAAOc,YACTA,EAAW,YAAaE,GAG1BhB,GAAOkC,MAAMa,EAAS/B,IAI1B,QAAS7G,GAAO6G,EAASjJ,GACnBiJ,EAAQsB,SAAWU,KAGvBhC,EAAQsB,OAASE,GACjBxB,EAAQI,QAAUrJ,EAClBiI,GAAOkC,MAAMY,EAAkB9B,IAGjC,QAAS0B,GAAUzb,EAAQI,EAAO6b,EAAeC,GAC/C,GAAIC,GAAcnc,EAAOgc,aACrBzf,EAAS4f,EAAY5f,MAEzByD,GAAOwb,SAAW,KAElBW,EAAY5f,GAAU6D,EACtB+b,EAAY5f,EAAS+e,IAAaW,EAClCE,EAAY5f,EAASgf,IAAYW,EAElB,IAAX3f,GAAgByD,EAAOqb,QACzBtC,GAAOkC,MAAMa,EAAS9b,GAI1B,QAAS8b,GAAQ/B,GACf,GAAIoC,GAAcpC,EAAQiC,aACtBI,EAAUrC,EAAQsB,MAMtB,IAJItC,GAAOc,YACTA,EAAWuC,IAAYd,GAAY,YAAc,WAAYvB,GAGpC,IAAvBoC,EAAY5f,OAAhB,CAQA,IAAK,GAJD6D,GAAQL,OACR2Y,EAAW3Y,OACXma,EAASH,EAAQI,QAEZne,EAAI,EAAGA,EAAImgB,EAAY5f,OAAQP,GAAK,EAC3CoE,EAAQ+b,EAAYngB,GACpB0c,EAAWyD,EAAYngB,EAAIogB,GAEvBhc,EACFic,EAAeD,EAAShc,EAAOsY,EAAUwB,GAEzCxB,EAASwB,EAIbH,GAAQiC,aAAazf,OAAS,GAGhC,QAAS+f,KACPnf,KAAKmW,MAAQ,KAKf,QAASiJ,GAAS7D,EAAUwB,GAC1B,IACE,MAAOxB,GAASwB,GAChB,MAAO3e,GAEP,MADAihB,IAAgBlJ,MAAQ/X,EACjBihB,IAIX,QAASH,GAAeD,EAASrC,EAASrB,EAAUwB,GAClD,GAAIuC,GAAcvD,EAAWR,GACzBrY,EAAQN,OACRuT,EAAQvT,OACR2c,EAAY3c,OACZ4c,EAAS5c,MAEb,IAAI0c,GAWF,GAVApc,EAAQkc,EAAS7D,EAAUwB,GAEvB7Z,IAAUmc,IACZG,GAAS,EACTrJ,EAAQjT,EAAMiT,MACdjT,EAAQ,MAERqc,GAAY,EAGV3C,IAAY1Z,EAEd,WADA6S,GAAO6G,EAASU,SAIlBpa,GAAQ6Z,EACRwC,GAAY,CAGV3C,GAAQsB,SAAWU,KAEZU,GAAeC,EACtBzJ,EAAQ8G,EAAS1Z,GACRsc,EACTzJ,EAAO6G,EAASzG,GACP8I,IAAYd,GACrBH,EAAQpB,EAAS1Z,GACR+b,IAAYb,IACrBrI,EAAO6G,EAAS1Z,IAItB,QAASuc,GAAkB7C,EAAS8C,GAClC,GAAIC,IAAW,CACf,KACED,EAAS,SAAUxc,GACbyc,IAGJA,GAAW,EACX7J,EAAQ8G,EAAS1Z,KAChB,SAAUyQ,GACPgM,IAGJA,GAAW,EACX5J,EAAO6G,EAASjJ,MAElB,MAAOvV,GACP2X,EAAO6G,EAASxe,IAIpB,QAAS8I,GAAK4X,EAAeC,EAAa9B,GACxC,GAAI2C,GAAajd,UAEbE,EAAS7C,KACT6f,EAAQhd,EAAOqb,MAEnB,IAAI2B,IAAU1B,KAAcW,GAAiBe,IAAUzB,KAAaW,EAElE,MADAnD,IAAOc,YAAcA,EAAW,UAAW7Z,EAAQA,GAC5CA,CAGTA,GAAOwb,SAAW,IAElB,IAAIpb,GAAQ,GAAIJ,GAAOuU,YAAYwC,EAAMqD,GACrC6C,EAASjd,EAAOma,OAepB,OAbApB,IAAOc,YAAcA,EAAW,UAAW7Z,EAAQI,GAE/C4c,GACF,WACE,GAAItE,GAAWqE,EAAWC,EAAQ,EAClCjE,IAAOkC,MAAM,WACX,MAAOoB,GAAeW,EAAO5c,EAAOsY,EAAUuE,QAIlDxB,EAAUzb,EAAQI,EAAO6b,EAAeC,GAGnC9b,EAGT,QAAS8c,GAAkBF,EAAOG,EAAU9c,GAC1C,MAAI2c,KAAU1B,IAEV0B,MAAO,YACP3c,MAAOA,IAIP2c,MAAO,WACPlM,OAAQzQ,GAKd,QAAS+c,GAAW1e,EAAa2e,EAAOC,EAAelD,GACrDjd,KAAKogB,qBAAuB7e,EAC5BvB,KAAK4c,QAAU,GAAIrb,GAAYqY,EAAMqD,GACrCjd,KAAKqgB,eAAiBF,EAElBngB,KAAKsgB,eAAeJ,IACtBlgB,KAAKugB,OAASL,EACdlgB,KAAKZ,OAAS8gB,EAAM9gB,OACpBY,KAAKwgB,WAAaN,EAAM9gB,OAExBY,KAAKygB,QAEe,IAAhBzgB,KAAKZ,OACP4e,EAAQhe,KAAK4c,QAAS5c,KAAKgd,UAE3Bhd,KAAKZ,OAASY,KAAKZ,QAAU,EAC7BY,KAAK0gB,aACmB,IAApB1gB,KAAKwgB,YACPxC,EAAQhe,KAAK4c,QAAS5c,KAAKgd,WAI/BjH,EAAO/V,KAAK4c,QAAS5c,KAAK2gB,oBA6I9B,QAASC,GAAIC,EAAS5D,GACpB,MAAO,IAAIgD,GAAWjgB,KAAM6gB,IAAS,GAA2B5D,GAAOL,QAqEzE,QAASkE,GAAKD,EAAS5D,GAErB,GAAI1b,GAAcvB,KAEd4c,EAAU,GAAIrb,GAAYqY,EAAMqD,EAEpC,KAAKpN,GAAQgR,GAEX,MADA9K,GAAO6G,EAAS,GAAIpb,WAAU,oCACvBob,CAGT,KAAK,GAAI/d,GAAI,EAAG+d,EAAQsB,SAAWU,IAAW/f,EAAIgiB,EAAQzhB,OAAQP,IAChEyf,EAAU/c,EAAYuU,QAAQ+K,EAAQhiB,IAAK+D,OAAW,SAAUM,GAC9D,MAAO4S,GAAQ8G,EAAS1Z,IACvB,SAAUyQ,GACX,MAAOoC,GAAO6G,EAASjJ,IAI3B,OAAOiJ,GAsCT,QAASmE,GAASpN,EAAQsJ,GAExB,GAAI1b,GAAcvB,KACd4c,EAAU,GAAIrb,GAAYqY,EAAMqD,EAEpC,OADAlH,GAAO6G,EAASjJ,GACTiJ,EAMT,QAASoE,KACP,KAAM,IAAIxf,WAAU,sFAGtB,QAASyf,KACP,KAAM,IAAIzf,WAAU,yHA2GtB,QAASqU,GAAQ6J,EAAUzC,GACzBjd,KAAK8c,IAAMoE,KACXlhB,KAAKkd,OAASD,EACdjd,KAAKke,OAAStb,OACd5C,KAAKgd,QAAUpa,OACf5C,KAAK6e,gBAELjD,GAAOc,YAAcA,EAAW,UAAW1c,MAEvC4Z,IAAS8F,IACS,kBAAbA,IAA2BsB,IAClChhB,eAAgB6V,GAAU4J,EAAkBzf,KAAM0f,GAAYuB,KAoTlE,QAASE,KACPnhB,KAAKkD,MAAQN,OAMf,QAASwe,GAAUjK,GACjB,IACE,MAAOA,GAAIjQ,KACX,MAAOiP,GAEP,MADAkL,IAAMne,MAAQiT,EACPkL,IAIX,QAASC,GAASxiB,EAAGN,EAAGG,GACtB,IACEG,EAAEkb,MAAMxb,EAAGG,GACX,MAAOwX,GAEP,MADAkL,IAAMne,MAAQiT,EACPkL,IAIX,QAASE,GAAWC,EAAGC,GAKrB,IAAK,GAJDtK,MACA/X,EAASoiB,EAAEpiB,OACX2a,EAAO,GAAInK,OAAMxQ,GAEZ0c,EAAI,EAAGA,EAAI1c,EAAQ0c,IAC1B/B,EAAK+B,GAAK0F,EAAE1F,EAGd,KAAK,GAAIjd,GAAI,EAAGA,EAAI4iB,EAAcriB,OAAQP,IAAK,CAC7C,GAAI6iB,GAAQD,EAAc5iB,EAC1BsY,GAAIuK,GAAS3H,EAAKlb,EAAI,GAGxB,MAAOsY,GAGT,QAASwK,GAAYH,GAInB,IAAK,GAHDpiB,GAASoiB,EAAEpiB,OACX2a,EAAO,GAAInK,OAAMxQ,EAAS,GAErBP,EAAI,EAAGA,EAAIO,EAAQP,IAC1Bkb,EAAKlb,EAAI,GAAK2iB,EAAE3iB,EAGlB,OAAOkb,GAGT,QAAS6H,GAAaC,EAAOjF,GAC3B,OACE1V,KAAM,SAAc4a,EAAe/C,GACjC,MAAO8C,GAAM1iB,KAAKyd,EAASkF,EAAe/C,KAqIhD,QAASgD,GAAUC,EAAUpM,GAC3B,GAAIqM,GAAK,WAMP,IAAK,GALDC,GAAOliB,KACPf,EAAI0D,UAAUvD,OACd2a,EAAO,GAAInK,OAAM3Q,EAAI,GACrBkjB,GAAe,EAEVtjB,EAAI,EAAGA,EAAII,IAAKJ,EAAG,CAC1B,GAAIujB,GAAMzf,UAAU9D,EAEpB,KAAKsjB,EAAc,CAGjB,GADAA,EAAeE,EAAkBD,GAC7BD,IAAiBG,GAAkB,CACrC,GAAIC,GAAI,GAAI1M,GAAQ+D,EAEpB,OADA7D,GAAOwM,EAAGD,GAAiBpf,OACpBqf,EACEJ,GAAgBA,KAAiB,IAC1CC,EAAMR,EAAaO,EAAcC,IAGrCrI,EAAKlb,GAAKujB,EAGZ,GAAIxF,GAAU,GAAI/G,GAAQ+D,EAM1B,OAJAG,GAAK9a,GAAK,SAAUsF,EAAK6H,GACnB7H,EAAKwR,EAAO6G,EAASrY,GAA0B3B,SAAZgT,EAAuBE,EAAQ8G,EAASxQ,GAAcwJ,KAAY,EAAME,EAAQ8G,EAAS+E,EAAYhf,YAAqBkN,GAAQ+F,GAAUE,EAAQ8G,EAAS2E,EAAW5e,UAAWiT,IAAeE,EAAQ8G,EAASxQ,IAGxP+V,EACKK,EAAmB5F,EAAS7C,EAAMiI,EAAUE,GAE5CO,EAAiB7F,EAAS7C,EAAMiI,EAAUE,GAMrD,OAFAD,GAAGS,UAAYV,EAERC,EAGT,QAASQ,GAAiB7F,EAAS7C,EAAMiI,EAAUE,GACjD,GAAIpC,GAASwB,EAASU,EAAUE,EAAMnI,EAItC,OAHI+F,KAAWuB,IACbtL,EAAO6G,EAASkD,EAAO5c,OAElB0Z,EAGT,QAAS4F,GAAmB5F,EAAS7C,EAAMiI,EAAUE,GACnD,MAAOrM,GAAQ+K,IAAI7G,GAAM7S,KAAK,SAAU6S,GACtC,GAAI+F,GAASwB,EAASU,EAAUE,EAAMnI,EAItC,OAHI+F,KAAWuB,IACbtL,EAAO6G,EAASkD,EAAO5c,OAElB0Z,IAIX,QAASyF,GAAkBD,GACzB,SAAIA,GAAsB,gBAARA,MACZA,EAAIhL,cAAgBvB,GAGfuL,EAAUgB,IAiBvB,QAASO,GAAMhJ,EAAOsD,GACpB,MAAOpH,GAAQ+K,IAAIjH,EAAOsD,GAG5B,QAAS2F,GAAWrhB,EAAasf,EAAS5D,GACxCjd,KAAK6iB,kBAAkBthB,EAAasf,GAAS,EAAkC5D,GA6DjF,QAAS6F,GAAWjC,EAAS5D,GAC3B,MAAO,IAAI2F,GAAW/M,EAASgL,EAAS5D,GAAOL,QAajD,QAASmG,GAAOpJ,EAAOsD,GACrB,MAAOpH,GAAQiL,KAAKnH,EAAOsD,GAG7B,QAAS+F,IAAYzhB,EAAaka,EAAQwB,GACxCjd,KAAK6iB,kBAAkBthB,EAAaka,GAAQ,EAAMwB,GAkIpD,QAAStQ,IAAK8O,EAAQwB,GACpB,MAAO,IAAI+F,IAAYnN,EAAS4F,EAAQwB,GAAOL,QAGjD,QAASqG,IAAY1hB,EAAaka,EAAQwB,GACxCjd,KAAK6iB,kBAAkBthB,EAAaka,GAAQ,EAAOwB,GAgHrD,QAASiG,IAAYzH,EAAQwB,GAC3B,MAAO,IAAIgG,IAAYpN,EAAS4F,EAAQwB,GAAOL,QAGjD,QAASuG,IAAQxP,GAIf,KAHAgF,YAAW,WACT,KAAMhF,KAEFA,EAmCR,QAASyP,IAAMnG,GACb,GAAIoG,IAAavN,QAASlT,OAAWmT,OAAQnT,OAO7C,OALAygB,GAASzG,QAAU,GAAI/G,GAAQ,SAAUC,EAASC,GAChDsN,EAASvN,QAAUA,EACnBuN,EAAStN,OAASA,GACjBkH,GAEIoG,EAiFT,QAASC,IAAIC,EAAUC,EAAOvG,GAC5B,MAAOpH,GAAQ+K,IAAI2C,EAAUtG,GAAO/V,KAAK,SAAUuc,GACjD,IAAK1H,EAAWyH,GACd,KAAM,IAAIhiB,WAAU,qDAMtB,KAAK,GAHDpC,GAASqkB,EAAOrkB,OAChBskB,EAAU,GAAI9T,OAAMxQ,GAEfP,EAAI,EAAGA,EAAIO,EAAQP,IAC1B6kB,EAAQ7kB,GAAK2kB,EAAMC,EAAO5kB,GAG5B,OAAOgX,GAAQ+K,IAAI8C,EAASzG,KAgBhC,QAAS0G,IAAUzgB,EAAO+Z,GACxB,MAAOpH,GAAQC,QAAQ5S,EAAO+Z,GAchC,QAAS2G,IAASjQ,EAAQsJ,GACxB,MAAOpH,GAAQE,OAAOpC,EAAQsJ,GAyFhC,QAAS4G,IAAWN,EAAUtG,GAC5B,MAAOpH,GAAQ+K,IAAI2C,EAAUtG,GAG/B,QAAS6G,IAAclH,EAASK,GAC9B,MAAOpH,GAAQC,QAAQ8G,EAASK,GAAO/V,KAAK,SAAUqc,GACpD,MAAOM,IAAWN,EAAUtG,KAGhC,QAAStO,IAAO4U,EAAUQ,EAAU9G,GAClC,GAAIL,GAAU/M,GAAQ0T,GAAYM,GAAWN,EAAUtG,GAAS6G,GAAcP,EAAUtG,EACxF,OAAOL,GAAQ1V,KAAK,SAAUuc,GAC5B,IAAK1H,EAAWgI,GACd,KAAM,IAAIviB,WAAU,wDAMtB,KAAK,GAHDpC,GAASqkB,EAAOrkB,OAChB4kB,EAAW,GAAIpU,OAAMxQ,GAEhBP,EAAI,EAAGA,EAAIO,EAAQP,IAC1BmlB,EAASnlB,GAAKklB,EAASN,EAAO5kB,GAGhC,OAAOglB,IAAWG,EAAU/G,GAAO/V,KAAK,SAAU8c,GAIhD,IAAK,GAHDN,GAAU,GAAI9T,OAAMxQ,GACpB6kB,EAAY,EAEPplB,EAAI,EAAGA,EAAIO,EAAQP,IACtBmlB,EAASnlB,KACX6kB,EAAQO,GAAaR,EAAO5kB,GAC5BolB,IAMJ,OAFAP,GAAQtkB,OAAS6kB,EAEVP,MAOb,QAASQ,IAAK3I,EAAU6G,GACtB+B,GAAQ3K,IAAO+B,EACf4I,GAAQ3K,GAAM,GAAK4I,EACnB5I,IAAO,EACK,IAARA,IAIF4K,KAaJ,QAASC,MACP,GAAIvK,GAAWD,EAAQC,SAGnBO,EAAUR,EAAQS,SAASgK,KAAK5V,MAAM,qCAI1C,OAHIkB,OAAMC,QAAQwK,IAA2B,MAAfA,EAAQ,IAA6B,OAAfA,EAAQ,KAC1DP,EAAWyK,cAEN,WACL,MAAOzK,GAAS0K,KAKpB,QAASC,MACP,MAAyB,mBAAdC,IACF,WACLA,GAAUF,KAGPG,KAGT,QAASC,MACP,GAAIC,GAAa,EACbC,EAAW,GAAIC,IAAwBP,IACvCF,EAAOlX,SAAS4X,eAAe,GAGnC,OAFAF,GAASG,QAAQX,GAAQY,eAAe,IAEjC,WACL,MAAOZ,GAAK1c,KAAOid,IAAeA,EAAa,GAKnD,QAASM,MACP,GAAIC,GAAU,GAAIC,eAElB,OADAD,GAAQE,MAAMC,UAAYf,GACnB,WACL,MAAOY,GAAQI,MAAMC,YAAY,IAIrC,QAASd,MACP,MAAO,YACL,MAAOhM,YAAW6L,GAAO,IAM7B,QAASA,MACP,IAAK,GAAI3lB,GAAI,EAAGA,EAAI2a,GAAK3a,GAAK,EAAG,CAC/B,GAAI0c,GAAW4I,GAAQtlB,GACnBujB,EAAM+B,GAAQtlB,EAAI,EAEtB0c,GAAS6G,GAET+B,GAAQtlB,GAAK+D,OACbuhB,GAAQtlB,EAAI,GAAK+D,OAGnB4W,GAAM,EAGR,QAASkM,MACP,IACE,GAAInnB,GAAIK,EACJ+mB,EAAQpnB,EAAE,QAEd,OADAmmB,IAAYiB,EAAMC,WAAaD,EAAME,aAC9BpB,KACP,MAAOrmB,GACP,MAAOumB,OAiCX,QAASmB,IAAgB3O,EAAKhV,EAAKe,GAAiK,MAApJf,KAAOgV,GAAOlV,OAAOC,eAAeiV,EAAKhV,GAAOe,MAAOA,EAAOpB,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBmV,EAAIhV,GAAOe,EAAgBiU,EAgB3M,QAASrO,MACP8S,GAAW,GAAE5B,MAAM4B,GAAQjZ,WAG7B,QAAS8X,MACPmB,GAAY,IAAE5B,MAAM4B,GAAQjZ,WAr2E9B,GAAIojB,KAiCFC,MAAO,SAAevK,GAKpB,MAJAA,GAAW,GAAIzb,KAAS,GACxByb,EAAY,IAAIzb,KAAU,IAC1Byb,EAAgB,QAAIzb,KAAc,QAClCyb,EAAOC,kBAAoB9Y,OACpB6Y,GAiBT3S,GAAI,SAAY6T,EAAWpB,GACzB,GAAwB,kBAAbA,GACT,KAAM,IAAI/Z,WAAU,8BAGtB,IAAIykB,GAAezK,EAAaxb,MAC5BgW,EAAYpT,MAEhBoT,GAAYiQ,EAAatJ,GAEpB3G,IACHA,EAAYiQ,EAAatJ,OAGvBrB,EAAQtF,EAAWuF,MAAc,GACnCvF,EAAU9G,KAAKqM,IAkCnBd,IAAK,SAAakC,EAAWpB,GAC3B,GAAI0K,GAAezK,EAAaxb,MAC5BgW,EAAYpT,OACZxC,EAAQwC,MAEZ,OAAK2Y,IAKLvF,EAAYiQ,EAAatJ,GAEzBvc,EAAQkb,EAAQtF,EAAWuF,QAEvBnb,KAAU,GACZ4V,EAAUkQ,OAAO9lB,EAAO,UATxB6lB,EAAatJ,QAsCjBwJ,QAAS,SAAiBxJ,EAAW/G,EAASqH,GAC5C,GAAIgJ,GAAezK,EAAaxb,MAC5BgW,EAAYpT,OACZ2Y,EAAW3Y,MAEf,IAAIoT,EAAYiQ,EAAatJ,GAE3B,IAAK,GAAI9d,GAAI,EAAGA,EAAImX,EAAU5W,OAAQP,KACpC0c,EAAWvF,EAAUnX,IAEZ+W,EAASqH,KAMtBrB,IACFc,YAAY,EAGdqJ,IAAmB,MAAEnK,GA8BrB,IAAIwK,IAAWxjB,MAMbwjB,IALGxW,MAAMC,QAKED,MAAMC,QAJN,SAAUiM,GACnB,MAA6C,mBAAtC7Z,OAAOK,UAAU+jB,SAASlnB,KAAK2c,GAM1C,IAAIjM,IAAUuW,GAIVhJ,GAAMkJ,KAAKlJ,KAAO,WACpB,OAAO,GAAIkJ,OAAOC,WAKhBC,GAAWvkB,OAAOwkB,QAAU,SAAUhoB,GACxC,GAAIkE,UAAUvD,OAAS,EACrB,KAAM,IAAIL,OAAM,gCAElB,IAAiB,gBAANN,GACT,KAAM,IAAI+C,WAAU,6BAGtB,OADAya,GAAE3Z,UAAY7D,EACP,GAAIwd,IAGT9C,MAwFAyF,GAAU,OACVT,GAAY,EACZC,GAAW,EAEXZ,GAAiB,GAAI2B,GAgLrBE,GAAkB,GAAIF,EAgJ1Bc,GAAW3d,UAAUge,eAAiB,SAAUJ,GAC9C,MAAOrQ,IAAQqQ,IAGjBD,EAAW3d,UAAUqe,iBAAmB,WACtC,MAAO,IAAI5hB,OAAM,4CAGnBkhB,EAAW3d,UAAUme,MAAQ,WAC3BzgB,KAAKgd,QAAU,GAAIpN,OAAM5P,KAAKZ,SAGhC6gB,EAAW3d,UAAUoe,WAAa,WAKhC,IAAK,GAJDthB,GAASY,KAAKZ,OACdwd,EAAU5c,KAAK4c,QACfsD,EAAQlgB,KAAKugB,OAER1hB,EAAI,EAAG+d,EAAQsB,SAAWU,IAAW/f,EAAIO,EAAQP,IACxDmB,KAAK0mB,WAAWxG,EAAMrhB,GAAIA,IAI9BohB,EAAW3d,UAAUqkB,qBAAuB,SAAUxK,EAAOtd,GAC3D,GAAI+nB,GAAI5mB,KAAKogB,qBACTtK,EAAU8Q,EAAE9Q,OAEhB,IAAIA,IAAYuH,EAAW,CACzB,GAAIoB,GAASlB,EAAQpB,EAErB,IAAIsC,IAAWvX,GAAQiV,EAAM+B,SAAWU,GACtCzC,EAAMkC,SAAW,KACjBre,KAAK6mB,WAAW1K,EAAM+B,OAAQrf,EAAGsd,EAAMa,aAClC,IAAsB,kBAAXyB,GAChBze,KAAKwgB,aACLxgB,KAAKgd,QAAQne,GAAKmB,KAAK8mB,YAAY3I,GAAWtf,EAAGsd,OAC5C,IAAIyK,IAAM/Q,EAAS,CACxB,GAAI+G,GAAU,GAAIgK,GAAEhN,EACpB2E,GAAoB3B,EAAST,EAAOsC,GACpCze,KAAK+mB,cAAcnK,EAAS/d,OAE5BmB,MAAK+mB,cAAc,GAAIH,GAAE,SAAU9Q,GACjC,MAAOA,GAAQqG,KACbtd,OAGNmB,MAAK+mB,cAAcjR,EAAQqG,GAAQtd,IAIvCohB,EAAW3d,UAAUokB,WAAa,SAAUvK,EAAOtd,GAC7Cmd,EAAgBG,GAClBnc,KAAK2mB,qBAAqBxK,EAAOtd,IAEjCmB,KAAKwgB,aACLxgB,KAAKgd,QAAQne,GAAKmB,KAAK8mB,YAAY3I,GAAWtf,EAAGsd,KAIrD8D,EAAW3d,UAAUukB,WAAa,SAAUhH,EAAOhhB,EAAGqE,GACpD,GAAI0Z,GAAU5c,KAAK4c,OAEfA,GAAQsB,SAAWU,KACrB5e,KAAKwgB,aAEDxgB,KAAKqgB,gBAAkBR,IAAUzB,GACnCrI,EAAO6G,EAAS1Z,GAEhBlD,KAAKgd,QAAQne,GAAKmB,KAAK8mB,YAAYjH,EAAOhhB,EAAGqE,IAIzB,IAApBlD,KAAKwgB,YACPxC,EAAQpB,EAAS5c,KAAKgd,UAI1BiD,EAAW3d,UAAUwkB,YAAc,SAAUjH,EAAOhhB,EAAGqE,GACrD,MAAOA,IAGT+c,EAAW3d,UAAUykB,cAAgB,SAAUnK,EAAS/d,GACtD,GAAImoB,GAAahnB,IAEjBse,GAAU1B,EAASha,OAAW,SAAUM,GACtC,MAAO8jB,GAAWH,WAAW1I,GAAWtf,EAAGqE,IAC1C,SAAUyQ,GACX,MAAOqT,GAAWH,WAAWzI,GAAUvf,EAAG8U,KA0L9C,IAAIsT,IAAU,QAAU7J,KAAQ,IAC5B8D,GAAU,CAiIdrL,GAAQqR,KAAO7J,EACfxH,EAAQ+K,IAAMA,EACd/K,EAAQiL,KAAOA,EACfjL,EAAQC,QAAUuH,EAClBxH,EAAQE,OAASgL,EAEjBlL,EAAQvT,WACN8U,YAAavB,EAEbgH,SAAUoK,GAEV5I,SAAU,SAAkB1K,GAC1B,GAAIiJ,GAAU5c,IACd4b,IAAOuL,MAAM,WACPvK,EAAQyB,UACVzC,GAAgB,QAAE,QAASjI,EAAQiJ,EAAQM,WAuMjDhW,KAAMA,EA8BNkgB,MAAS,SAAgBrI,EAAa9B,GACpC,MAAOjd,MAAKkH,KAAKtE,OAAWmc,EAAa9B,IA2C3CoK,QAAW,SAAkB9L,EAAU0B,GACrC,GAAIL,GAAU5c,KACVoX,EAAcwF,EAAQxF,WAE1B,OAAOwF,GAAQ1V,KAAK,SAAUhE,GAC5B,MAAOkU,GAAYtB,QAAQyF,KAAYrU,KAAK,WAC1C,MAAOhE,MAER,SAAUyQ,GACX,MAAOyD,GAAYtB,QAAQyF,KAAYrU,KAAK,WAC1C,KAAMyM,MAEPsJ,IAQP,IAAIoE,IAAQ,GAAIF,GACZmB,GAAmB,GAAInB,EAkR3ByB,GAAWtgB,UAAYkkB,GAASvG,EAAW3d,WAC3CsgB,EAAWtgB,UAAUugB,kBAAoB5C,EACzC2C,EAAWtgB,UAAUwkB,YAAc/G,EACnC6C,EAAWtgB,UAAUqe,iBAAmB,WACtC,MAAO,IAAI5hB,OAAM,4CA4EnBikB,GAAY1gB,UAAYkkB,GAASvG,EAAW3d,WAC5C0gB,GAAY1gB,UAAUugB,kBAAoB5C,EAC1C+C,GAAY1gB,UAAUme,MAAQ,WAC5BzgB,KAAKgd,YAGPgG,GAAY1gB,UAAUge,eAAiB,SAAUJ,GAC/C,MAAOA,IAA0B,gBAAVA,IAGzB8C,GAAY1gB,UAAUqe,iBAAmB,WACvC,MAAO,IAAI5hB,OAAM,+CAGnBikB,GAAY1gB,UAAUoe,WAAa,WACjC,GAAIsG,GAAahnB,KACb4c,EAAUoK,EAAWpK,QACrBsD,EAAQ8G,EAAWzG,OACnBmD,IAEJ,KAAK,GAAIvhB,KAAO+d,GACVtD,EAAQsB,SAAWU,IAAW3c,OAAOK,UAAUglB,eAAenoB,KAAK+gB,EAAO/d,IAC5EuhB,EAAQxU,MACN8Q,SAAU7d,EACVga,MAAO+D,EAAM/d,IAKnB,IAAI/C,GAASskB,EAAQtkB,MACrB4nB,GAAWxG,WAAaphB,CAGxB,KAAK,GAFD0gB,GAASld,OAEJ/D,EAAI,EAAG+d,EAAQsB,SAAWU,IAAW/f,EAAIO,EAAQP,IACxDihB,EAAS4D,EAAQ7kB,GACjBmoB,EAAWN,WAAW5G,EAAO3D,MAAO2D,EAAOE,WAoG/CiD,GAAY3gB,UAAYkkB,GAASxD,GAAY1gB,WAC7C2gB,GAAY3gB,UAAUugB,kBAAoB5C,EAC1CgD,GAAY3gB,UAAUwkB,YAAc/G,EAEpCkD,GAAY3gB,UAAUqe,iBAAmB,WACvC,MAAO,IAAI5hB,OAAM,6CA2ZnB,IAAIya,IAAM,EACNkL,GAAY9hB,OAaZ2kB,GAAkC,mBAAXla,QAAyBA,OAASzK,OACzD4kB,GAAgBD,OAChBxC,GAA0ByC,GAAcC,kBAAoBD,GAAcE,uBAC1EC,GAAyB,mBAATzF,OAA2C,mBAAZrI,IAA2D,wBAA3BwM,SAASlnB,KAAK0a,GAG7F+N,GAAwC,mBAAtBC,oBAA8D,mBAAlBC,gBAA2D,mBAAnBzC,gBAoDtGlB,GAAU,GAAIvU,OAAM,KA2BpBwU,GAAkBxhB;AAGpBwhB,GADEuD,GACgBtD,KACTU,GACSH,KACTgD,GACSzC,KACSviB,SAAlB2kB,IAAkD,kBAAZ3oB,GAC7B8mB,KAEAf,IAGpB,IAAIoD,IAAWnlB,MAGf,IAAoB,gBAATsf,MACT6F,GAAW7F,SAGN,CAAA,GAAsB,gBAAXhH,GAGd,KAAM,IAAInc,OAAM,sCAFhBgpB,IAAW7M,EAKf,GAAI8M,GAQJpM,IAAOkC,MAAQoG,GACftI,GAAOuL,MAAQ,SAAUc,GACvB,MAAOtP,YAAWsP,EAAI,GAExB,IAAIf,IAAOvD,GAEP7F,GAAQ,SAAevC,EAAU6G,GACnC,MAAOxG,IAAOkC,MAAMvC,EAAU6G,GAYhC,IAAsB,mBAAX/U,SAA2E,gBAA1CA,QAAoC,4BAAgB,CAC9F,GAAI2I,IAAY3I,OAAoC,2BACpDsO,GAAU,cAAc,EACxB,KAAK,GAAIgB,MAAa3G,IAChBA,GAAUsR,eAAe3K,KAC3B7T,GAAG6T,GAAW3G,GAAU2G,KAG7B,GAAIxH,KAAQ6S,IACXd,KAAMA,GACNrR,QAASA,EACTkQ,YAAaA,GACbnF,IAAK+B,EACLG,WAAYA,EACZhC,KAAMiC,EACNpW,KAAMA,GACNuW,YAAaA,GACbC,QAASA,GACTC,MAAOA,GACPrB,UAAWA,EACXpG,UAAWA,EACX7S,GAAIA,GACJ2R,IAAKA,GACL3E,QAAS6N,GACT5N,OAAQ6N,GACRN,IAAKA,IACJwC,GAAgBkC,GAAe,QAASlK,IAAQgI,GAAgBkC,GAAe,SAClFrZ,IAASqZ,GAET9oB,GAAiB,QAAIiW,GACrBjW,EAAQgoB,KAAOA,GACfhoB,EAAQ2W,QAAUA,EAClB3W,EAAQ6mB,YAAcA,GACtB7mB,EAAQ0hB,IAAM+B,EACdzjB,EAAQ4jB,WAAaA,EACrB5jB,EAAQ4hB,KAAOiC,EACf7jB,EAAQyN,KAAOA,GACfzN,EAAQgkB,YAAcA,GACtBhkB,EAAQikB,QAAUA,GAClBjkB,EAAQkkB,MAAQA,GAChBlkB,EAAQ6iB,UAAYA,EACpB7iB,EAAQyc,UAAYA,EACpBzc,EAAQ4J,GAAKA,GACb5J,EAAQub,IAAMA,GACdvb,EAAQ4W,QAAU6N,GAClBzkB,EAAQ6W,OAAS6N,GACjB1kB,EAAQokB,IAAMA,GACdpkB,EAAQ4e,MAAQA,GAChB5e,EAAQyP,OAASA,GAEjB1M,OAAOC,eAAehD,EAAS,cAAgBgE,OAAO,QAInD/D,KAAKa,KAAKpB,EAAQ,YAA8B,mBAAXsc,QAAyBA,OAAyB,mBAATgH,MAAuBA,KAAyB,mBAAX7U,QAAyBA,aAE5I6a,SAAW,UAAU","file":"duocoder.js","sourcesContent":["/**\n * DuoCoder - Duolingo for Coders\n * @version v0.0.1\n * @author Jason Park\n * @link https://github.com/parkjs814/DuoCoder\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar panelVars = {\n  language: null,\n  editor: null,\n  matchings: null,\n  code: '',\n  lines: -1\n};\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.panel = [extend(true, {}, panelVars), extend(true, {}, panelVars)];\n  this.exam_mode = false;\n\n  this.setLanguage = function (index, language) {\n    _this.panel[index].language = language;\n  };\n\n  this.setEditor = function (index, editor) {\n    _this.panel[index].editor = editor;\n  };\n\n  this.setMatchings = function (index, matchings) {\n    _this.panel[index].matchings = matchings;\n  };\n\n  this.setCode = function (index, code) {\n    _this.panel[index].code = code;\n  };\n\n  this.setLines = function (index, lines) {\n    _this.panel[index].lines = lines;\n  };\n\n  this.enterExamMode = function () {\n    _this.exam_mode = true;\n  };\n\n  this.exitExamMode = function () {\n    _this.exam_mode = false;\n  };\n\n  this.getLanguage = function (index) {\n    return _this.panel[index].language;\n  };\n\n  this.getEditor = function (index) {\n    return _this.panel[index].editor;\n  };\n\n  this.getMatchings = function (index) {\n    return _this.panel[index].matchings;\n  };\n\n  this.getCode = function (index, readable) {\n    var code = _this.panel[index].code;\n    if (readable) return code.replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, '$2');else return code;\n  };\n\n  this.getLines = function (index) {\n    return _this.panel[index].lines;\n  };\n\n  this.isExamMode = function () {\n    return _this.exam_mode;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, dir) {\n    var _this = this;\n\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, _class);\n\n    this.parent = null;\n    this.name = name;\n    this.dir = dir;\n    this.children = children;\n    this.element = null;\n    this.next = null;\n    children.forEach(function (child) {\n      child.parent = _this;\n    });\n  }\n\n  _createClass(_class, [{\n    key: \"sub\",\n    value: function sub(index) {\n      return this.children[index];\n    }\n  }]);\n\n  return _class;\n}();\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar Language = require('./language');\nvar Category = require('./category');\n\nmodule.exports = {\n  Language: Language,\n  Category: Category\n};\n\n},{\"./category\":3,\"./language\":5}],5:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, ace, ext) {\n    var complete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, _class);\n\n    this.name = name;\n    this.ace = ace;\n    this.ext = ext;\n    this.complete = complete;\n  }\n\n  _createClass(_class, null, [{\n    key: 'getWithExt',\n    value: function getWithExt(ext) {\n      var Server = require('../server');\n      var languages = Server.getLanguages();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var language = _step.value;\n\n          if (language.ext == ext) return language;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return _class;\n}();\n\n},{\"../server\":26}],6:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar viewCode = require('./view_code');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = {\n  enter: function enter() {\n    app.enterExamMode();\n    $('#next').addClass('selected');\n    $('.desc-container .blur').css('display', 'block');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(false);\n    editor.setValue('');\n  },\n  exit: function exit(keep_code) {\n    app.exitExamMode();\n    $('#next').removeClass('selected next');\n    $('.desc-container .blur').css('display', '');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(true);\n    if (!keep_code) viewCode(to, app.getCode(to));\n  }\n};\n\n},{\"../app\":2,\"./view_code\":18}],7:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\nvar initEditor = require('./init_editor');\nvar initCategories = require('./init_categories');\nvar setupLayout = require('./setup_layout');\nvar setupMatching = require('./setup_matching');\nvar setupExam = require('./setup_exam');\nvar setLanguage = require('./set_language');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar viewComparison = require('./view_comparison');\nvar exam = require('./exam');\n\nmodule.exports = {\n  setupMain: setupMain,\n  initEditor: initEditor,\n  initCategories: initCategories,\n  setupLayout: setupLayout,\n  setupMatching: setupMatching,\n  setupExam: setupExam,\n  setLanguage: setLanguage,\n  viewCode: viewCode,\n  viewDesc: viewDesc,\n  viewComparison: viewComparison,\n  exam: exam\n};\n\n},{\"./exam\":6,\"./init_categories\":8,\"./init_editor\":9,\"./set_language\":10,\"./setup_exam\":11,\"./setup_layout\":12,\"./setup_main\":13,\"./setup_matching\":17,\"./view_code\":18,\"./view_comparison\":19,\"./view_desc\":20}],8:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../server');\nvar Storage = require('../storage');\nvar app = require('../app');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar exam = require('./exam');\n\nvar from = 0,\n    to = 1;\n\nvar loadCategory = function loadCategory(index, category, language) {\n  Server.loadCode(category, language).then(function (code) {\n    exam.exit();\n    app.setCode(index, code);\n    viewCode(index, code);\n  });\n  if (index == to) {\n    Server.loadDesc(category, language).then(viewDesc);\n  }\n};\n\nmodule.exports = function (categories) {\n  var $index = $('#index');\n  categories.forEach(function (category, i) {\n    category.element = $('<li>' + (i + 1) + '| ' + category.name + '</li>');\n    $index.append(category.element);\n    var $sub_index = $('<ul class=\"sub\" data-category=\"' + i + '\"></ul>');\n    $index.append($sub_index);\n    category.children.forEach(function (category, j) {\n      category.element = $('<li data-subcategory=\"' + j + '\">' + category.name + '</li>');\n      $sub_index.append(category.element);\n    });\n  });\n\n  $('#index > li').click(function () {\n    $('#index > li.active').removeClass('active');\n    $(this).addClass('active');\n  });\n\n  $('ul.sub > li').click(function () {\n    $('ul.sub > li.active').removeClass('active');\n    $(this).addClass('active');\n    var $li = $(this);\n    var $ul = $(this).parent();\n    var category = categories[$ul.data('category')].sub($li.data('subcategory'));\n    Storage.category.set(category);\n    loadCategory(from, category, app.getLanguage(from));\n    loadCategory(to, category, app.getLanguage(to));\n    exam.exit();\n  });\n\n  var category = Storage.category.get();\n  do {\n    category.element.click();\n    category = category.parent;\n  } while (category);\n};\n\n},{\"../app\":2,\"../server\":26,\"../storage\":30,\"./exam\":6,\"./view_code\":18,\"./view_desc\":20}],9:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar viewComparison = require('./view_comparison');\n\nmodule.exports = function (index, language, afterRender) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $code = $panel.find('.code');\n  var editor = ace.edit($code.attr('id'));\n  editor.setTheme('ace/theme/monokai');\n  if (index == 0) $panel.find('.desc').addClass('ace-monokai');\n  editor.getSession().setMode('ace/mode/' + language.ace);\n  editor.getSession().setUseWrapMode(true);\n  editor.setShowFoldWidgets(false);\n  editor.setReadOnly(true);\n  editor.renderer.on('timeToUpdateComparison', function () {\n    if (app.isExamMode()) return;\n    viewComparison();\n  });\n  return editor;\n};\n\n},{\"../app\":2,\"./view_comparison\":19}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $title = $panel.find('.title');\n  $title.text(language.name);\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\nvar util = require('../util');\n\nvar from = 0,\n    to = 1;\n\nvar calculateProgress = function calculateProgress(code_answer, code_user) {\n  return similarity(util.zip(code_answer), util.zip(code_user));\n};\n\nmodule.exports = function () {\n  var editor = app.getEditor(to);\n  editor.on('change', function (e) {\n    if (!app.isExamMode()) return;\n    var progress = calculateProgress(app.getCode(to, true), editor.getValue());\n    $('.progress').css('width', progress * 100 + '%');\n    if (progress == 1) {\n      exam.exit(true);\n      $('#next').addClass('next');\n      $('.progress').css('width', '');\n    }\n  });\n};\n\n/**\n * http://stackoverflow.com/questions/10473745/compare-strings-javascript-return-of-likely\n */\n\nvar similarity = function similarity(s1, s2) {\n  var longer = s1;\n  var shorter = s2;\n  if (s1.length < s2.length) {\n    longer = s2;\n    shorter = s1;\n  }\n  var longerLength = longer.length;\n  if (longerLength == 0) {\n    return 1.0;\n  }\n  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);\n};\n\nvar editDistance = function editDistance(s1, s2) {\n  var costs = [];\n  for (var i = 0; i <= s1.length; i++) {\n    var lastValue = i;\n    for (var j = 0; j <= s2.length; j++) {\n      if (i == 0) costs[j] = j;else {\n        if (j > 0) {\n          var newValue = costs[j - 1];\n          if (s1.charAt(i - 1) != s2.charAt(j - 1)) newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;\n          costs[j - 1] = lastValue;\n          lastValue = newValue;\n        }\n      }\n    }\n    if (i > 0) costs[s2.length] = lastValue;\n  }\n  return costs[s2.length];\n};\n\n},{\"../app\":2,\"../util\":33,\"./exam\":6}],12:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\n\nmodule.exports = function () {\n  $('#next').click(function () {\n    var $next = $(this);\n    if ($next.hasClass('next')) {\n      var $active = $('.sub > li.active');\n      if ($active.is(':last-child')) {\n        var $active_parent = $('#index > li.active');\n        if ($active_parent.is(':nth-last-child(2)')) {\n          alert('Congrats!');\n        } else {\n          $active_parent.next().next().click();\n          $('#index > li.active + .sub > li:first-child').click();\n        }\n      } else {\n        $active.next().click();\n      }\n      $next.removeClass('next');\n    } else {\n      if (app.isExamMode()) {\n        exam.exit();\n      } else {\n        exam.enter();\n      }\n    }\n  });\n};\n\n},{\"../app\":2,\"./exam\":6}],13:[function(require,module,exports){\n'use strict';\n\nvar setupLanguages = require('./setup_languages');\nvar setupStickToBottom = require('./setup_stick_to_bottom');\nvar setupSmoothScroll = require('./setup_smooth_scroll');\n\nmodule.exports = function () {\n  setupLanguages();\n  setupStickToBottom();\n  setupSmoothScroll();\n};\n\n},{\"./setup_languages\":14,\"./setup_smooth_scroll\":15,\"./setup_stick_to_bottom\":16}],14:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nvar languages = Server.getLanguages();\n\nmodule.exports = function () {\n  var _arr = ['#lang-from', '#lang-to'];\n\n  var _loop = function _loop() {\n    var container = _arr[_i];\n    var $container = $(container);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var language = _step.value;\n\n        var $lang = $('<a class=\"lang\" href=\"' + (container == '#lang-from' ? '#dots' : '#top') + '\"></a>');\n        $container.append($lang);\n        var $logo = $('<div class=\"logo\" style=\"background-image: url(\\'./images/lang_' + language.ext + '.png\\')\"></div>');\n        $lang.append($logo);\n        $logo.append('<div class=\"logo mono\" style=\"background-image: url(\\'./images/lang_' + language.ext + '_mono.png\\')\"></div>');\n        $lang.append('<div class=\"name\">' + language.name + '</div>');\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    $container.find('.lang').click(function () {\n      var language = languages[$(this).index()];\n      if (!language.complete) {\n        alert('DuoCoder is under development for ' + language.name + '.');\n        return;\n      }\n      $container.find('.lang.selected').removeClass('selected');\n      $(this).addClass('selected');\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  $('.lang').click(function () {\n    var $form = $('form');\n    var $lang_from_selected = $('#lang-from .lang.selected');\n    var $lang_to_selected = $('#lang-to .lang.selected');\n    if ($lang_from_selected.length && $lang_to_selected.length) {\n      var from_index = $lang_from_selected.index();\n      var to_index = $lang_to_selected.index();\n      $form.find('[name=\"lang_from\"]').val(languages[from_index].ext);\n      $form.find('[name=\"lang_to\"]').val(languages[to_index].ext);\n      $form.submit();\n    }\n  });\n};\n\n},{\"../../server\":26}],15:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function () {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 500);\n        return false;\n      }\n    }\n  });\n  var $unfocused = $('.focused');\n  var onScroll = function onScroll() {\n    $unfocused.toggleClass('unfocused', $(document).scrollTop() <= 168);\n  };\n  onScroll();\n  $(window).scroll(onScroll);\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var $stick_to_bottom_fake = $('.stick-to-bottom.fake');\n  var $stick_to_bottom_real = $('.stick-to-bottom.real');\n  var $lang_from = $('#lang-from');\n  var $fullscreen = $('.fullscreen');\n  var onResize = function onResize() {\n    var top = $lang_from.offset().top + $lang_from.height();\n    var bottom = $stick_to_bottom_fake.offset().top;\n    $fullscreen.toggleClass('full', top < bottom);\n    $stick_to_bottom_real.toggleClass('stick', top < bottom);\n  };\n  onResize();\n  $(window).resize(onResize);\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('.code, #comparison').mousemove(function (e) {\n    $('.match').removeClass('selected');\n    var $code = $(this);\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    $code.find('.match').each(function () {\n      var $match = $(this);\n\n      var _$match$offset = $match.offset(),\n          top = _$match$offset.top,\n          left = _$match$offset.left;\n\n      var bottom = top + $match.height();\n      var right = left + $match.width();\n      if (top < pageY && pageY < bottom && left < pageX && pageX < right) {\n        (function () {\n          var match = $match.data('match');\n          $('.match').filter(function () {\n            return $(this).data('match') == match;\n          }).addClass('selected');\n        })();\n      }\n    });\n  });\n};\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, code) {\n  var matchings = [];\n  app.setMatchings(index, matchings);\n  var lines = code.split(/\\r?\\n/);\n  app.setLines(index, lines.length);\n  var omit_num = 99999;\n\n  var _loop = function _loop(i) {\n    lines[i] = lines[i].replace(/(^|\\]\\})(((?!#\\d+\\{\\[).)+)/gm, '$1#' + omit_num + '{[$2]}');\n    lines[i] = lines[i].replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, function (match, num, content) {\n      num = parseInt(num);\n      if (num == omit_num) num = -1;\n      matchings.push([content, num, i]);\n      return content;\n    });\n  };\n\n  for (var i = 0; i < lines.length; i++) {\n    _loop(i);\n  }\n  code = lines.join('\\n');\n  app.getEditor(index).setValue(code, -1);\n};\n\n},{\"../app\":2}],19:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = function () {\n  var $desc = $('#comparison');\n  var pair = [app.getMatchings(from), app.getMatchings(to)];\n\n  var max = -1;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = pair[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var matchings = _step.value;\n\n      if (matchings == null) return;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = matchings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var matching = _step3.value;\n\n          max = Math.max(max, matching[1]);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var editors = [app.getEditor(from), app.getEditor(to)];\n  var $temp_snippets = [$('.temp-snippet:eq(0)'), $('.temp-snippet:eq(1)')];\n  var _arr = [from, to];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _i4 = _arr[_i];\n    var html = [];\n    var editor = editors[_i4];\n    var lines = app.getLines(_i4);\n    for (var line = 0; line <= lines; line++) {\n      html.push('<div>');\n      editor.renderer.$textLayer.$renderLine(html, line, true, false);\n      html.push('</div>');\n    }\n    $temp_snippets[_i4].html(html.join(''));\n  }\n\n  var comparisons = [];\n  for (var i = 0; i <= max; i++) {\n    comparisons.push([[], [], -1]);\n  }\n  var _arr2 = [from, to];\n\n  var _loop2 = function _loop2() {\n    var i = _arr2[_i2];\n    $temp_snippets[i].find('.match').each(function () {\n      var $match = $(this);\n      var match = $match.data('match');\n      comparisons[match][i].push($match);\n      if (i == 0 && comparisons[match][2] == -1) {\n        comparisons[match][2] = $match.parent().index();\n      }\n    });\n  };\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    _loop2();\n  }\n\n  var _loop = function _loop(_i3) {\n    if (comparisons[_i3][2] == -1) {\n      var _matchings = pair[0];\n      _matchings.every(function (matching) {\n        if (matching[1] == _i3) {\n          comparisons[_i3][2] = matching[2];\n          return false;\n        }\n        return true;\n      });\n    }\n  };\n\n  for (var _i3 = 0; _i3 <= max; _i3++) {\n    _loop(_i3);\n  }\n  $desc.empty();\n  $desc.append('<h2>Key Changes</h2>');\n  $desc.append('<h6>Not all changes are shown.</h6>');\n  var last_line = -1;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    var _loop3 = function _loop3() {\n      var comparison = _step2.value;\n\n      var _comparison = _slicedToArray(comparison, 2),\n          pieces_from = _comparison[0],\n          pieces_to = _comparison[1];\n\n      var is_same = pieces_from.length == pieces_to.length && pieces_from.every(function (element, index) {\n        return element.text() == pieces_to[index].text();\n      });\n      if (is_same) return 'continue';\n      var line = comparison[2];\n      if (last_line != line) {\n        last_line = line;\n        $desc.append('<div class=\"line line-number\">Line ' + (line + 1) + '</div>');\n      }\n      var $line = $('<div class=\"line\"></div>');\n      $desc.append($line);\n      var _arr3 = [pieces_from, pieces_to];\n      for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n        var pieces = _arr3[_i5];\n        var $group = $('<span class=\"group\"></span>');\n        $line.append($group);\n        if (!pieces.length) {\n          $group.append('<span class=\"empty\"></span>');\n        }\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = pieces[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var piece = _step4.value;\n\n            var $piece = piece.clone();\n            $piece.data('match', piece.data('match'));\n            $group.append($piece);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    };\n\n    for (var _iterator2 = comparisons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ret3 = _loop3();\n\n      if (_ret3 === 'continue') continue;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n};\n\n},{\"../app\":2}],20:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (desc) {\n  var converter = new showdown.Converter();\n\n  var $desc = $('#description');\n  $desc.html(converter.makeHtml(desc));\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar Storage = require('./storage');\nvar app = require('./app');\nvar App = require('./app/constructor');\n\nvar _require = require('./bean'),\n    Language = _require.Language;\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar categories = Server.getCategories();\nvar from = 0,\n    to = 1;\n\n// set global promise error handler\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, window, {\n  main: DOM.setupMain,\n  learn: function learn() {\n    extend(true, app, new App());\n    extend(true, window, { app: app });\n    var lang_from_ext = getUrlParameter('lang_from');\n    var lang_to_ext = getUrlParameter('lang_to');\n    if (lang_from_ext && lang_to_ext) {\n      var changed = Storage.language.set(from, lang_from_ext) || Storage.language.set(to, lang_to_ext);\n      if (changed) Storage.category.set(categories[0].sub(0));\n    } else {\n      lang_from_ext = Storage.language.get(from);\n      lang_to_ext = Storage.language.get(to);\n    }\n    var lang_from = Language.getWithExt(lang_from_ext);\n    var lang_to = Language.getWithExt(lang_to_ext);\n    app.setLanguage(from, lang_from);\n    app.setLanguage(to, lang_to);\n    app.setEditor(from, DOM.initEditor(from, lang_from));\n    app.setEditor(to, DOM.initEditor(to, lang_to));\n    DOM.initCategories(categories);\n    DOM.setupLayout();\n    DOM.setupMatching();\n    DOM.setupExam();\n    DOM.setLanguage(from, lang_from);\n    DOM.setLanguage(to, lang_to);\n  }\n});\n\nvar getUrlParameter = function getUrlParameter(sParam) {\n  var params = decodeURIComponent(window.location.search.substring(1)).split('&');\n  for (var i = 0; i < params.length; i++) {\n    var param = params[i].split('=');\n    if (param[0] === sParam) {\n      return param[1] === undefined ? true : param[1];\n    }\n  }\n  return null;\n};\n\n},{\"./app\":2,\"./app/constructor\":1,\"./bean\":4,\"./dom\":7,\"./server\":26,\"./storage\":30,\"rsvp\":35}],22:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":23}],23:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar _$ = $,\n    ajax = _$.ajax,\n    extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        resolve(response);\n      },\n      error: function error(reason) {\n        reject(reason);\n      }\n    };\n    var opts = extend({}, defaults, options, callbacks, { url: url });\n    ajax(opts);\n  });\n};\n\n},{\"rsvp\":35}],24:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Category = _require.Category;\n\nmodule.exports = function () {\n  return categories;\n};\n\nvar categories = [new Category('Comments', 'comment', [new Category('Single Line Comments', 'single'), new Category('Multiple Lines Comments', 'multi')]), new Category('Variables', 'var', [new Category('Definition', 'def'), new Category('Boolean Type', 'bool'), new Category('Numeric Types', 'num'), new Category('Strings', 'str'), new Category('Data Structures', 'data_structure'), new Category('Constants', 'const')]), new Category('Operators', 'operator', [new Category('Boolean Operations', 'bool'), new Category('Comparisons', 'compare'), new Category('Bitwise Operations', 'bitwise')]), new Category('Conditionals', 'conditional', [new Category('If / Else Statement', 'if_else'), new Category('Switch / Case Statement', 'switch_case'), new Category('Ternary Operator', 'ternary')]), new Category('Loops', 'loop', [new Category('For Statement', 'for'), new Category('While Statement', 'while'), new Category('Continue Statement', 'continue'), new Category('Break Statement', 'break')]), new Category('Functions', 'func', [new Category('Definition', 'def'), new Category('Parameters', 'param'), new Category('Return Statement', 'return')]), new Category('Classes', 'class', [new Category('Definition', 'def'), new Category('Class Variables', 'cls_var'), new Category('Class Functions', 'cls_func'), new Category('Instances', 'obj'), new Category('Instance Variables', 'obj_var'), new Category('Instance Functions', 'obj_func'), new Category('Inheritance', 'inherit')]), new Category('Built-In', 'built_in', [new Category('Math Functions', 'math'), new Category('String Functions', 'str'), new Category('Data Structure Operations', 'data_structure'), new Category('Others', 'etc')])];\n\n},{\"../bean\":4}],25:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Language = _require.Language;\n\nmodule.exports = function () {\n  return languages;\n};\n\nvar languages = [new Language('C++', 'c_cpp', 'cpp'), new Language('Python', 'python', 'py'), new Language('Java', 'java', 'java', false), new Language('EMCAScript', 'javascript', 'js', false), new Language('Nada.', null, 'idk', false)];\n\n},{\"../bean\":4}],26:[function(require,module,exports){\n'use strict';\n\nvar loadCode = require('./load_code');\nvar loadDesc = require('./load_desc');\nvar getCategories = require('./get_categories');\nvar getLanguages = require('./get_languages');\n\nmodule.exports = {\n  loadCode: loadCode,\n  loadDesc: loadDesc,\n  getCategories: getCategories,\n  getLanguages: getLanguages\n};\n\n},{\"./get_categories\":24,\"./get_languages\":25,\"./load_code\":27,\"./load_desc\":28}],27:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/code.' + language.ext;\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],28:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/desc.md';\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],29:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar Server = require('../server');\n\nvar getName = function getName() {\n  return 'category';\n};\n\nmodule.exports = {\n  set: function set(category) {\n    var path = '';\n    do {\n      path = category.dir + '/' + path;\n      category = category.parent;\n    } while (category);\n    path.substr(0, path.length - 1);\n    return _set(getName(), path);\n  },\n  get: function get() {\n    var categories = Server.getCategories();\n    var dirs = _get(getName()).split('/');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var dir = _step.value;\n\n        var category = $.grep(categories, function (category) {\n          return category.dir == dir;\n        })[0];\n        categories = category.children;\n        if (!categories.length) return {\n            v: category\n          };\n      };\n\n      for (var _iterator = dirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ret = _loop();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n},{\"../server\":26,\"./manager\":32}],30:[function(require,module,exports){\n'use strict';\n\nvar language = require('./language');\nvar category = require('./category');\n\nmodule.exports = {\n  language: language,\n  category: category\n};\n\n},{\"./category\":29,\"./language\":31}],31:[function(require,module,exports){\n'use strict';\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar getName = function getName(index) {\n  return 'lang_' + index;\n};\n\nmodule.exports = {\n  set: function set(index, ext) {\n    return _set(getName(index), ext);\n  },\n  get: function get(index) {\n    return _get(getName(index));\n  }\n};\n\n},{\"./manager\":32}],32:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  set: function set(name, value) {\n    if (Cookies.get(name) == value) return false;\n    Cookies.set(name, value);\n    return true;\n  },\n  get: function get(name) {\n    return Cookies.get(name);\n  },\n  remove: function remove(name) {\n    Cookies.remove(name);\n    return true;\n  }\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  zip: function zip(code) {\n    return code.trim().replace(/^\\s*[\\r\\n]/gm, '').replace(/\\b\\s+\\B/g, '').replace(/\\B\\s+\\b/g, '').replace(/\\B\\s+\\B/g, '');\n  }\n};\n\n},{}],34:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],35:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":34}]},{},[21])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9hcHAvY29uc3RydWN0b3IuanMiLCJqcy9hcHAvaW5kZXguanMiLCJqcy9iZWFuL2NhdGVnb3J5LmpzIiwianMvYmVhbi9pbmRleC5qcyIsImpzL2JlYW4vbGFuZ3VhZ2UuanMiLCJqcy9kb20vZXhhbS5qcyIsImpzL2RvbS9pbmRleC5qcyIsImpzL2RvbS9pbml0X2NhdGVnb3JpZXMuanMiLCJqcy9kb20vaW5pdF9lZGl0b3IuanMiLCJqcy9kb20vc2V0X2xhbmd1YWdlLmpzIiwianMvZG9tL3NldHVwX2V4YW0uanMiLCJqcy9kb20vc2V0dXBfbGF5b3V0LmpzIiwianMvZG9tL3NldHVwX21haW4vaW5kZXguanMiLCJqcy9kb20vc2V0dXBfbWFpbi9zZXR1cF9sYW5ndWFnZXMuanMiLCJqcy9kb20vc2V0dXBfbWFpbi9zZXR1cF9zbW9vdGhfc2Nyb2xsLmpzIiwianMvZG9tL3NldHVwX21haW4vc2V0dXBfc3RpY2tfdG9fYm90dG9tLmpzIiwianMvZG9tL3NldHVwX21hdGNoaW5nLmpzIiwianMvZG9tL3ZpZXdfY29kZS5qcyIsImpzL2RvbS92aWV3X2NvbXBhcmlzb24uanMiLCJqcy9kb20vdmlld19kZXNjLmpzIiwianMvaW5kZXguanMiLCJqcy9zZXJ2ZXIvYWpheC9nZXQuanMiLCJqcy9zZXJ2ZXIvYWpheC9yZXF1ZXN0LmpzIiwianMvc2VydmVyL2dldF9jYXRlZ29yaWVzLmpzIiwianMvc2VydmVyL2dldF9sYW5ndWFnZXMuanMiLCJqcy9zZXJ2ZXIvaW5kZXguanMiLCJqcy9zZXJ2ZXIvbG9hZF9jb2RlLmpzIiwianMvc2VydmVyL2xvYWRfZGVzYy5qcyIsImpzL3N0b3JhZ2UvY2F0ZWdvcnkuanMiLCJqcy9zdG9yYWdlL2luZGV4LmpzIiwianMvc3RvcmFnZS9sYW5ndWFnZS5qcyIsImpzL3N0b3JhZ2UvbWFuYWdlci5qcyIsImpzL3V0aWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JzdnAvZGlzdC9yc3ZwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7U0NBaUIsQztJQUFWLE0sTUFBQSxNOzs7QUFFUCxJQUFNLFlBQVk7QUFDaEIsWUFBVSxJQURNO0FBRWhCLFVBQVEsSUFGUTtBQUdoQixhQUFXLElBSEs7QUFJaEIsUUFBTSxFQUpVO0FBS2hCLFNBQU8sQ0FBQztBQUxRLENBQWxCOztBQVFBLE9BQU8sT0FBUCxHQUFpQixZQUFZO0FBQUE7O0FBQzNCLE9BQUssS0FBTCxHQUFhLENBQ1gsT0FBTyxJQUFQLEVBQWEsRUFBYixFQUFpQixTQUFqQixDQURXLEVBRVgsT0FBTyxJQUFQLEVBQWEsRUFBYixFQUFpQixTQUFqQixDQUZXLENBQWI7QUFJQSxPQUFLLFNBQUwsR0FBaUIsS0FBakI7O0FBRUEsT0FBSyxXQUFMLEdBQW1CLFVBQUMsS0FBRCxFQUFRLFFBQVIsRUFBcUI7QUFDdEMsVUFBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixRQUFsQixHQUE2QixRQUE3QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxTQUFMLEdBQWlCLFVBQUMsS0FBRCxFQUFRLE1BQVIsRUFBbUI7QUFDbEMsVUFBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixNQUFsQixHQUEyQixNQUEzQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxZQUFMLEdBQW9CLFVBQUMsS0FBRCxFQUFRLFNBQVIsRUFBc0I7QUFDeEMsVUFBSyxLQUFMLENBQVcsS0FBWCxFQUFrQixTQUFsQixHQUE4QixTQUE5QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxPQUFMLEdBQWUsVUFBQyxLQUFELEVBQVEsSUFBUixFQUFpQjtBQUM5QixVQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWtCLElBQWxCLEdBQXlCLElBQXpCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFFBQUwsR0FBZ0IsVUFBQyxLQUFELEVBQVEsS0FBUixFQUFrQjtBQUNoQyxVQUFLLEtBQUwsQ0FBVyxLQUFYLEVB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNvbnN0IHtleHRlbmR9ID0gJDtcblxuY29uc3QgcGFuZWxWYXJzID0ge1xuICBsYW5ndWFnZTogbnVsbCxcbiAgZWRpdG9yOiBudWxsLFxuICBtYXRjaGluZ3M6IG51bGwsXG4gIGNvZGU6ICcnLFxuICBsaW5lczogLTFcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnBhbmVsID0gW1xuICAgIGV4dGVuZCh0cnVlLCB7fSwgcGFuZWxWYXJzKSxcbiAgICBleHRlbmQodHJ1ZSwge30sIHBhbmVsVmFycylcbiAgXTtcbiAgdGhpcy5leGFtX21vZGUgPSBmYWxzZTtcblxuICB0aGlzLnNldExhbmd1YWdlID0gKGluZGV4LCBsYW5ndWFnZSkgPT4ge1xuICAgIHRoaXMucGFuZWxbaW5kZXhdLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gIH07XG5cbiAgdGhpcy5zZXRFZGl0b3IgPSAoaW5kZXgsIGVkaXRvcikgPT4ge1xuICAgIHRoaXMucGFuZWxbaW5kZXhdLmVkaXRvciA9IGVkaXRvcjtcbiAgfTtcblxuICB0aGlzLnNldE1hdGNoaW5ncyA9IChpbmRleCwgbWF0Y2hpbmdzKSA9PiB7XG4gICAgdGhpcy5wYW5lbFtpbmRleF0ubWF0Y2hpbmdzID0gbWF0Y2hpbmdzO1xuICB9O1xuXG4gIHRoaXMuc2V0Q29kZSA9IChpbmRleCwgY29kZSkgPT4ge1xuICAgIHRoaXMucGFuZWxbaW5kZXhdLmNvZGUgPSBjb2RlO1xuICB9O1xuXG4gIHRoaXMuc2V0TGluZXMgPSAoaW5kZXgsIGxpbmVzKSA9PiB7XG4gICAgdGhpcy5wYW5lbFtpbmRleF0ubGluZXMgPSBsaW5lcztcbiAgfTtcblxuICB0aGlzLmVudGVyRXhhbU1vZGUgPSAoKSA9PiB7XG4gICAgdGhpcy5leGFtX21vZGUgPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuZXhpdEV4YW1Nb2RlID0gKCkgPT4ge1xuICAgIHRoaXMuZXhhbV9tb2RlID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5nZXRMYW5ndWFnZSA9IChpbmRleCA9PiB7XG4gICAgcmV0dXJuIHRoaXMucGFuZWxbaW5kZXhdLmxhbmd1YWdlO1xuICB9KTtcblxuICB0aGlzLmdldEVkaXRvciA9IChpbmRleCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnBhbmVsW2luZGV4XS5lZGl0b3I7XG4gIH07XG5cbiAgdGhpcy5nZXRNYXRjaGluZ3MgPSAoaW5kZXgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5wYW5lbFtpbmRleF0ubWF0Y2hpbmdzO1xuICB9O1xuXG4gIHRoaXMuZ2V0Q29kZSA9IChpbmRleCwgcmVhZGFibGUpID0+IHtcbiAgICBjb25zdCBjb2RlID0gdGhpcy5wYW5lbFtpbmRleF0uY29kZTtcbiAgICBpZiAocmVhZGFibGUpIHJldHVybiBjb2RlLnJlcGxhY2UoLyMoXFxkKylcXHtcXFsoKCg/IVxcXVxcfSkuKSopXFxdXFx9L2csICckMicpO1xuICAgIGVsc2UgcmV0dXJuIGNvZGU7XG4gIH07XG5cbiAgdGhpcy5nZXRMaW5lcyA9IChpbmRleCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnBhbmVsW2luZGV4XS5saW5lcztcbiAgfVxuXG4gIHRoaXMuaXNFeGFtTW9kZSA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5leGFtX21vZGU7XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGRpciwgY2hpbGRyZW4gPSBbXSkge1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGlyID0gZGlyO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgIH0pO1xuICB9XG5cbiAgc3ViKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baW5kZXhdO1xuICB9XG59OyIsImNvbnN0IExhbmd1YWdlID0gcmVxdWlyZSgnLi9sYW5ndWFnZScpO1xuY29uc3QgQ2F0ZWdvcnkgPSByZXF1aXJlKCcuL2NhdGVnb3J5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMYW5ndWFnZSxcbiAgQ2F0ZWdvcnlcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGFjZSwgZXh0LCBjb21wbGV0ZSA9IHRydWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYWNlID0gYWNlO1xuICAgIHRoaXMuZXh0ID0gZXh0O1xuICAgIHRoaXMuY29tcGxldGUgPSBjb21wbGV0ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRXaXRoRXh0KGV4dCkge1xuICAgIGNvbnN0IFNlcnZlciA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuICAgIGNvbnN0IGxhbmd1YWdlcyA9IFNlcnZlci5nZXRMYW5ndWFnZXMoKTtcbiAgICBmb3IgKGNvbnN0IGxhbmd1YWdlIG9mIGxhbmd1YWdlcykge1xuICAgICAgaWYgKGxhbmd1YWdlLmV4dCA9PSBleHQpIHJldHVybiBsYW5ndWFnZTtcbiAgICB9XG4gIH1cbn07IiwiY29uc3QgYXBwID0gcmVxdWlyZSgnLi4vYXBwJyk7XG5jb25zdCB2aWV3Q29kZSA9IHJlcXVpcmUoJy4vdmlld19jb2RlJyk7XG5cbmNvbnN0IGZyb20gPSAwLCB0byA9IDE7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbnRlcjogKCkgPT4ge1xuICAgIGFwcC5lbnRlckV4YW1Nb2RlKCk7XG4gICAgJCgnI25leHQnKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAkKCcuZGVzYy1jb250YWluZXIgLmJsdXInKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICBjb25zdCBlZGl0b3IgPSBhcHAuZ2V0RWRpdG9yKHRvKTtcbiAgICBlZGl0b3Iuc2V0UmVhZE9ubHkoZmFsc2UpO1xuICAgIGVkaXRvci5zZXRWYWx1ZSgnJyk7XG4gIH0sXG4gIGV4aXQ6IChrZWVwX2NvZGUpID0+IHtcbiAgICBhcHAuZXhpdEV4YW1Nb2RlKCk7XG4gICAgJCgnI25leHQnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQgbmV4dCcpO1xuICAgICQoJy5kZXNjLWNvbnRhaW5lciAuYmx1cicpLmNzcygnZGlzcGxheScsICcnKTtcbiAgICBjb25zdCBlZGl0b3IgPSBhcHAuZ2V0RWRpdG9yKHRvKTtcbiAgICBlZGl0b3Iuc2V0UmVhZE9ubHkodHJ1ZSk7XG4gICAgaWYgKCFrZWVwX2NvZGUpIHZpZXdDb2RlKHRvLCBhcHAuZ2V0Q29kZSh0bykpO1xuICB9XG59OyIsImNvbnN0IHNldHVwTWFpbiA9IHJlcXVpcmUoJy4vc2V0dXBfbWFpbicpO1xuY29uc3QgaW5pdEVkaXRvciA9IHJlcXVpcmUoJy4vaW5pdF9lZGl0b3InKTtcbmNvbnN0IGluaXRDYXRlZ29yaWVzID0gcmVxdWlyZSgnLi9pbml0X2NhdGVnb3JpZXMnKTtcbmNvbnN0IHNldHVwTGF5b3V0ID0gcmVxdWlyZSgnLi9zZXR1cF9sYXlvdXQnKTtcbmNvbnN0IHNldHVwTWF0Y2hpbmcgPSByZXF1aXJlKCcuL3NldHVwX21hdGNoaW5nJyk7XG5jb25zdCBzZXR1cEV4YW0gPSByZXF1aXJlKCcuL3NldHVwX2V4YW0nKTtcbmNvbnN0IHNldExhbmd1YWdlID0gcmVxdWlyZSgnLi9zZXRfbGFuZ3VhZ2UnKTtcbmNvbnN0IHZpZXdDb2RlID0gcmVxdWlyZSgnLi92aWV3X2NvZGUnKTtcbmNvbnN0IHZpZXdEZXNjID0gcmVxdWlyZSgnLi92aWV3X2Rlc2MnKTtcbmNvbnN0IHZpZXdDb21wYXJpc29uID0gcmVxdWlyZSgnLi92aWV3X2NvbXBhcmlzb24nKTtcbmNvbnN0IGV4YW0gPSByZXF1aXJlKCcuL2V4YW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldHVwTWFpbixcbiAgaW5pdEVkaXRvcixcbiAgaW5pdENhdGVnb3JpZXMsXG4gIHNldHVwTGF5b3V0LFxuICBzZXR1cE1hdGNoaW5nLFxuICBzZXR1cEV4YW0sXG4gIHNldExhbmd1YWdlLFxuICB2aWV3Q29kZSxcbiAgdmlld0Rlc2MsXG4gIHZpZXdDb21wYXJpc29uLFxuICBleGFtXG59OyIsImNvbnN0IFNlcnZlciA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuY29uc3QgU3RvcmFnZSA9IHJlcXVpcmUoJy4uL3N0b3JhZ2UnKTtcbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuY29uc3Qgdmlld0NvZGUgPSByZXF1aXJlKCcuL3ZpZXdfY29kZScpO1xuY29uc3Qgdmlld0Rlc2MgPSByZXF1aXJlKCcuL3ZpZXdfZGVzYycpO1xuY29uc3QgZXhhbSA9IHJlcXVpcmUoJy4vZXhhbScpO1xuXG5jb25zdCBmcm9tID0gMCwgdG8gPSAxO1xuXG5jb25zdCBsb2FkQ2F0ZWdvcnkgPSAoaW5kZXgsIGNhdGVnb3J5LCBsYW5ndWFnZSkgPT4ge1xuICBTZXJ2ZXIubG9hZENvZGUoY2F0ZWdvcnksIGxhbmd1YWdlKS50aGVuKChjb2RlKSA9PiB7XG4gICAgZXhhbS5leGl0KCk7XG4gICAgYXBwLnNldENvZGUoaW5kZXgsIGNvZGUpO1xuICAgIHZpZXdDb2RlKGluZGV4LCBjb2RlKTtcbiAgfSk7XG4gIGlmIChpbmRleCA9PSB0bykge1xuICAgIFNlcnZlci5sb2FkRGVzYyhjYXRlZ29yeSwgbGFuZ3VhZ2UpLnRoZW4odmlld0Rlc2MpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhdGVnb3JpZXMgPT4ge1xuICBjb25zdCAkaW5kZXggPSAkKCcjaW5kZXgnKTtcbiAgY2F0ZWdvcmllcy5mb3JFYWNoKChjYXRlZ29yeSwgaSkgPT4ge1xuICAgIGNhdGVnb3J5LmVsZW1lbnQgPSAkKGA8bGk+JHtpICsgMX18ICR7Y2F0ZWdvcnkubmFtZX08L2xpPmApO1xuICAgICRpbmRleC5hcHBlbmQoY2F0ZWdvcnkuZWxlbWVudCk7XG4gICAgY29uc3QgJHN1Yl9pbmRleCA9ICQoYDx1bCBjbGFzcz1cInN1YlwiIGRhdGEtY2F0ZWdvcnk9XCIke2l9XCI+PC91bD5gKTtcbiAgICAkaW5kZXguYXBwZW5kKCRzdWJfaW5kZXgpO1xuICAgIGNhdGVnb3J5LmNoaWxkcmVuLmZvckVhY2goKGNhdGVnb3J5LCBqKSA9PiB7XG4gICAgICBjYXRlZ29yeS5lbGVtZW50ID0gJChgPGxpIGRhdGEtc3ViY2F0ZWdvcnk9XCIke2p9XCI+JHtjYXRlZ29yeS5uYW1lfTwvbGk+YCk7XG4gICAgICAkc3ViX2luZGV4LmFwcGVuZChjYXRlZ29yeS5lbGVtZW50KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgJCgnI2luZGV4ID4gbGknKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgJCgnI2luZGV4ID4gbGkuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICB9KTtcblxuICAkKCd1bC5zdWIgPiBsaScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKCd1bC5zdWIgPiBsaS5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgY29uc3QgJGxpID0gJCh0aGlzKTtcbiAgICBjb25zdCAkdWwgPSAkKHRoaXMpLnBhcmVudCgpO1xuICAgIGNvbnN0IGNhdGVnb3J5ID0gY2F0ZWdvcmllc1skdWwuZGF0YSgnY2F0ZWdvcnknKV0uc3ViKCRsaS5kYXRhKCdzdWJjYXRlZ29yeScpKTtcbiAgICBTdG9yYWdlLmNhdGVnb3J5LnNldChjYXRlZ29yeSk7XG4gICAgbG9hZENhdGVnb3J5KGZyb20sIGNhdGVnb3J5LCBhcHAuZ2V0TGFuZ3VhZ2UoZnJvbSkpO1xuICAgIGxvYWRDYXRlZ29yeSh0bywgY2F0ZWdvcnksIGFwcC5nZXRMYW5ndWFnZSh0bykpO1xuICAgIGV4YW0uZXhpdCgpO1xuICB9KTtcblxuICBsZXQgY2F0ZWdvcnkgPSBTdG9yYWdlLmNhdGVnb3J5LmdldCgpO1xuICBkbyB7XG4gICAgY2F0ZWdvcnkuZWxlbWVudC5jbGljaygpO1xuICAgIGNhdGVnb3J5ID0gY2F0ZWdvcnkucGFyZW50O1xuICB9IHdoaWxlIChjYXRlZ29yeSk7XG59OyIsImNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuY29uc3Qgdmlld0NvbXBhcmlzb24gPSByZXF1aXJlKCcuL3ZpZXdfY29tcGFyaXNvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChpbmRleCwgbGFuZ3VhZ2UsIGFmdGVyUmVuZGVyKSA9PiB7XG4gIGNvbnN0ICRwYW5lbCA9ICQoYC5wYW5lbDplcSgke2luZGV4fSlgKTtcbiAgY29uc3QgJGNvZGUgPSAkcGFuZWwuZmluZCgnLmNvZGUnKTtcbiAgbGV0IGVkaXRvciA9IGFjZS5lZGl0KCRjb2RlLmF0dHIoJ2lkJykpO1xuICBlZGl0b3Iuc2V0VGhlbWUoJ2FjZS90aGVtZS9tb25va2FpJyk7XG4gIGlmIChpbmRleCA9PSAwKSAkcGFuZWwuZmluZCgnLmRlc2MnKS5hZGRDbGFzcygnYWNlLW1vbm9rYWknKTtcbiAgZWRpdG9yLmdldFNlc3Npb24oKS5zZXRNb2RlKGBhY2UvbW9kZS8ke2xhbmd1YWdlLmFjZX1gKTtcbiAgZWRpdG9yLmdldFNlc3Npb24oKS5zZXRVc2VXcmFwTW9kZSh0cnVlKTtcbiAgZWRpdG9yLnNldFNob3dGb2xkV2lkZ2V0cyhmYWxzZSk7XG4gIGVkaXRvci5zZXRSZWFkT25seSh0cnVlKTtcbiAgZWRpdG9yLnJlbmRlcmVyLm9uKCd0aW1lVG9VcGRhdGVDb21wYXJpc29uJywgKCkgPT4ge1xuICAgIGlmIChhcHAuaXNFeGFtTW9kZSgpKSByZXR1cm47XG4gICAgdmlld0NvbXBhcmlzb24oKTtcbiAgfSk7XG4gIHJldHVybiBlZGl0b3I7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gKGluZGV4LCBsYW5ndWFnZSkgPT4ge1xuICBjb25zdCAkcGFuZWwgPSAkKGAucGFuZWw6ZXEoJHtpbmRleH0pYCk7XG4gIGNvbnN0ICR0aXRsZSA9ICRwYW5lbC5maW5kKCcudGl0bGUnKTtcbiAgJHRpdGxlLnRleHQobGFuZ3VhZ2UubmFtZSk7XG59OyIsImNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuY29uc3QgZXhhbSA9IHJlcXVpcmUoJy4vZXhhbScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuY29uc3QgZnJvbSA9IDAsIHRvID0gMTtcblxuY29uc3QgY2FsY3VsYXRlUHJvZ3Jlc3MgPSAoY29kZV9hbnN3ZXIsIGNvZGVfdXNlcikgPT4ge1xuICByZXR1cm4gc2ltaWxhcml0eSh1dGlsLnppcChjb2RlX2Fuc3dlciksIHV0aWwuemlwKGNvZGVfdXNlcikpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGNvbnN0IGVkaXRvciA9IGFwcC5nZXRFZGl0b3IodG8pO1xuICBlZGl0b3Iub24oJ2NoYW5nZScsIGUgPT4ge1xuICAgIGlmICghYXBwLmlzRXhhbU1vZGUoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHByb2dyZXNzID0gY2FsY3VsYXRlUHJvZ3Jlc3MoYXBwLmdldENvZGUodG8sIHRydWUpLCBlZGl0b3IuZ2V0VmFsdWUoKSk7XG4gICAgJCgnLnByb2dyZXNzJykuY3NzKCd3aWR0aCcsIGAke3Byb2dyZXNzICogMTAwfSVgKTtcbiAgICBpZiAocHJvZ3Jlc3MgPT0gMSkge1xuICAgICAgZXhhbS5leGl0KHRydWUpO1xuICAgICAgJCgnI25leHQnKS5hZGRDbGFzcygnbmV4dCcpO1xuICAgICAgJCgnLnByb2dyZXNzJykuY3NzKCd3aWR0aCcsICcnKTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA0NzM3NDUvY29tcGFyZS1zdHJpbmdzLWphdmFzY3JpcHQtcmV0dXJuLW9mLWxpa2VseVxuICovXG5cbmNvbnN0IHNpbWlsYXJpdHkgPSAoczEsIHMyKSA9PiB7XG4gIGxldCBsb25nZXIgPSBzMTtcbiAgbGV0IHNob3J0ZXIgPSBzMjtcbiAgaWYgKHMxLmxlbmd0aCA8IHMyLmxlbmd0aCkge1xuICAgIGxvbmdlciA9IHMyO1xuICAgIHNob3J0ZXIgPSBzMTtcbiAgfVxuICBjb25zdCBsb25nZXJMZW5ndGggPSBsb25nZXIubGVuZ3RoO1xuICBpZiAobG9uZ2VyTGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gMS4wO1xuICB9XG4gIHJldHVybiAobG9uZ2VyTGVuZ3RoIC0gZWRpdERpc3RhbmNlKGxvbmdlciwgc2hvcnRlcikpIC8gcGFyc2VGbG9hdChsb25nZXJMZW5ndGgpO1xufTtcblxuY29uc3QgZWRpdERpc3RhbmNlID0gKHMxLCBzMikgPT4ge1xuICBjb25zdCBjb3N0cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSBzMS5sZW5ndGg7IGkrKykge1xuICAgIGxldCBsYXN0VmFsdWUgPSBpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoaSA9PSAwKVxuICAgICAgICBjb3N0c1tqXSA9IGo7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgbGV0IG5ld1ZhbHVlID0gY29zdHNbaiAtIDFdO1xuICAgICAgICAgIGlmIChzMS5jaGFyQXQoaSAtIDEpICE9IHMyLmNoYXJBdChqIC0gMSkpXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IE1hdGgubWluKE1hdGgubWluKG5ld1ZhbHVlLCBsYXN0VmFsdWUpLFxuICAgICAgICAgICAgICAgIGNvc3RzW2pdKSArIDE7XG4gICAgICAgICAgY29zdHNbaiAtIDFdID0gbGFzdFZhbHVlO1xuICAgICAgICAgIGxhc3RWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gMClcbiAgICAgIGNvc3RzW3MyLmxlbmd0aF0gPSBsYXN0VmFsdWU7XG4gIH1cbiAgcmV0dXJuIGNvc3RzW3MyLmxlbmd0aF07XG59OyIsImNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xuY29uc3QgZXhhbSA9IHJlcXVpcmUoJy4vZXhhbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgJCgnI25leHQnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgJG5leHQgPSAkKHRoaXMpO1xuICAgIGlmICgkbmV4dC5oYXNDbGFzcygnbmV4dCcpKSB7XG4gICAgICBjb25zdCAkYWN0aXZlID0gJCgnLnN1YiA+IGxpLmFjdGl2ZScpO1xuICAgICAgaWYgKCRhY3RpdmUuaXMoJzpsYXN0LWNoaWxkJykpIHtcbiAgICAgICAgY29uc3QgJGFjdGl2ZV9wYXJlbnQgPSAkKCcjaW5kZXggPiBsaS5hY3RpdmUnKTtcbiAgICAgICAgaWYgKCRhY3RpdmVfcGFyZW50LmlzKCc6bnRoLWxhc3QtY2hpbGQoMiknKSkge1xuICAgICAgICAgIGFsZXJ0KCdDb25ncmF0cyEnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkYWN0aXZlX3BhcmVudC5uZXh0KCkubmV4dCgpLmNsaWNrKCk7XG4gICAgICAgICAgJCgnI2luZGV4ID4gbGkuYWN0aXZlICsgLnN1YiA+IGxpOmZpcnN0LWNoaWxkJykuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGFjdGl2ZS5uZXh0KCkuY2xpY2soKTtcbiAgICAgIH1cbiAgICAgICRuZXh0LnJlbW92ZUNsYXNzKCduZXh0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhcHAuaXNFeGFtTW9kZSgpKSB7XG4gICAgICAgIGV4YW0uZXhpdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhhbS5lbnRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59OyIsImNvbnN0IHNldHVwTGFuZ3VhZ2VzID0gcmVxdWlyZSgnLi9zZXR1cF9sYW5ndWFnZXMnKTtcbmNvbnN0IHNldHVwU3RpY2tUb0JvdHRvbSA9IHJlcXVpcmUoJy4vc2V0dXBfc3RpY2tfdG9fYm90dG9tJyk7XG5jb25zdCBzZXR1cFNtb290aFNjcm9sbCA9IHJlcXVpcmUoJy4vc2V0dXBfc21vb3RoX3Njcm9sbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgc2V0dXBMYW5ndWFnZXMoKTtcbiAgc2V0dXBTdGlja1RvQm90dG9tKCk7XG4gIHNldHVwU21vb3RoU2Nyb2xsKCk7XG59OyIsImNvbnN0IFNlcnZlciA9IHJlcXVpcmUoJy4uLy4uL3NlcnZlcicpO1xuXG5jb25zdCBsYW5ndWFnZXMgPSBTZXJ2ZXIuZ2V0TGFuZ3VhZ2VzKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBmb3IgKGNvbnN0IGNvbnRhaW5lciBvZiBbJyNsYW5nLWZyb20nLCAnI2xhbmctdG8nXSkge1xuICAgIGNvbnN0ICRjb250YWluZXIgPSAkKGNvbnRhaW5lcik7XG4gICAgZm9yIChjb25zdCBsYW5ndWFnZSBvZiBsYW5ndWFnZXMpIHtcbiAgICAgIGNvbnN0ICRsYW5nID0gJChgPGEgY2xhc3M9XCJsYW5nXCIgaHJlZj1cIiR7Y29udGFpbmVyID09ICcjbGFuZy1mcm9tJyA/ICcjZG90cycgOiAnI3RvcCd9XCI+PC9hPmApO1xuICAgICAgJGNvbnRhaW5lci5hcHBlbmQoJGxhbmcpO1xuICAgICAgY29uc3QgJGxvZ28gPSAkKGA8ZGl2IGNsYXNzPVwibG9nb1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuL2ltYWdlcy9sYW5nXyR7bGFuZ3VhZ2UuZXh0fS5wbmcnKVwiPjwvZGl2PmApO1xuICAgICAgJGxhbmcuYXBwZW5kKCRsb2dvKTtcbiAgICAgICRsb2dvLmFwcGVuZChgPGRpdiBjbGFzcz1cImxvZ28gbW9ub1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuL2ltYWdlcy9sYW5nXyR7bGFuZ3VhZ2UuZXh0fV9tb25vLnBuZycpXCI+PC9kaXY+YCk7XG4gICAgICAkbGFuZy5hcHBlbmQoYDxkaXYgY2xhc3M9XCJuYW1lXCI+JHtsYW5ndWFnZS5uYW1lfTwvZGl2PmApO1xuICAgIH1cbiAgICAkY29udGFpbmVyLmZpbmQoJy5sYW5nJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgbGFuZ3VhZ2UgPSBsYW5ndWFnZXNbJCh0aGlzKS5pbmRleCgpXTtcbiAgICAgIGlmICghbGFuZ3VhZ2UuY29tcGxldGUpIHtcbiAgICAgICAgYWxlcnQoYER1b0NvZGVyIGlzIHVuZGVyIGRldmVsb3BtZW50IGZvciAke2xhbmd1YWdlLm5hbWV9LmApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkY29udGFpbmVyLmZpbmQoJy5sYW5nLnNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAkKHRoaXMpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgIH0pO1xuICB9XG4gICQoJy5sYW5nJykuY2xpY2soKCkgPT4ge1xuICAgIGNvbnN0ICRmb3JtID0gJCgnZm9ybScpO1xuICAgIGNvbnN0ICRsYW5nX2Zyb21fc2VsZWN0ZWQgPSAkKCcjbGFuZy1mcm9tIC5sYW5nLnNlbGVjdGVkJyk7XG4gICAgY29uc3QgJGxhbmdfdG9fc2VsZWN0ZWQgPSAkKCcjbGFuZy10byAubGFuZy5zZWxlY3RlZCcpO1xuICAgIGlmICgkbGFuZ19mcm9tX3NlbGVjdGVkLmxlbmd0aCAmJiAkbGFuZ190b19zZWxlY3RlZC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGZyb21faW5kZXggPSAkbGFuZ19mcm9tX3NlbGVjdGVkLmluZGV4KCk7XG4gICAgICBjb25zdCB0b19pbmRleCA9ICRsYW5nX3RvX3NlbGVjdGVkLmluZGV4KCk7XG4gICAgICAkZm9ybS5maW5kKCdbbmFtZT1cImxhbmdfZnJvbVwiXScpLnZhbChsYW5ndWFnZXNbZnJvbV9pbmRleF0uZXh0KTtcbiAgICAgICRmb3JtLmZpbmQoJ1tuYW1lPVwibGFuZ190b1wiXScpLnZhbChsYW5ndWFnZXNbdG9faW5kZXhdLmV4dCk7XG4gICAgICAkZm9ybS5zdWJtaXQoKTtcbiAgICB9XG4gIH0pO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgJCgnYVtocmVmKj1cIiNcIl06bm90KFtocmVmPVwiI1wiXSknKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCAnJykgPT0gdGhpcy5wYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgJycpICYmIGxvY2F0aW9uLmhvc3RuYW1lID09IHRoaXMuaG9zdG5hbWUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMuaGFzaCk7XG4gICAgICB0YXJnZXQgPSB0YXJnZXQubGVuZ3RoID8gdGFyZ2V0IDogJCgnW25hbWU9JyArIHRoaXMuaGFzaC5zbGljZSgxKSArICddJyk7XG4gICAgICBpZiAodGFyZ2V0Lmxlbmd0aCkge1xuICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgICAgc2Nyb2xsVG9wOiB0YXJnZXQub2Zmc2V0KCkudG9wXG4gICAgICAgIH0sIDUwMCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCAkdW5mb2N1c2VkID0gJCgnLmZvY3VzZWQnKTtcbiAgY29uc3Qgb25TY3JvbGwgPSAoKSA9PiB7XG4gICAgJHVuZm9jdXNlZC50b2dnbGVDbGFzcygndW5mb2N1c2VkJywgJChkb2N1bWVudCkuc2Nyb2xsVG9wKCkgPD0gMTY4KTtcbiAgfTtcbiAgb25TY3JvbGwoKTtcbiAgJCh3aW5kb3cpLnNjcm9sbChvblNjcm9sbCk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICBjb25zdCAkc3RpY2tfdG9fYm90dG9tX2Zha2UgPSAkKCcuc3RpY2stdG8tYm90dG9tLmZha2UnKTtcbiAgY29uc3QgJHN0aWNrX3RvX2JvdHRvbV9yZWFsID0gJCgnLnN0aWNrLXRvLWJvdHRvbS5yZWFsJyk7XG4gIGNvbnN0ICRsYW5nX2Zyb20gPSAkKCcjbGFuZy1mcm9tJyk7XG4gIGNvbnN0ICRmdWxsc2NyZWVuID0gJCgnLmZ1bGxzY3JlZW4nKTtcbiAgY29uc3Qgb25SZXNpemUgPSAoKSA9PiB7XG4gICAgY29uc3QgdG9wID0gJGxhbmdfZnJvbS5vZmZzZXQoKS50b3AgKyAkbGFuZ19mcm9tLmhlaWdodCgpO1xuICAgIGNvbnN0IGJvdHRvbSA9ICRzdGlja190b19ib3R0b21fZmFrZS5vZmZzZXQoKS50b3A7XG4gICAgJGZ1bGxzY3JlZW4udG9nZ2xlQ2xhc3MoJ2Z1bGwnLCB0b3AgPCBib3R0b20pO1xuICAgICRzdGlja190b19ib3R0b21fcmVhbC50b2dnbGVDbGFzcygnc3RpY2snLCB0b3AgPCBib3R0b20pXG4gIH07XG4gIG9uUmVzaXplKCk7XG4gICQod2luZG93KS5yZXNpemUob25SZXNpemUpO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgJCgnLmNvZGUsICNjb21wYXJpc29uJykubW91c2Vtb3ZlKGZ1bmN0aW9uIChlKSB7XG4gICAgJCgnLm1hdGNoJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgY29uc3QgJGNvZGUgPSAkKHRoaXMpO1xuICAgIGNvbnN0IHtwYWdlWCwgcGFnZVl9ID0gZTtcbiAgICAkY29kZS5maW5kKCcubWF0Y2gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0ICRtYXRjaCA9ICQodGhpcyk7XG4gICAgICBjb25zdCB7dG9wLCBsZWZ0fSA9ICRtYXRjaC5vZmZzZXQoKTtcbiAgICAgIGNvbnN0IGJvdHRvbSA9IHRvcCArICRtYXRjaC5oZWlnaHQoKTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArICRtYXRjaC53aWR0aCgpO1xuICAgICAgaWYgKHRvcCA8IHBhZ2VZICYmIHBhZ2VZIDwgYm90dG9tICYmIGxlZnQgPCBwYWdlWCAmJiBwYWdlWCA8IHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gJG1hdGNoLmRhdGEoJ21hdGNoJyk7XG4gICAgICAgICQoJy5tYXRjaCcpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnbWF0Y2gnKSA9PSBtYXRjaDtcbiAgICAgICAgfSkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTsiLCJjb25zdCBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaW5kZXgsIGNvZGUpID0+IHtcbiAgY29uc3QgbWF0Y2hpbmdzID0gW107XG4gIGFwcC5zZXRNYXRjaGluZ3MoaW5kZXgsIG1hdGNoaW5ncyk7XG4gIGNvbnN0IGxpbmVzID0gY29kZS5zcGxpdCgvXFxyP1xcbi8pO1xuICBhcHAuc2V0TGluZXMoaW5kZXgsIGxpbmVzLmxlbmd0aCk7XG4gIGNvbnN0IG9taXRfbnVtID0gOTk5OTk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsaW5lc1tpXSA9IGxpbmVzW2ldLnJlcGxhY2UoLyhefFxcXVxcfSkoKCg/ISNcXGQrXFx7XFxbKS4pKykvZ20sIGAkMSMke29taXRfbnVtfXtbJDJdfWApO1xuICAgIGxpbmVzW2ldID0gbGluZXNbaV0ucmVwbGFjZSgvIyhcXGQrKVxce1xcWygoKD8hXFxdXFx9KS4pKilcXF1cXH0vZywgKG1hdGNoLCBudW0sIGNvbnRlbnQpID0+IHtcbiAgICAgIG51bSA9IHBhcnNlSW50KG51bSk7XG4gICAgICBpZiAobnVtID09IG9taXRfbnVtKSBudW0gPSAtMTtcbiAgICAgIG1hdGNoaW5ncy5wdXNoKFtjb250ZW50LCBudW0sIGldKTtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pO1xuICB9XG4gIGNvZGUgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgYXBwLmdldEVkaXRvcihpbmRleCkuc2V0VmFsdWUoY29kZSwgLTEpO1xufTsiLCJjb25zdCBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcblxuY29uc3QgZnJvbSA9IDAsIHRvID0gMTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGNvbnN0ICRkZXNjID0gJCgnI2NvbXBhcmlzb24nKTtcbiAgY29uc3QgcGFpciA9IFtcbiAgICBhcHAuZ2V0TWF0Y2hpbmdzKGZyb20pLFxuICAgIGFwcC5nZXRNYXRjaGluZ3ModG8pXG4gIF07XG5cbiAgbGV0IG1heCA9IC0xO1xuICBmb3IgKGNvbnN0IG1hdGNoaW5ncyBvZiBwYWlyKSB7XG4gICAgaWYgKG1hdGNoaW5ncyA9PSBudWxsKSByZXR1cm47XG4gICAgZm9yIChjb25zdCBtYXRjaGluZyBvZiBtYXRjaGluZ3MpIHtcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgbWF0Y2hpbmdbMV0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVkaXRvcnMgPSBbYXBwLmdldEVkaXRvcihmcm9tKSwgYXBwLmdldEVkaXRvcih0byldO1xuICBjb25zdCAkdGVtcF9zbmlwcGV0cyA9IFskKCcudGVtcC1zbmlwcGV0OmVxKDApJyksJCgnLnRlbXAtc25pcHBldDplcSgxKScpXTtcbiAgZm9yIChjb25zdCBpIG9mIFtmcm9tLCB0b10pIHtcbiAgICBjb25zdCBodG1sID0gW107XG4gICAgY29uc3QgZWRpdG9yID0gZWRpdG9yc1tpXTtcbiAgICBjb25zdCBsaW5lcyA9IGFwcC5nZXRMaW5lcyhpKTtcbiAgICBmb3IgKHZhciBsaW5lID0gMDsgbGluZSA8PSBsaW5lczsgbGluZSsrKSB7XG4gICAgICBodG1sLnB1c2goJzxkaXY+Jyk7XG4gICAgICBlZGl0b3IucmVuZGVyZXIuJHRleHRMYXllci4kcmVuZGVyTGluZShodG1sLCBsaW5lLCB0cnVlLCBmYWxzZSk7XG4gICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuICAgIH1cbiAgICAkdGVtcF9zbmlwcGV0c1tpXS5odG1sKGh0bWwuam9pbignJykpO1xuICB9XG5cbiAgY29uc3QgY29tcGFyaXNvbnMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4OyBpKyspIHtcbiAgICBjb21wYXJpc29ucy5wdXNoKFtbXSwgW10sIC0xXSk7XG4gIH1cbiAgZm9yIChjb25zdCBpIG9mIFtmcm9tLCB0b10pIHtcbiAgICAkdGVtcF9zbmlwcGV0c1tpXS5maW5kKCcubWF0Y2gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0ICRtYXRjaCA9ICQodGhpcyk7XG4gICAgICBjb25zdCBtYXRjaCA9ICRtYXRjaC5kYXRhKCdtYXRjaCcpO1xuICAgICAgY29tcGFyaXNvbnNbbWF0Y2hdW2ldLnB1c2goJG1hdGNoKTtcbiAgICAgIGlmIChpID09IDAgJiYgY29tcGFyaXNvbnNbbWF0Y2hdWzJdID09IC0xKSB7XG4gICAgICAgIGNvbXBhcmlzb25zW21hdGNoXVsyXSA9ICRtYXRjaC5wYXJlbnQoKS5pbmRleCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IG1heDsgaSsrKSB7XG4gICAgaWYgKGNvbXBhcmlzb25zW2ldWzJdID09IC0xKSB7XG4gICAgICBjb25zdCBtYXRjaGluZ3MgPSBwYWlyWzBdO1xuICAgICAgbWF0Y2hpbmdzLmV2ZXJ5KG1hdGNoaW5nID0+IHtcbiAgICAgICAgaWYgKG1hdGNoaW5nWzFdID09IGkpIHtcbiAgICAgICAgICBjb21wYXJpc29uc1tpXVsyXSA9IG1hdGNoaW5nWzJdO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAkZGVzYy5lbXB0eSgpO1xuICAkZGVzYy5hcHBlbmQoJzxoMj5LZXkgQ2hhbmdlczwvaDI+Jyk7XG4gICRkZXNjLmFwcGVuZCgnPGg2Pk5vdCBhbGwgY2hhbmdlcyBhcmUgc2hvd24uPC9oNj4nKTtcbiAgbGV0IGxhc3RfbGluZSA9IC0xO1xuICBmb3IgKGNvbnN0IGNvbXBhcmlzb24gb2YgY29tcGFyaXNvbnMpIHtcbiAgICBjb25zdCBbcGllY2VzX2Zyb20sIHBpZWNlc190b10gPSBjb21wYXJpc29uO1xuICAgIGNvbnN0IGlzX3NhbWUgPSBwaWVjZXNfZnJvbS5sZW5ndGggPT0gcGllY2VzX3RvLmxlbmd0aCAmJiBwaWVjZXNfZnJvbS5ldmVyeSgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudGV4dCgpID09IHBpZWNlc190b1tpbmRleF0udGV4dCgpO1xuICAgICAgfSk7XG4gICAgaWYgKGlzX3NhbWUpIGNvbnRpbnVlO1xuICAgIGNvbnN0IGxpbmUgPSBjb21wYXJpc29uWzJdO1xuICAgIGlmIChsYXN0X2xpbmUgIT0gbGluZSkge1xuICAgICAgbGFzdF9saW5lID0gbGluZTtcbiAgICAgICRkZXNjLmFwcGVuZChgPGRpdiBjbGFzcz1cImxpbmUgbGluZS1udW1iZXJcIj5MaW5lICR7bGluZSArIDF9PC9kaXY+YCk7XG4gICAgfVxuICAgIGNvbnN0ICRsaW5lID0gJCgnPGRpdiBjbGFzcz1cImxpbmVcIj48L2Rpdj4nKTtcbiAgICAkZGVzYy5hcHBlbmQoJGxpbmUpO1xuICAgIGZvciAoY29uc3QgcGllY2VzIG9mIFtwaWVjZXNfZnJvbSwgcGllY2VzX3RvXSkge1xuICAgICAgY29uc3QgJGdyb3VwID0gJCgnPHNwYW4gY2xhc3M9XCJncm91cFwiPjwvc3Bhbj4nKTtcbiAgICAgICRsaW5lLmFwcGVuZCgkZ3JvdXApO1xuICAgICAgaWYgKCFwaWVjZXMubGVuZ3RoKSB7XG4gICAgICAgICRncm91cC5hcHBlbmQoYDxzcGFuIGNsYXNzPVwiZW1wdHlcIj48L3NwYW4+YCk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIHBpZWNlcykge1xuICAgICAgICBjb25zdCAkcGllY2UgPSBwaWVjZS5jbG9uZSgpO1xuICAgICAgICAkcGllY2UuZGF0YSgnbWF0Y2gnLCBwaWVjZS5kYXRhKCdtYXRjaCcpKTtcbiAgICAgICAgJGdyb3VwLmFwcGVuZCgkcGllY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IChkZXNjKSA9PiB7XG4gIGNvbnN0IGNvbnZlcnRlciA9IG5ldyBzaG93ZG93bi5Db252ZXJ0ZXIoKTtcblxuICBjb25zdCAkZGVzYyA9ICQoJyNkZXNjcmlwdGlvbicpO1xuICAkZGVzYy5odG1sKGNvbnZlcnRlci5tYWtlSHRtbChkZXNjKSk7XG59OyIsImNvbnN0IFJTVlAgPSByZXF1aXJlKCdyc3ZwJyk7XG5jb25zdCBET00gPSByZXF1aXJlKCcuL2RvbScpO1xuY29uc3QgU2VydmVyID0gcmVxdWlyZSgnLi9zZXJ2ZXInKTtcbmNvbnN0IFN0b3JhZ2UgPSByZXF1aXJlKCcuL3N0b3JhZ2UnKTtcbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4vYXBwJyk7XG5jb25zdCBBcHAgPSByZXF1aXJlKCcuL2FwcC9jb25zdHJ1Y3RvcicpO1xuY29uc3Qge0xhbmd1YWdlfSA9IHJlcXVpcmUoJy4vYmVhbicpO1xuY29uc3Qge2V4dGVuZH0gPSAkO1xuXG5jb25zdCBjYXRlZ29yaWVzID0gU2VydmVyLmdldENhdGVnb3JpZXMoKTtcbmNvbnN0IGZyb20gPSAwLCB0byA9IDE7XG5cbi8vIHNldCBnbG9iYWwgcHJvbWlzZSBlcnJvciBoYW5kbGVyXG5SU1ZQLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgY29uc29sZS5hc3NlcnQoZmFsc2UsIHJlYXNvbik7XG59KTtcblxuZXh0ZW5kKHRydWUsIHdpbmRvdywge1xuICBtYWluOiBET00uc2V0dXBNYWluLFxuICBsZWFybjogKCkgPT4ge1xuICAgIGV4dGVuZCh0cnVlLCBhcHAsIG5ldyBBcHAoKSk7XG4gICAgZXh0ZW5kKHRydWUsIHdpbmRvdywge2FwcH0pO1xuICAgIGxldCBsYW5nX2Zyb21fZXh0ID0gZ2V0VXJsUGFyYW1ldGVyKCdsYW5nX2Zyb20nKTtcbiAgICBsZXQgbGFuZ190b19leHQgPSBnZXRVcmxQYXJhbWV0ZXIoJ2xhbmdfdG8nKTtcbiAgICBpZiAobGFuZ19mcm9tX2V4dCAmJiBsYW5nX3RvX2V4dCkge1xuICAgICAgY29uc3QgY2hhbmdlZCA9XG4gICAgICAgIFN0b3JhZ2UubGFuZ3VhZ2Uuc2V0KGZyb20sIGxhbmdfZnJvbV9leHQpIHx8XG4gICAgICAgIFN0b3JhZ2UubGFuZ3VhZ2Uuc2V0KHRvLCBsYW5nX3RvX2V4dCk7XG4gICAgICBpZiAoY2hhbmdlZCkgU3RvcmFnZS5jYXRlZ29yeS5zZXQoY2F0ZWdvcmllc1swXS5zdWIoMCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW5nX2Zyb21fZXh0ID0gU3RvcmFnZS5sYW5ndWFnZS5nZXQoZnJvbSk7XG4gICAgICBsYW5nX3RvX2V4dCA9IFN0b3JhZ2UubGFuZ3VhZ2UuZ2V0KHRvKTtcbiAgICB9XG4gICAgY29uc3QgbGFuZ19mcm9tID0gTGFuZ3VhZ2UuZ2V0V2l0aEV4dChsYW5nX2Zyb21fZXh0KTtcbiAgICBjb25zdCBsYW5nX3RvID0gTGFuZ3VhZ2UuZ2V0V2l0aEV4dChsYW5nX3RvX2V4dCk7XG4gICAgYXBwLnNldExhbmd1YWdlKGZyb20sIGxhbmdfZnJvbSk7XG4gICAgYXBwLnNldExhbmd1YWdlKHRvLCBsYW5nX3RvKTtcbiAgICBhcHAuc2V0RWRpdG9yKGZyb20sIERPTS5pbml0RWRpdG9yKGZyb20sIGxhbmdfZnJvbSkpO1xuICAgIGFwcC5zZXRFZGl0b3IodG8sIERPTS5pbml0RWRpdG9yKHRvLCBsYW5nX3RvKSk7XG4gICAgRE9NLmluaXRDYXRlZ29yaWVzKGNhdGVnb3JpZXMpO1xuICAgIERPTS5zZXR1cExheW91dCgpO1xuICAgIERPTS5zZXR1cE1hdGNoaW5nKCk7XG4gICAgRE9NLnNldHVwRXhhbSgpO1xuICAgIERPTS5zZXRMYW5ndWFnZShmcm9tLCBsYW5nX2Zyb20pO1xuICAgIERPTS5zZXRMYW5ndWFnZSh0bywgbGFuZ190byk7XG4gIH1cbn0pO1xuXG5jb25zdCBnZXRVcmxQYXJhbWV0ZXIgPSAoc1BhcmFtKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSkuc3BsaXQoJyYnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwYXJhbSA9IHBhcmFtc1tpXS5zcGxpdCgnPScpO1xuICAgIGlmIChwYXJhbVswXSA9PT0gc1BhcmFtKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwYXJhbVsxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59OyIsImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAodXJsKSA9PiB7XG4gIHJldHVybiByZXF1ZXN0KHVybCwge1xuICAgIHR5cGU6ICdHRVQnXG4gIH0pO1xufTsiLCJjb25zdCBSU1ZQID0gcmVxdWlyZSgncnN2cCcpO1xuY29uc3Qge1xuICBhamF4LFxuICBleHRlbmRcbn0gPSAkO1xuXG5jb25zdCBkZWZhdWx0cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gbmV3IFJTVlAuUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0ge1xuICAgICAgc3VjY2VzcyhyZXNwb25zZSkge1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcihyZWFzb24pIHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvcHRzID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgY2FsbGJhY2tzLCB7dXJsfSk7XG4gICAgYWpheChvcHRzKTtcbiAgfSk7XG59OyIsImNvbnN0IHtcbiAgQ2F0ZWdvcnlcbn0gPSByZXF1aXJlKCcuLi9iZWFuJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICByZXR1cm4gY2F0ZWdvcmllcztcbn07XG5cbmNvbnN0IGNhdGVnb3JpZXMgPSBbXG4gIG5ldyBDYXRlZ29yeSgnQ29tbWVudHMnLCAnY29tbWVudCcsIFtcbiAgICBuZXcgQ2F0ZWdvcnkoJ1NpbmdsZSBMaW5lIENvbW1lbnRzJywgJ3NpbmdsZScpLFxuICAgIG5ldyBDYXRlZ29yeSgnTXVsdGlwbGUgTGluZXMgQ29tbWVudHMnLCAnbXVsdGknKVxuICBdKSxcbiAgbmV3IENhdGVnb3J5KCdWYXJpYWJsZXMnLCAndmFyJywgW1xuICAgIG5ldyBDYXRlZ29yeSgnRGVmaW5pdGlvbicsICdkZWYnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0Jvb2xlYW4gVHlwZScsICdib29sJyksXG4gICAgbmV3IENhdGVnb3J5KCdOdW1lcmljIFR5cGVzJywgJ251bScpLFxuICAgIG5ldyBDYXRlZ29yeSgnU3RyaW5ncycsICdzdHInKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0RhdGEgU3RydWN0dXJlcycsICdkYXRhX3N0cnVjdHVyZScpLFxuICAgIG5ldyBDYXRlZ29yeSgnQ29uc3RhbnRzJywgJ2NvbnN0JylcbiAgXSksXG4gIG5ldyBDYXRlZ29yeSgnT3BlcmF0b3JzJywgJ29wZXJhdG9yJywgW1xuICAgIG5ldyBDYXRlZ29yeSgnQm9vbGVhbiBPcGVyYXRpb25zJywgJ2Jvb2wnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0NvbXBhcmlzb25zJywgJ2NvbXBhcmUnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0JpdHdpc2UgT3BlcmF0aW9ucycsICdiaXR3aXNlJylcbiAgXSksXG4gIG5ldyBDYXRlZ29yeSgnQ29uZGl0aW9uYWxzJywgJ2NvbmRpdGlvbmFsJywgW1xuICAgIG5ldyBDYXRlZ29yeSgnSWYgLyBFbHNlIFN0YXRlbWVudCcsICdpZl9lbHNlJyksXG4gICAgbmV3IENhdGVnb3J5KCdTd2l0Y2ggLyBDYXNlIFN0YXRlbWVudCcsICdzd2l0Y2hfY2FzZScpLFxuICAgIG5ldyBDYXRlZ29yeSgnVGVybmFyeSBPcGVyYXRvcicsICd0ZXJuYXJ5JylcbiAgXSksXG4gIG5ldyBDYXRlZ29yeSgnTG9vcHMnLCAnbG9vcCcsIFtcbiAgICBuZXcgQ2F0ZWdvcnkoJ0ZvciBTdGF0ZW1lbnQnLCAnZm9yJyksXG4gICAgbmV3IENhdGVnb3J5KCdXaGlsZSBTdGF0ZW1lbnQnLCAnd2hpbGUnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0NvbnRpbnVlIFN0YXRlbWVudCcsICdjb250aW51ZScpLFxuICAgIG5ldyBDYXRlZ29yeSgnQnJlYWsgU3RhdGVtZW50JywgJ2JyZWFrJylcbiAgXSksXG4gIG5ldyBDYXRlZ29yeSgnRnVuY3Rpb25zJywgJ2Z1bmMnLCBbXG4gICAgbmV3IENhdGVnb3J5KCdEZWZpbml0aW9uJywgJ2RlZicpLFxuICAgIG5ldyBDYXRlZ29yeSgnUGFyYW1ldGVycycsICdwYXJhbScpLFxuICAgIG5ldyBDYXRlZ29yeSgnUmV0dXJuIFN0YXRlbWVudCcsICdyZXR1cm4nKVxuICBdKSxcbiAgbmV3IENhdGVnb3J5KCdDbGFzc2VzJywgJ2NsYXNzJywgW1xuICAgIG5ldyBDYXRlZ29yeSgnRGVmaW5pdGlvbicsICdkZWYnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0NsYXNzIFZhcmlhYmxlcycsICdjbHNfdmFyJyksXG4gICAgbmV3IENhdGVnb3J5KCdDbGFzcyBGdW5jdGlvbnMnLCAnY2xzX2Z1bmMnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0luc3RhbmNlcycsICdvYmonKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0luc3RhbmNlIFZhcmlhYmxlcycsICdvYmpfdmFyJyksXG4gICAgbmV3IENhdGVnb3J5KCdJbnN0YW5jZSBGdW5jdGlvbnMnLCAnb2JqX2Z1bmMnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ0luaGVyaXRhbmNlJywgJ2luaGVyaXQnKVxuICBdKSxcbiAgbmV3IENhdGVnb3J5KCdCdWlsdC1JbicsICdidWlsdF9pbicsIFtcbiAgICBuZXcgQ2F0ZWdvcnkoJ01hdGggRnVuY3Rpb25zJywgJ21hdGgnKSxcbiAgICBuZXcgQ2F0ZWdvcnkoJ1N0cmluZyBGdW5jdGlvbnMnLCAnc3RyJyksXG4gICAgbmV3IENhdGVnb3J5KCdEYXRhIFN0cnVjdHVyZSBPcGVyYXRpb25zJywgJ2RhdGFfc3RydWN0dXJlJyksXG4gICAgbmV3IENhdGVnb3J5KCdPdGhlcnMnLCAnZXRjJylcbiAgXSlcbl07IiwiY29uc3Qge1xuICBMYW5ndWFnZVxufSA9IHJlcXVpcmUoJy4uL2JlYW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIHJldHVybiBsYW5ndWFnZXM7XG59O1xuXG5jb25zdCBsYW5ndWFnZXMgPSBbXG4gIG5ldyBMYW5ndWFnZSgnQysrJywgJ2NfY3BwJywgJ2NwcCcpLFxuICBuZXcgTGFuZ3VhZ2UoJ1B5dGhvbicsICdweXRob24nLCAncHknKSxcbiAgbmV3IExhbmd1YWdlKCdKYXZhJywgJ2phdmEnLCAnamF2YScsIGZhbHNlKSxcbiAgbmV3IExhbmd1YWdlKCdFTUNBU2NyaXB0JywgJ2phdmFzY3JpcHQnLCAnanMnLCBmYWxzZSksXG4gIG5ldyBMYW5ndWFnZSgnTmFkYS4nLCBudWxsLCAnaWRrJywgZmFsc2UpXG5dOyIsImNvbnN0IGxvYWRDb2RlID0gcmVxdWlyZSgnLi9sb2FkX2NvZGUnKTtcbmNvbnN0IGxvYWREZXNjID0gcmVxdWlyZSgnLi9sb2FkX2Rlc2MnKTtcbmNvbnN0IGdldENhdGVnb3JpZXMgPSByZXF1aXJlKCcuL2dldF9jYXRlZ29yaWVzJyk7XG5jb25zdCBnZXRMYW5ndWFnZXMgPSByZXF1aXJlKCcuL2dldF9sYW5ndWFnZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvYWRDb2RlLFxuICBsb2FkRGVzYyxcbiAgZ2V0Q2F0ZWdvcmllcyxcbiAgZ2V0TGFuZ3VhZ2VzXG59OyIsImNvbnN0IGdldCA9IHJlcXVpcmUoJy4vYWpheC9nZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoY2F0ZWdvcnksIGxhbmd1YWdlKSA9PiB7XG4gIGxldCBwYXRoID0gYCR7bGFuZ3VhZ2UuZXh0fS9jb2RlLiR7bGFuZ3VhZ2UuZXh0fWA7XG4gIGRvIHtcbiAgICBwYXRoID0gY2F0ZWdvcnkuZGlyICsgJy8nICsgcGF0aDtcbiAgICBjYXRlZ29yeSA9IGNhdGVnb3J5LnBhcmVudDtcbiAgfSB3aGlsZSAoY2F0ZWdvcnkpO1xuICByZXR1cm4gZ2V0KGAuL2RhdGEvJHtwYXRofWApO1xufTsiLCJjb25zdCBnZXQgPSByZXF1aXJlKCcuL2FqYXgvZ2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGNhdGVnb3J5LCBsYW5ndWFnZSkgPT4ge1xuICBsZXQgcGF0aCA9IGAke2xhbmd1YWdlLmV4dH0vZGVzYy5tZGA7XG4gIGRvIHtcbiAgICBwYXRoID0gY2F0ZWdvcnkuZGlyICsgJy8nICsgcGF0aDtcbiAgICBjYXRlZ29yeSA9IGNhdGVnb3J5LnBhcmVudDtcbiAgfSB3aGlsZSAoY2F0ZWdvcnkpO1xuICByZXR1cm4gZ2V0KGAuL2RhdGEvJHtwYXRofWApO1xufTsiLCJjb25zdCB7c2V0LCBnZXR9ID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5jb25zdCBTZXJ2ZXIgPSByZXF1aXJlKCcuLi9zZXJ2ZXInKTtcblxuY29uc3QgZ2V0TmFtZSA9ICgpID0+IHtcbiAgcmV0dXJuICdjYXRlZ29yeSc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAoY2F0ZWdvcnkpID0+IHtcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGRvIHtcbiAgICAgIHBhdGggPSBjYXRlZ29yeS5kaXIgKyAnLycgKyBwYXRoO1xuICAgICAgY2F0ZWdvcnkgPSBjYXRlZ29yeS5wYXJlbnQ7XG4gICAgfSB3aGlsZSAoY2F0ZWdvcnkpO1xuICAgIHBhdGguc3Vic3RyKDAsIHBhdGgubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIHNldChnZXROYW1lKCksIHBhdGgpO1xuICB9LFxuICBnZXQ6ICgpID0+IHtcbiAgICBsZXQgY2F0ZWdvcmllcyA9IFNlcnZlci5nZXRDYXRlZ29yaWVzKCk7XG4gICAgY29uc3QgZGlycyA9IGdldChnZXROYW1lKCkpLnNwbGl0KCcvJyk7XG4gICAgZm9yIChjb25zdCBkaXIgb2YgZGlycykge1xuICAgICAgY29uc3QgY2F0ZWdvcnkgPSAkLmdyZXAoY2F0ZWdvcmllcywgZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgIHJldHVybiBjYXRlZ29yeS5kaXIgPT0gZGlyO1xuICAgICAgfSlbMF07XG4gICAgICBjYXRlZ29yaWVzID0gY2F0ZWdvcnkuY2hpbGRyZW47XG4gICAgICBpZiAoIWNhdGVnb3JpZXMubGVuZ3RoKSByZXR1cm4gY2F0ZWdvcnk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59OyIsImNvbnN0IGxhbmd1YWdlID0gcmVxdWlyZSgnLi9sYW5ndWFnZScpO1xuY29uc3QgY2F0ZWdvcnkgPSByZXF1aXJlKCcuL2NhdGVnb3J5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsYW5ndWFnZSxcbiAgY2F0ZWdvcnlcbn07IiwiY29uc3Qge3NldCwgZ2V0fSA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuXG5jb25zdCBnZXROYW1lID0gaW5kZXggPT4ge1xuICByZXR1cm4gYGxhbmdfJHtpbmRleH1gO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogKGluZGV4LCBleHQpID0+IHtcbiAgICByZXR1cm4gc2V0KGdldE5hbWUoaW5kZXgpLCBleHQpO1xuICB9LFxuICBnZXQ6IChpbmRleCkgPT4ge1xuICAgIHJldHVybiBnZXQoZ2V0TmFtZShpbmRleCkpO1xuICB9XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgIGlmIChDb29raWVzLmdldChuYW1lKSA9PSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIENvb2tpZXMuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZ2V0OiBuYW1lID0+IHtcbiAgICByZXR1cm4gQ29va2llcy5nZXQobmFtZSk7XG4gIH0sXG4gIHJlbW92ZTogbmFtZSA9PiB7XG4gICAgQ29va2llcy5yZW1vdmUobmFtZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHppcDogKGNvZGUpID0+IHtcbiAgICByZXR1cm4gY29kZS50cmltKCkucmVwbGFjZSgvXlxccypbXFxyXFxuXS9nbSwgJycpLnJlcGxhY2UoL1xcYlxccytcXEIvZywgJycpLnJlcGxhY2UoL1xcQlxccytcXGIvZywgJycpLnJlcGxhY2UoL1xcQlxccytcXEIvZywgJycpO1xuICB9XG59OyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiFcbiAqIEBvdmVydmlldyBSU1ZQIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTYgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnNcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS90aWxkZWlvL3JzdnAuanMvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgMy4zLjNcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwuUlNWUCA9IGdsb2JhbC5SU1ZQIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpbmRleE9mKGNhbGxiYWNrcywgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGNhbGxiYWNrc1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tzRm9yKG9iamVjdCkge1xuICB2YXIgY2FsbGJhY2tzID0gb2JqZWN0Ll9wcm9taXNlQ2FsbGJhY2tzO1xuXG4gIGlmICghY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gb2JqZWN0Ll9wcm9taXNlQ2FsbGJhY2tzID0ge307XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2tzO1xufVxuXG4vKipcbiAgQGNsYXNzIFJTVlAuRXZlbnRUYXJnZXRcbiovXG52YXIgRXZlbnRUYXJnZXQgPSB7XG5cbiAgLyoqXG4gICAgYFJTVlAuRXZlbnRUYXJnZXQubWl4aW5gIGV4dGVuZHMgYW4gb2JqZWN0IHdpdGggRXZlbnRUYXJnZXQgbWV0aG9kcy4gRm9yXG4gICAgRXhhbXBsZTpcbiAgICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBvYmplY3QgPSB7fTtcbiAgICAgUlNWUC5FdmVudFRhcmdldC5taXhpbihvYmplY3QpO1xuICAgICBvYmplY3Qub24oJ2ZpbmlzaGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIGhhbmRsZSBldmVudFxuICAgIH0pO1xuICAgICBvYmplY3QudHJpZ2dlcignZmluaXNoZWQnLCB7IGRldGFpbDogdmFsdWUgfSk7XG4gICAgYGBgXG4gICAgIGBFdmVudFRhcmdldC5taXhpbmAgYWxzbyB3b3JrcyB3aXRoIHByb3RvdHlwZXM6XG4gICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgUGVyc29uID0gZnVuY3Rpb24oKSB7fTtcbiAgICBSU1ZQLkV2ZW50VGFyZ2V0Lm1peGluKFBlcnNvbi5wcm90b3R5cGUpO1xuICAgICBsZXQgeWVodWRhID0gbmV3IFBlcnNvbigpO1xuICAgIGxldCB0b20gPSBuZXcgUGVyc29uKCk7XG4gICAgIHllaHVkYS5vbigncG9rZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBjb25zb2xlLmxvZygnWWVodWRhIHNheXMgT1cnKTtcbiAgICB9KTtcbiAgICAgdG9tLm9uKCdwb2tlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdUb20gc2F5cyBPVycpO1xuICAgIH0pO1xuICAgICB5ZWh1ZGEudHJpZ2dlcigncG9rZScpO1xuICAgIHRvbS50cmlnZ2VyKCdwb2tlJyk7XG4gICAgYGBgXG4gICAgIEBtZXRob2QgbWl4aW5cbiAgICBAZm9yIFJTVlAuRXZlbnRUYXJnZXRcbiAgICBAcHJpdmF0ZVxuICAgIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb2JqZWN0IHRvIGV4dGVuZCB3aXRoIEV2ZW50VGFyZ2V0IG1ldGhvZHNcbiAgKi9cbiAgbWl4aW46IGZ1bmN0aW9uIG1peGluKG9iamVjdCkge1xuICAgIG9iamVjdFsnb24nXSA9IHRoaXNbJ29uJ107XG4gICAgb2JqZWN0WydvZmYnXSA9IHRoaXNbJ29mZiddO1xuICAgIG9iamVjdFsndHJpZ2dlciddID0gdGhpc1sndHJpZ2dlciddO1xuICAgIG9iamVjdC5fcHJvbWlzZUNhbGxiYWNrcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9LFxuXG4gIC8qKlxuICAgIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW4gYGV2ZW50TmFtZWAgaXMgdHJpZ2dlcmVkXG4gICAgIGBgYGphdmFzY3JpcHRcbiAgICBvYmplY3Qub24oJ2V2ZW50JywgZnVuY3Rpb24oZXZlbnRJbmZvKXtcbiAgICAgIC8vIGhhbmRsZSB0aGUgZXZlbnRcbiAgICB9KTtcbiAgICAgb2JqZWN0LnRyaWdnZXIoJ2V2ZW50Jyk7XG4gICAgYGBgXG4gICAgIEBtZXRob2Qgb25cbiAgICBAZm9yIFJTVlAuRXZlbnRUYXJnZXRcbiAgICBAcHJpdmF0ZVxuICAgIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvclxuICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICovXG4gIG9uOiBmdW5jdGlvbiBvbihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIGFsbENhbGxiYWNrcyA9IGNhbGxiYWNrc0Zvcih0aGlzKSxcbiAgICAgICAgY2FsbGJhY2tzID0gdW5kZWZpbmVkO1xuXG4gICAgY2FsbGJhY2tzID0gYWxsQ2FsbGJhY2tzW2V2ZW50TmFtZV07XG5cbiAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgY2FsbGJhY2tzID0gYWxsQ2FsbGJhY2tzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXhPZihjYWxsYmFja3MsIGNhbGxiYWNrKSA9PT0gLTEpIHtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAgWW91IGNhbiB1c2UgYG9mZmAgdG8gc3RvcCBmaXJpbmcgYSBwYXJ0aWN1bGFyIGNhbGxiYWNrIGZvciBhbiBldmVudDpcbiAgICAgYGBgamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIGRvU3R1ZmYoKSB7IC8vIGRvIHN0dWZmISB9XG4gICAgb2JqZWN0Lm9uKCdzdHVmZicsIGRvU3R1ZmYpO1xuICAgICBvYmplY3QudHJpZ2dlcignc3R1ZmYnKTsgLy8gZG9TdHVmZiB3aWxsIGJlIGNhbGxlZFxuICAgICAvLyBVbnJlZ2lzdGVyIE9OTFkgdGhlIGRvU3R1ZmYgY2FsbGJhY2tcbiAgICBvYmplY3Qub2ZmKCdzdHVmZicsIGRvU3R1ZmYpO1xuICAgIG9iamVjdC50cmlnZ2VyKCdzdHVmZicpOyAvLyBkb1N0dWZmIHdpbGwgTk9UIGJlIGNhbGxlZFxuICAgIGBgYFxuICAgICBJZiB5b3UgZG9uJ3QgcGFzcyBhIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYG9mZmAsIEFMTCBjYWxsYmFja3MgZm9yIHRoZVxuICAgIGV2ZW50IHdpbGwgbm90IGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IGZpcmVzLiBGb3IgZXhhbXBsZTpcbiAgICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBjYWxsYmFjazEgPSBmdW5jdGlvbigpe307XG4gICAgbGV0IGNhbGxiYWNrMiA9IGZ1bmN0aW9uKCl7fTtcbiAgICAgb2JqZWN0Lm9uKCdzdHVmZicsIGNhbGxiYWNrMSk7XG4gICAgb2JqZWN0Lm9uKCdzdHVmZicsIGNhbGxiYWNrMik7XG4gICAgIG9iamVjdC50cmlnZ2VyKCdzdHVmZicpOyAvLyBjYWxsYmFjazEgYW5kIGNhbGxiYWNrMiB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgICBvYmplY3Qub2ZmKCdzdHVmZicpO1xuICAgIG9iamVjdC50cmlnZ2VyKCdzdHVmZicpOyAvLyBjYWxsYmFjazEgYW5kIGNhbGxiYWNrMiB3aWxsIG5vdCBiZSBleGVjdXRlZCFcbiAgICBgYGBcbiAgICAgQG1ldGhvZCBvZmZcbiAgICBAZm9yIFJTVlAuRXZlbnRUYXJnZXRcbiAgICBAcHJpdmF0ZVxuICAgIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgZXZlbnQgdG8gc3RvcCBsaXN0ZW5pbmcgdG9cbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBvcHRpb25hbCBhcmd1bWVudC4gSWYgZ2l2ZW4sIG9ubHkgdGhlIGZ1bmN0aW9uXG4gICAgZ2l2ZW4gd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGV2ZW50J3MgY2FsbGJhY2sgcXVldWUuIElmIG5vIGBjYWxsYmFja2BcbiAgICBhcmd1bWVudCBpcyBnaXZlbiwgYWxsIGNhbGxiYWNrcyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZXZlbnQncyBjYWxsYmFja1xuICAgIHF1ZXVlLlxuICAqL1xuICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGFsbENhbGxiYWNrcyA9IGNhbGxiYWNrc0Zvcih0aGlzKSxcbiAgICAgICAgY2FsbGJhY2tzID0gdW5kZWZpbmVkLFxuICAgICAgICBpbmRleCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGFsbENhbGxiYWNrc1tldmVudE5hbWVdID0gW107XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzID0gYWxsQ2FsbGJhY2tzW2V2ZW50TmFtZV07XG5cbiAgICBpbmRleCA9IGluZGV4T2YoY2FsbGJhY2tzLCBjYWxsYmFjayk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAgVXNlIGB0cmlnZ2VyYCB0byBmaXJlIGN1c3RvbSBldmVudHMuIEZvciBleGFtcGxlOlxuICAgICBgYGBqYXZhc2NyaXB0XG4gICAgb2JqZWN0Lm9uKCdmb28nLCBmdW5jdGlvbigpe1xuICAgICAgY29uc29sZS5sb2coJ2ZvbyBldmVudCBoYXBwZW5lZCEnKTtcbiAgICB9KTtcbiAgICBvYmplY3QudHJpZ2dlcignZm9vJyk7XG4gICAgLy8gJ2ZvbyBldmVudCBoYXBwZW5lZCEnIGxvZ2dlZCB0byB0aGUgY29uc29sZVxuICAgIGBgYFxuICAgICBZb3UgY2FuIGFsc28gcGFzcyBhIHZhbHVlIGFzIGEgc2Vjb25kIGFyZ3VtZW50IHRvIGB0cmlnZ2VyYCB0aGF0IHdpbGwgYmVcbiAgICBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gYWxsIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50OlxuICAgICBgYGBqYXZhc2NyaXB0XG4gICAgb2JqZWN0Lm9uKCdmb28nLCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBjb25zb2xlLmxvZyh2YWx1ZS5uYW1lKTtcbiAgICB9KTtcbiAgICAgb2JqZWN0LnRyaWdnZXIoJ2ZvbycsIHsgbmFtZTogJ2JhcicgfSk7XG4gICAgLy8gJ2JhcicgbG9nZ2VkIHRvIHRoZSBjb25zb2xlXG4gICAgYGBgXG4gICAgIEBtZXRob2QgdHJpZ2dlclxuICAgIEBmb3IgUlNWUC5FdmVudFRhcmdldFxuICAgIEBwcml2YXRlXG4gICAgQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBuYW1lIG9mIHRoZSBldmVudCB0byBiZSB0cmlnZ2VyZWRcbiAgICBAcGFyYW0geyp9IG9wdGlvbnMgb3B0aW9uYWwgdmFsdWUgdG8gYmUgcGFzc2VkIHRvIGFueSBldmVudCBoYW5kbGVycyBmb3JcbiAgICB0aGUgZ2l2ZW4gYGV2ZW50TmFtZWBcbiAgKi9cbiAgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcihldmVudE5hbWUsIG9wdGlvbnMsIGxhYmVsKSB7XG4gICAgdmFyIGFsbENhbGxiYWNrcyA9IGNhbGxiYWNrc0Zvcih0aGlzKSxcbiAgICAgICAgY2FsbGJhY2tzID0gdW5kZWZpbmVkLFxuICAgICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChjYWxsYmFja3MgPSBhbGxDYWxsYmFja3NbZXZlbnROYW1lXSkge1xuICAgICAgLy8gRG9uJ3QgY2FjaGUgdGhlIGNhbGxiYWNrcy5sZW5ndGggc2luY2UgaXQgbWF5IGdyb3dcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldO1xuXG4gICAgICAgIGNhbGxiYWNrKG9wdGlvbnMsIGxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBjb25maWcgPSB7XG4gIGluc3RydW1lbnQ6IGZhbHNlXG59O1xuXG5FdmVudFRhcmdldFsnbWl4aW4nXShjb25maWcpO1xuXG5mdW5jdGlvbiBjb25maWd1cmUobmFtZSwgdmFsdWUpIHtcbiAgaWYgKG5hbWUgPT09ICdvbmVycm9yJykge1xuICAgIC8vIGhhbmRsZSBmb3IgbGVnYWN5IHVzZXJzIHRoYXQgZXhwZWN0IHRoZSBhY3R1YWxcbiAgICAvLyBlcnJvciB0byBiZSBwYXNzZWQgdG8gdGhlaXIgZnVuY3Rpb24gYWRkZWQgdmlhXG4gICAgLy8gYFJTVlAuY29uZmlndXJlKCdvbmVycm9yJywgc29tZUZ1bmN0aW9uSGVyZSk7YFxuICAgIGNvbmZpZ1snb24nXSgnZXJyb3InLCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICBjb25maWdbbmFtZV0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uZmlnW25hbWVdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTWF5YmVUaGVuYWJsZSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbn1cblxudmFyIF9pc0FycmF5ID0gdW5kZWZpbmVkO1xuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG4vLyBEYXRlLm5vdyBpcyBub3QgYXZhaWxhYmxlIGluIGJyb3dzZXJzIDwgSUU5XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL25vdyNDb21wYXRpYmlsaXR5XG52YXIgbm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59O1xuXG5mdW5jdGlvbiBGKCkge31cblxudmFyIG9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiAobykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBub3Qgc3VwcG9ydGVkJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgRi5wcm90b3R5cGUgPSBvO1xuICByZXR1cm4gbmV3IEYoKTtcbn07XG5cbnZhciBxdWV1ZSA9IFtdO1xuXG5mdW5jdGlvbiBzY2hlZHVsZUZsdXNoKCkge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZW50cnkgPSBxdWV1ZVtpXTtcblxuICAgICAgdmFyIHBheWxvYWQgPSBlbnRyeS5wYXlsb2FkO1xuXG4gICAgICBwYXlsb2FkLmd1aWQgPSBwYXlsb2FkLmtleSArIHBheWxvYWQuaWQ7XG4gICAgICBwYXlsb2FkLmNoaWxkR3VpZCA9IHBheWxvYWQua2V5ICsgcGF5bG9hZC5jaGlsZElkO1xuICAgICAgaWYgKHBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgcGF5bG9hZC5zdGFjayA9IHBheWxvYWQuZXJyb3Iuc3RhY2s7XG4gICAgICB9XG5cbiAgICAgIGNvbmZpZ1sndHJpZ2dlciddKGVudHJ5Lm5hbWUsIGVudHJ5LnBheWxvYWQpO1xuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICB9LCA1MCk7XG59XG5mdW5jdGlvbiBpbnN0cnVtZW50KGV2ZW50TmFtZSwgcHJvbWlzZSwgY2hpbGQpIHtcbiAgaWYgKDEgPT09IHF1ZXVlLnB1c2goe1xuICAgIG5hbWU6IGV2ZW50TmFtZSxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBrZXk6IHByb21pc2UuX2d1aWRLZXksXG4gICAgICBpZDogcHJvbWlzZS5faWQsXG4gICAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICAgIGRldGFpbDogcHJvbWlzZS5fcmVzdWx0LFxuICAgICAgY2hpbGRJZDogY2hpbGQgJiYgY2hpbGQuX2lkLFxuICAgICAgbGFiZWw6IHByb21pc2UuX2xhYmVsLFxuICAgICAgdGltZVN0YW1wOiBub3coKSxcbiAgICAgIGVycm9yOiBjb25maWdbXCJpbnN0cnVtZW50LXdpdGgtc3RhY2tcIl0gPyBuZXcgRXJyb3IocHJvbWlzZS5fbGFiZWwpIDogbnVsbFxuICAgIH0gfSkpIHtcbiAgICBzY2hlZHVsZUZsdXNoKCk7XG4gIH1cbn1cblxuLyoqXG4gIGBSU1ZQLlByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZVxuICBwYXNzZWQgYHZhbHVlYC4gSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBSU1ZQLlByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0geyp9IG9iamVjdCB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aFxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBpZGVudGlmeWluZyB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUkMShvYmplY3QsIGxhYmVsKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3AsIGxhYmVsKTtcbiAgcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gd2l0aE93blByb21pc2UoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgUEVORElORyA9IHZvaWQgMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcblxudmFyIEdFVF9USEVOX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIGdldFRoZW4ocHJvbWlzZSkge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICByZXR1cm4gR0VUX1RIRU5fRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gIGNvbmZpZy5hc3luYyhmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICB0aGVuYWJsZS5fb25FcnJvciA9IG51bGw7XG4gICAgcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQgPT09IHRoZW4gJiYgcHJvbWlzZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlJDEpIHtcbiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhlbiQkID09PSBHRVRfVEhFTl9FUlJPUikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIGdldFRoZW4odmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX29uRXJyb3IpIHtcbiAgICBwcm9taXNlLl9vbkVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gIH1cblxuICBwdWJsaXNoKHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDtcblxuICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGNvbmZpZy5pbnN0cnVtZW50KSB7XG4gICAgICBpbnN0cnVtZW50KCdmdWxmaWxsZWQnLCBwcm9taXNlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLmFzeW5jKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcbiAgY29uZmlnLmFzeW5jKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IHN1YnNjcmliZXJzLmxlbmd0aDtcblxuICBwYXJlbnQuX29uRXJyb3IgPSBudWxsO1xuXG4gIHN1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIHN1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGNvbmZpZy5hc3luYyhwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoY29uZmlnLmluc3RydW1lbnQpIHtcbiAgICBpbnN0cnVtZW50KHNldHRsZWQgPT09IEZVTEZJTExFRCA/ICdmdWxmaWxsZWQnIDogJ3JlamVjdGVkJywgcHJvbWlzZSk7XG4gIH1cblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgd2l0aE93blByb21pc2UoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZGV0YWlsO1xuICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gIH1cblxuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAvLyBub29wXG4gIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgICAgcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uLCBsYWJlbCkge1xuICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICB2YXIgcGFyZW50ID0gdGhpcztcbiAgdmFyIHN0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICBpZiAoc3RhdGUgPT09IEZVTEZJTExFRCAmJiAhb25GdWxmaWxsbWVudCB8fCBzdGF0ZSA9PT0gUkVKRUNURUQgJiYgIW9uUmVqZWN0aW9uKSB7XG4gICAgY29uZmlnLmluc3RydW1lbnQgJiYgaW5zdHJ1bWVudCgnY2hhaW5lZCcsIHBhcmVudCwgcGFyZW50KTtcbiAgICByZXR1cm4gcGFyZW50O1xuICB9XG5cbiAgcGFyZW50Ll9vbkVycm9yID0gbnVsbDtcblxuICB2YXIgY2hpbGQgPSBuZXcgcGFyZW50LmNvbnN0cnVjdG9yKG5vb3AsIGxhYmVsKTtcbiAgdmFyIHJlc3VsdCA9IHBhcmVudC5fcmVzdWx0O1xuXG4gIGNvbmZpZy5pbnN0cnVtZW50ICYmIGluc3RydW1lbnQoJ2NoYWluZWQnLCBwYXJlbnQsIGNoaWxkKTtcblxuICBpZiAoc3RhdGUpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tzdGF0ZSAtIDFdO1xuICAgICAgY29uZmlnLmFzeW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKHN0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VTZXR0bGVkUmVzdWx0KHN0YXRlLCBwb3NpdGlvbiwgdmFsdWUpIHtcbiAgaWYgKHN0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdmdWxmaWxsZWQnLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdyZWplY3RlZCcsXG4gICAgICByZWFzb246IHZhbHVlXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCwgYWJvcnRPblJlamVjdCwgbGFiZWwpIHtcbiAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCwgbGFiZWwpO1xuICB0aGlzLl9hYm9ydE9uUmVqZWN0ID0gYWJvcnRPblJlamVjdDtcblxuICBpZiAodGhpcy5fdmFsaWRhdGVJbnB1dChpbnB1dCkpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZSgpO1xuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KHRoaXMucHJvbWlzZSwgdGhpcy5fdmFsaWRhdGlvbkVycm9yKCkpO1xuICB9XG59XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBpc0FycmF5KGlucHV0KTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuICB2YXIgaW5wdXQgPSB0aGlzLl9pbnB1dDtcblxuICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZU1heWJlVGhlbmFibGUgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICB2YXIgcmVzb2x2ZSA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgdmFyIHRoZW4kJCA9IGdldFRoZW4oZW50cnkpO1xuXG4gICAgaWYgKHRoZW4kJCA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgIGVudHJ5Ll9vbkVycm9yID0gbnVsbDtcbiAgICAgIHRoaXMuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoZW4kJCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSB0aGlzLl9tYWtlUmVzdWx0KEZVTEZJTExFRCwgaSwgZW50cnkpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSkge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhub29wKTtcbiAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIHRoZW4kJCk7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShlbnRyeSk7XG4gICAgICB9KSwgaSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlKGVudHJ5KSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgaWYgKGlzTWF5YmVUaGVuYWJsZShlbnRyeSkpIHtcbiAgICB0aGlzLl9zZXR0bGVNYXliZVRoZW5hYmxlKGVudHJ5LCBpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcbiAgICB0aGlzLl9yZXN1bHRbaV0gPSB0aGlzLl9tYWtlUmVzdWx0KEZVTEZJTExFRCwgaSwgZW50cnkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmICh0aGlzLl9hYm9ydE9uUmVqZWN0ICYmIHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdGhpcy5fbWFrZVJlc3VsdChzdGF0ZSwgaSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9tYWtlUmVzdWx0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gKHByb21pc2UsIGkpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICB9KTtcbn07XG5cbi8qKlxuICBgUlNWUC5Qcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gUlNWUC5yZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLnJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFJTVlAuUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBSU1ZQLmFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBSU1ZQLnJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IFJTVlAucmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUlNWUC5Qcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMsIGxhYmVsKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzLCB0cnVlLCAvKiBhYm9ydCBvbiByZWplY3QgKi9sYWJlbCkucHJvbWlzZTtcbn1cblxuLyoqXG4gIGBSU1ZQLlByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBSU1ZQLlByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAyJyk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUlNWUC5Qcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBSU1ZQLlByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFJTVlAuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBSU1ZQLlByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFJTVlAuUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSlcbiAgYGBgXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGRlc2NyaWJpbmcgdGhlIHByb21pc2UgcmV0dXJuZWQuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzLCBsYWJlbCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3AsIGxhYmVsKTtcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZWplY3QocHJvbWlzZSwgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIHN1YnNjcmliZShDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG4vKipcbiAgYFJTVlAuUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBSU1ZQLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7Kn0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBpZGVudGlmeWluZyB0aGUgcmV0dXJuZWQgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0JDEocmVhc29uLCBsYWJlbCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wLCBsYWJlbCk7XG4gIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIGd1aWRLZXkgPSAncnN2cF8nICsgbm93KCkgKyAnLSc7XG52YXIgY291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNl4oCZcyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFJTVlAuUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyLCBsYWJlbCkge1xuICB0aGlzLl9pZCA9IGNvdW50ZXIrKztcbiAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBjb25maWcuaW5zdHJ1bWVudCAmJiBpbnN0cnVtZW50KCdjcmVhdGVkJywgdGhpcyk7XG5cbiAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZS5jYXN0ID0gcmVzb2x2ZSQxOyAvLyBkZXByZWNhdGVkXG5Qcm9taXNlLmFsbCA9IGFsbDtcblByb21pc2UucmFjZSA9IHJhY2U7XG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlJDE7XG5Qcm9taXNlLnJlamVjdCA9IHJlamVjdCQxO1xuXG5Qcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFByb21pc2UsXG5cbiAgX2d1aWRLZXk6IGd1aWRLZXksXG5cbiAgX29uRXJyb3I6IGZ1bmN0aW9uIF9vbkVycm9yKHJlYXNvbikge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICBjb25maWcuYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21pc2UuX29uRXJyb3IpIHtcbiAgICAgICAgY29uZmlnWyd0cmlnZ2VyJ10oJ2Vycm9yJywgcmVhc29uLCBwcm9taXNlLl9sYWJlbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZVxcJ3JlIHVuaGFwcHknKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZVxcJ3JlIHVuaGFwcHknLlxuICAgIH0pO1xuICAgIGBgYFxuICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBc3NpbWlsYXRpb25cbiAgICAtLS0tLS0tLS0tLS1cbiAgXG4gICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgU2ltcGxlIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgcmVzdWx0O1xuICBcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgYXV0aG9yLCBib29rcztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICBcbiAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgXG4gICAgfVxuICBcbiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRBdXRob3IoKS5cbiAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgdGhlblxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbG1lbnRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICB0aGVuOiB0aGVuLFxuXG4gIC8qKlxuICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBcbiAgICBgYGBqc1xuICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuXFwndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uLCBsYWJlbCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbiwgbGFiZWwpO1xuICB9LFxuXG4gIC8qKlxuICAgIGBmaW5hbGx5YCB3aWxsIGJlIGludm9rZWQgcmVnYXJkbGVzcyBvZiB0aGUgcHJvbWlzZSdzIGZhdGUganVzdCBhcyBuYXRpdmVcbiAgICB0cnkvY2F0Y2gvZmluYWxseSBiZWhhdmVzXG4gIFxuICAgIFN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpIHtcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBBdXRob3IoKTtcbiAgICB9XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZmluZEF1dGhvcigpOyAvLyBzdWNjZWVkIG9yIGZhaWxcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIGFsd2F5cyBydW5zXG4gICAgICAvLyBkb2Vzbid0IGFmZmVjdCB0aGUgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBBc3luY2hyb25vdXMgZXhhbXBsZTpcbiAgXG4gICAgYGBganNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIHJldHVybiBmaW5kT3RoZXJBdXRoZXIoKTtcbiAgICB9KS5maW5hbGx5KGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhdXRob3Igd2FzIGVpdGhlciBmb3VuZCwgb3Igbm90XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgZmluYWxseVxuICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdmaW5hbGx5JzogZnVuY3Rpb24gX2ZpbmFsbHkoY2FsbGJhY2ssIGxhYmVsKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3I7XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICB9KTtcbiAgICB9LCBsYWJlbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJlc3VsdCgpIHtcbiAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIEVSUk9SID0gbmV3IFJlc3VsdCgpO1xudmFyIEdFVF9USEVOX0VSUk9SJDEgPSBuZXcgUmVzdWx0KCk7XG5cbmZ1bmN0aW9uIGdldFRoZW4kMShvYmopIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gb2JqLnRoZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgRVJST1IudmFsdWUgPSBlcnJvcjtcbiAgICByZXR1cm4gRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5QXBwbHkoZiwgcywgYSkge1xuICB0cnkge1xuICAgIGYuYXBwbHkocywgYSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgRVJST1IudmFsdWUgPSBlcnJvcjtcbiAgICByZXR1cm4gRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZU9iamVjdChfLCBhcmd1bWVudE5hbWVzKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgdmFyIGxlbmd0aCA9IF8ubGVuZ3RoO1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShsZW5ndGgpO1xuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgbGVuZ3RoOyB4KyspIHtcbiAgICBhcmdzW3hdID0gX1t4XTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfbmFtZSA9IGFyZ3VtZW50TmFtZXNbaV07XG4gICAgb2JqW19uYW1lXSA9IGFyZ3NbaSArIDFdO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gYXJyYXlSZXN1bHQoXykge1xuICB2YXIgbGVuZ3RoID0gXy5sZW5ndGg7XG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGxlbmd0aCAtIDEpO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzW2kgLSAxXSA9IF9baV07XG4gIH1cblxuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gd3JhcFRoZW5hYmxlKF90aGVuLCBwcm9taXNlKSB7XG4gIHJldHVybiB7XG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bEZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgcmV0dXJuIF90aGVuLmNhbGwocHJvbWlzZSwgb25GdWxGaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gIGBSU1ZQLmRlbm9kZWlmeWAgdGFrZXMgYSAnbm9kZS1zdHlsZScgZnVuY3Rpb24gYW5kIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0XG4gIHdpbGwgcmV0dXJuIGFuIGBSU1ZQLlByb21pc2VgLiBZb3UgY2FuIHVzZSBgZGVub2RlaWZ5YCBpbiBOb2RlLmpzIG9yIHRoZVxuICBicm93c2VyIHdoZW4geW91J2QgcHJlZmVyIHRvIHVzZSBwcm9taXNlcyBvdmVyIHVzaW5nIGNhbGxiYWNrcy4gRm9yIGV4YW1wbGUsXG4gIGBkZW5vZGVpZnlgIHRyYW5zZm9ybXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbiAgZnMucmVhZEZpbGUoJ215ZmlsZS50eHQnLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuICAgIGlmIChlcnIpIHJldHVybiBoYW5kbGVFcnJvcihlcnIpO1xuICAgIGhhbmRsZURhdGEoZGF0YSk7XG4gIH0pO1xuICBgYGBcblxuICBpbnRvOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgbGV0IHJlYWRGaWxlID0gUlNWUC5kZW5vZGVpZnkoZnMucmVhZEZpbGUpO1xuXG4gIHJlYWRGaWxlKCdteWZpbGUudHh0JykudGhlbihoYW5kbGVEYXRhLCBoYW5kbGVFcnJvcik7XG4gIGBgYFxuXG4gIElmIHRoZSBub2RlIGZ1bmN0aW9uIGhhcyBtdWx0aXBsZSBzdWNjZXNzIHBhcmFtZXRlcnMsIHRoZW4gYGRlbm9kZWlmeWBcbiAganVzdCByZXR1cm5zIHRoZSBmaXJzdCBvbmU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcmVxdWVzdCA9IFJTVlAuZGVub2RlaWZ5KHJlcXVpcmUoJ3JlcXVlc3QnKSk7XG5cbiAgcmVxdWVzdCgnaHR0cDovL2V4YW1wbGUuY29tJykudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAvLyAuLi5cbiAgfSk7XG4gIGBgYFxuXG4gIEhvd2V2ZXIsIGlmIHlvdSBuZWVkIGFsbCBzdWNjZXNzIHBhcmFtZXRlcnMsIHNldHRpbmcgYGRlbm9kZWlmeWAnc1xuICBzZWNvbmQgcGFyYW1ldGVyIHRvIGB0cnVlYCBjYXVzZXMgaXQgdG8gcmV0dXJuIGFsbCBzdWNjZXNzIHBhcmFtZXRlcnNcbiAgYXMgYW4gYXJyYXk6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcmVxdWVzdCA9IFJTVlAuZGVub2RlaWZ5KHJlcXVpcmUoJ3JlcXVlc3QnKSwgdHJ1ZSk7XG5cbiAgcmVxdWVzdCgnaHR0cDovL2V4YW1wbGUuY29tJykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAvLyByZXN1bHRbMF0gLT4gcmVzXG4gICAgLy8gcmVzdWx0WzFdIC0+IGJvZHlcbiAgfSk7XG4gIGBgYFxuXG4gIE9yIGlmIHlvdSBwYXNzIGl0IGFuIGFycmF5IHdpdGggbmFtZXMgaXQgcmV0dXJucyB0aGUgcGFyYW1ldGVycyBhcyBhIGhhc2g6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcmVxdWVzdCA9IFJTVlAuZGVub2RlaWZ5KHJlcXVpcmUoJ3JlcXVlc3QnKSwgWydyZXMnLCAnYm9keSddKTtcblxuICByZXF1ZXN0KCdodHRwOi8vZXhhbXBsZS5jb20nKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgIC8vIHJlc3VsdC5yZXNcbiAgICAvLyByZXN1bHQuYm9keVxuICB9KTtcbiAgYGBgXG5cbiAgU29tZXRpbWVzIHlvdSBuZWVkIHRvIHJldGFpbiB0aGUgYHRoaXNgOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IGFwcCA9IHJlcXVpcmUoJ2V4cHJlc3MnKSgpO1xuICBsZXQgcmVuZGVyID0gUlNWUC5kZW5vZGVpZnkoYXBwLnJlbmRlci5iaW5kKGFwcCkpO1xuICBgYGBcblxuICBUaGUgZGVub2RpZmllZCBmdW5jdGlvbiBpbmhlcml0cyBmcm9tIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi4gSXQgd29ya3MgaW4gYWxsXG4gIGVudmlyb25tZW50cywgZXhjZXB0IElFIDEwIGFuZCBiZWxvdy4gQ29uc2VxdWVudGx5IGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbFxuICBmdW5jdGlvbiBhcmUgYXZhaWxhYmxlIHRvIHlvdS4gSG93ZXZlciwgYW55IHByb3BlcnRpZXMgeW91IGNoYW5nZSBvbiB0aGVcbiAgZGVub2RlaWZpZWQgZnVuY3Rpb24gd29uJ3QgYmUgY2hhbmdlZCBvbiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcmVxdWVzdCA9IFJTVlAuZGVub2RlaWZ5KHJlcXVpcmUoJ3JlcXVlc3QnKSksXG4gICAgICBjb29raWVKYXIgPSByZXF1ZXN0LmphcigpOyAvLyA8LSBJbmhlcml0YW5jZSBpcyB1c2VkIGhlcmVcblxuICByZXF1ZXN0KCdodHRwOi8vZXhhbXBsZS5jb20nLCB7amFyOiBjb29raWVKYXJ9KS50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgIC8vIGNvb2tpZUphci5jb29raWVzIGhvbGRzIG5vdyB0aGUgY29va2llcyByZXR1cm5lZCBieSBleGFtcGxlLmNvbVxuICB9KTtcbiAgYGBgXG5cbiAgVXNpbmcgYGRlbm9kZWlmeWAgbWFrZXMgaXQgZWFzaWVyIHRvIGNvbXBvc2UgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgaW5zdGVhZFxuICBvZiB1c2luZyBjYWxsYmFja3MuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuICBmcy5yZWFkRmlsZSgnbXlmaWxlLnR4dCcsIGZ1bmN0aW9uKGVyciwgZGF0YSl7XG4gICAgaWYgKGVycikgeyAuLi4gfSAvLyBIYW5kbGUgZXJyb3JcbiAgICBmcy53cml0ZUZpbGUoJ215ZmlsZTIudHh0JywgZGF0YSwgZnVuY3Rpb24oZXJyKXtcbiAgICAgIGlmIChlcnIpIHsgLi4uIH0gLy8gSGFuZGxlIGVycm9yXG4gICAgICBjb25zb2xlLmxvZygnZG9uZScpXG4gICAgfSk7XG4gIH0pO1xuICBgYGBcblxuICB5b3UgY2FuIGNoYWluIHRoZSBvcGVyYXRpb25zIHRvZ2V0aGVyIHVzaW5nIGB0aGVuYCBmcm9tIHRoZSByZXR1cm5lZCBwcm9taXNlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgbGV0IHJlYWRGaWxlID0gUlNWUC5kZW5vZGVpZnkoZnMucmVhZEZpbGUpO1xuICBsZXQgd3JpdGVGaWxlID0gUlNWUC5kZW5vZGVpZnkoZnMud3JpdGVGaWxlKTtcblxuICByZWFkRmlsZSgnbXlmaWxlLnR4dCcpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgcmV0dXJuIHdyaXRlRmlsZSgnbXlmaWxlMi50eHQnLCBkYXRhKTtcbiAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgIGNvbnNvbGUubG9nKCdkb25lJylcbiAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgIC8vIEhhbmRsZSBlcnJvclxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBkZW5vZGVpZnlcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtGdW5jdGlvbn0gbm9kZUZ1bmMgYSAnbm9kZS1zdHlsZScgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGNhbGxiYWNrIGFzXG4gIGl0cyBsYXN0IGFyZ3VtZW50LiBUaGUgY2FsbGJhY2sgZXhwZWN0cyBhbiBlcnJvciB0byBiZSBwYXNzZWQgYXMgaXRzIGZpcnN0XG4gIGFyZ3VtZW50IChpZiBhbiBlcnJvciBvY2N1cnJlZCwgb3RoZXJ3aXNlIG51bGwpLCBhbmQgdGhlIHZhbHVlIGZyb20gdGhlXG4gIG9wZXJhdGlvbiBhcyBpdHMgc2Vjb25kIGFyZ3VtZW50ICgnZnVuY3Rpb24oZXJyLCB2YWx1ZSl7IH0nKS5cbiAgQHBhcmFtIHtCb29sZWFufEFycmF5fSBbb3B0aW9uc10gQW4gb3B0aW9uYWwgcGFyYW10ZXIgdGhhdCBpZiBzZXRcbiAgdG8gYHRydWVgIGNhdXNlcyB0aGUgcHJvbWlzZSB0byBmdWxmaWxsIHdpdGggdGhlIGNhbGxiYWNrJ3Mgc3VjY2VzcyBhcmd1bWVudHNcbiAgYXMgYW4gYXJyYXkuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBub2RlIGZ1bmN0aW9uIGhhcyBtdWx0aXBsZSBzdWNjZXNzXG4gIHBhcmFtdGVycy4gSWYgeW91IHNldCB0aGlzIHBhcmFtdGVyIHRvIGFuIGFycmF5IHdpdGggbmFtZXMsIHRoZSBwcm9taXNlIHdpbGxcbiAgZnVsZmlsbCB3aXRoIGEgaGFzaCB3aXRoIHRoZXNlIG5hbWVzIGFzIGtleXMgYW5kIHRoZSBzdWNjZXNzIHBhcmFtZXRlcnMgYXNcbiAgdmFsdWVzLlxuICBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBub2RlRnVuY2AgdG8gcmV0dXJuIGFuXG4gIGBSU1ZQLlByb21pc2VgXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBkZW5vZGVpZnkobm9kZUZ1bmMsIG9wdGlvbnMpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShsICsgMSk7XG4gICAgdmFyIHByb21pc2VJbnB1dCA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyArK2kpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGlmICghcHJvbWlzZUlucHV0KSB7XG4gICAgICAgIC8vIFRPRE86IGNsZWFuIHRoaXMgdXBcbiAgICAgICAgcHJvbWlzZUlucHV0ID0gbmVlZHNQcm9taXNlSW5wdXQoYXJnKTtcbiAgICAgICAgaWYgKHByb21pc2VJbnB1dCA9PT0gR0VUX1RIRU5fRVJST1IkMSkge1xuICAgICAgICAgIHZhciBwID0gbmV3IFByb21pc2Uobm9vcCk7XG4gICAgICAgICAgcmVqZWN0KHAsIEdFVF9USEVOX0VSUk9SJDEudmFsdWUpO1xuICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9IGVsc2UgaWYgKHByb21pc2VJbnB1dCAmJiBwcm9taXNlSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICBhcmcgPSB3cmFwVGhlbmFibGUocHJvbWlzZUlucHV0LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcmdzW2ldID0gYXJnO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2Uobm9vcCk7XG5cbiAgICBhcmdzW2xdID0gZnVuY3Rpb24gKGVyciwgdmFsKSB7XG4gICAgICBpZiAoZXJyKSByZWplY3QocHJvbWlzZSwgZXJyKTtlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHJlc29sdmUocHJvbWlzZSwgdmFsKTtlbHNlIGlmIChvcHRpb25zID09PSB0cnVlKSByZXNvbHZlKHByb21pc2UsIGFycmF5UmVzdWx0KGFyZ3VtZW50cykpO2Vsc2UgaWYgKGlzQXJyYXkob3B0aW9ucykpIHJlc29sdmUocHJvbWlzZSwgbWFrZU9iamVjdChhcmd1bWVudHMsIG9wdGlvbnMpKTtlbHNlIHJlc29sdmUocHJvbWlzZSwgdmFsKTtcbiAgICB9O1xuXG4gICAgaWYgKHByb21pc2VJbnB1dCkge1xuICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2VJbnB1dChwcm9taXNlLCBhcmdzLCBub2RlRnVuYywgc2VsZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYW5kbGVWYWx1ZUlucHV0KHByb21pc2UsIGFyZ3MsIG5vZGVGdW5jLCBzZWxmKTtcbiAgICB9XG4gIH07XG5cbiAgZm4uX19wcm90b19fID0gbm9kZUZ1bmM7XG5cbiAgcmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWYWx1ZUlucHV0KHByb21pc2UsIGFyZ3MsIG5vZGVGdW5jLCBzZWxmKSB7XG4gIHZhciByZXN1bHQgPSB0cnlBcHBseShub2RlRnVuYywgc2VsZiwgYXJncyk7XG4gIGlmIChyZXN1bHQgPT09IEVSUk9SKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByb21pc2VJbnB1dChwcm9taXNlLCBhcmdzLCBub2RlRnVuYywgc2VsZikge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoYXJncykudGhlbihmdW5jdGlvbiAoYXJncykge1xuICAgIHZhciByZXN1bHQgPSB0cnlBcHBseShub2RlRnVuYywgc2VsZiwgYXJncyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gRVJST1IpIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCByZXN1bHQudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUHJvbWlzZUlucHV0KGFyZykge1xuICBpZiAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXRUaGVuJDEoYXJnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICBUaGlzIGlzIGEgY29udmVuaWVudCBhbGlhcyBmb3IgYFJTVlAuUHJvbWlzZS5hbGxgLlxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IG9mIHByb21pc2VzLlxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgQW4gb3B0aW9uYWwgbGFiZWwuIFRoaXMgaXMgdXNlZnVsXG4gIGZvciB0b29saW5nLlxuKi9cbmZ1bmN0aW9uIGFsbCQxKGFycmF5LCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoYXJyYXksIGxhYmVsKTtcbn1cblxuZnVuY3Rpb24gQWxsU2V0dGxlZChDb25zdHJ1Y3RvciwgZW50cmllcywgbGFiZWwpIHtcbiAgdGhpcy5fc3VwZXJDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvciwgZW50cmllcywgZmFsc2UsIC8qIGRvbid0IGFib3J0IG9uIHJlamVjdCAqL2xhYmVsKTtcbn1cblxuQWxsU2V0dGxlZC5wcm90b3R5cGUgPSBvX2NyZWF0ZShFbnVtZXJhdG9yLnByb3RvdHlwZSk7XG5BbGxTZXR0bGVkLnByb3RvdHlwZS5fc3VwZXJDb25zdHJ1Y3RvciA9IEVudW1lcmF0b3I7XG5BbGxTZXR0bGVkLnByb3RvdHlwZS5fbWFrZVJlc3VsdCA9IG1ha2VTZXR0bGVkUmVzdWx0O1xuQWxsU2V0dGxlZC5wcm90b3R5cGUuX3ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignYWxsU2V0dGxlZCBtdXN0IGJlIGNhbGxlZCB3aXRoIGFuIGFycmF5Jyk7XG59O1xuXG4vKipcbiAgYFJTVlAuYWxsU2V0dGxlZGAgaXMgc2ltaWxhciB0byBgUlNWUC5hbGxgLCBidXQgaW5zdGVhZCBvZiBpbXBsZW1lbnRpbmdcbiAgYSBmYWlsLWZhc3QgbWV0aG9kLCBpdCB3YWl0cyB1bnRpbCBhbGwgdGhlIHByb21pc2VzIGhhdmUgcmV0dXJuZWQgYW5kXG4gIHNob3dzIHlvdSBhbGwgdGhlIHJlc3VsdHMuIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGhhbmRsZSBtdWx0aXBsZVxuICBwcm9taXNlcycgZmFpbHVyZSBzdGF0ZXMgdG9nZXRoZXIgYXMgYSBzZXQuXG5cbiAgUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgdGhlIGdpdmVuIHByb21pc2VzIGhhdmUgYmVlblxuICBzZXR0bGVkLiBUaGUgcmV0dXJuIHByb21pc2UgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgdGhlIHN0YXRlcyBvZlxuICB0aGUgcHJvbWlzZXMgcGFzc2VkIGludG8gdGhlIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQuXG5cbiAgRWFjaCBzdGF0ZSBvYmplY3Qgd2lsbCBlaXRoZXIgaW5kaWNhdGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uLCBhbmRcbiAgcHJvdmlkZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvciByZWFzb24uIFRoZSBzdGF0ZXMgd2lsbCB0YWtlIG9uZSBvZlxuICB0aGUgZm9sbG93aW5nIGZvcm1hdHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH1cbiAgICBvclxuICB7IHN0YXRlOiAncmVqZWN0ZWQnLCByZWFzb246IHJlYXNvbiB9XG4gIGBgYFxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBSU1ZQLlByb21pc2UucmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gUlNWUC5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJzInKSk7XG4gIGxldCBwcm9taXNlMyA9IFJTVlAuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCczJykpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBSU1ZQLmFsbFNldHRsZWQocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIGFycmF5ID09IFtcbiAgICAvLyAgIHsgc3RhdGU6ICdmdWxmaWxsZWQnLCB2YWx1ZTogMSB9LFxuICAgIC8vICAgeyBzdGF0ZTogJ3JlamVjdGVkJywgcmVhc29uOiBFcnJvciB9LFxuICAgIC8vICAgeyBzdGF0ZTogJ3JlamVjdGVkJywgcmVhc29uOiBFcnJvciB9XG4gICAgLy8gXVxuICAgIC8vIE5vdGUgdGhhdCBmb3IgdGhlIHNlY29uZCBpdGVtLCByZWFzb24ubWVzc2FnZSB3aWxsIGJlICcyJywgYW5kIGZvciB0aGVcbiAgICAvLyB0aGlyZCBpdGVtLCByZWFzb24ubWVzc2FnZSB3aWxsIGJlICczJy5cbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBOb3QgcnVuLiAoVGhpcyBibG9jayB3b3VsZCBvbmx5IGJlIGNhbGxlZCBpZiBhbGxTZXR0bGVkIGhhZCBmYWlsZWQsXG4gICAgLy8gZm9yIGluc3RhbmNlIGlmIHBhc3NlZCBhbiBpbmNvcnJlY3QgYXJndW1lbnQgdHlwZS4pXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFNldHRsZWRcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgLSBvcHRpb25hbCBzdHJpbmcgdGhhdCBkZXNjcmliZXMgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIHRoZSBzZXR0bGVkXG4gIHN0YXRlcyBvZiB0aGUgY29uc3RpdHVlbnQgcHJvbWlzZXMuXG4qL1xuZnVuY3Rpb24gYWxsU2V0dGxlZChlbnRyaWVzLCBsYWJlbCkge1xuICByZXR1cm4gbmV3IEFsbFNldHRsZWQoUHJvbWlzZSwgZW50cmllcywgbGFiZWwpLnByb21pc2U7XG59XG5cbi8qKlxuICBUaGlzIGlzIGEgY29udmVuaWVudCBhbGlhcyBmb3IgYFJTVlAuUHJvbWlzZS5yYWNlYC5cblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgb2YgcHJvbWlzZXMuXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBBbiBvcHRpb25hbCBsYWJlbC4gVGhpcyBpcyB1c2VmdWxcbiAgZm9yIHRvb2xpbmcuXG4gKi9cbmZ1bmN0aW9uIHJhY2UkMShhcnJheSwgbGFiZWwpIHtcbiAgcmV0dXJuIFByb21pc2UucmFjZShhcnJheSwgbGFiZWwpO1xufVxuXG5mdW5jdGlvbiBQcm9taXNlSGFzaChDb25zdHJ1Y3Rvciwgb2JqZWN0LCBsYWJlbCkge1xuICB0aGlzLl9zdXBlckNvbnN0cnVjdG9yKENvbnN0cnVjdG9yLCBvYmplY3QsIHRydWUsIGxhYmVsKTtcbn1cblxuUHJvbWlzZUhhc2gucHJvdG90eXBlID0gb19jcmVhdGUoRW51bWVyYXRvci5wcm90b3R5cGUpO1xuUHJvbWlzZUhhc2gucHJvdG90eXBlLl9zdXBlckNvbnN0cnVjdG9yID0gRW51bWVyYXRvcjtcblByb21pc2VIYXNoLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVzdWx0ID0ge307XG59O1xuXG5Qcm9taXNlSGFzaC5wcm90b3R5cGUuX3ZhbGlkYXRlSW5wdXQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0ICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCc7XG59O1xuXG5Qcm9taXNlSGFzaC5wcm90b3R5cGUuX3ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignUHJvbWlzZS5oYXNoIG11c3QgYmUgY2FsbGVkIHdpdGggYW4gb2JqZWN0Jyk7XG59O1xuXG5Qcm9taXNlSGFzaC5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IGVudW1lcmF0b3IucHJvbWlzZTtcbiAgdmFyIGlucHV0ID0gZW51bWVyYXRvci5faW5wdXQ7XG4gIHZhciByZXN1bHRzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIGlucHV0KSB7XG4gICAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnB1dCwga2V5KSkge1xuICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IGtleSxcbiAgICAgICAgZW50cnk6IGlucHV0W2tleV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsZW5ndGggPSByZXN1bHRzLmxlbmd0aDtcbiAgZW51bWVyYXRvci5fcmVtYWluaW5nID0gbGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuXG4gIGZvciAodmFyIGkgPSAwOyBwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgIGVudW1lcmF0b3IuX2VhY2hFbnRyeShyZXN1bHQuZW50cnksIHJlc3VsdC5wb3NpdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICBgUlNWUC5oYXNoYCBpcyBzaW1pbGFyIHRvIGBSU1ZQLmFsbGAsIGJ1dCB0YWtlcyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheVxuICBmb3IgaXRzIGBwcm9taXNlc2AgYXJndW1lbnQuXG5cbiAgUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgdGhlIGdpdmVuIHByb21pc2VzIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC4gVGhlIHJldHVybmVkIHByb21pc2VcbiAgaXMgZnVsZmlsbGVkIHdpdGggYSBoYXNoIHRoYXQgaGFzIHRoZSBzYW1lIGtleSBuYW1lcyBhcyB0aGUgYHByb21pc2VzYCBvYmplY3RcbiAgYXJndW1lbnQuIElmIGFueSBvZiB0aGUgdmFsdWVzIGluIHRoZSBvYmplY3QgYXJlIG5vdCBwcm9taXNlcywgdGhleSB3aWxsXG4gIHNpbXBseSBiZSBjb3BpZWQgb3ZlciB0byB0aGUgZnVsZmlsbGVkIG9iamVjdC5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2VzID0ge1xuICAgIG15UHJvbWlzZTogUlNWUC5yZXNvbHZlKDEpLFxuICAgIHlvdXJQcm9taXNlOiBSU1ZQLnJlc29sdmUoMiksXG4gICAgdGhlaXJQcm9taXNlOiBSU1ZQLnJlc29sdmUoMyksXG4gICAgbm90QVByb21pc2U6IDRcbiAgfTtcblxuICBSU1ZQLmhhc2gocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oaGFzaCl7XG4gICAgLy8gaGFzaCBoZXJlIGlzIGFuIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG4gICAgLy8ge1xuICAgIC8vICAgbXlQcm9taXNlOiAxLFxuICAgIC8vICAgeW91clByb21pc2U6IDIsXG4gICAgLy8gICB0aGVpclByb21pc2U6IDMsXG4gICAgLy8gICBub3RBUHJvbWlzZTogNFxuICAgIC8vIH1cbiAgfSk7XG4gIGBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYFJTVlAuaGFzaGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgdGhlIHJlYXNvbiB0byB0aGUgcmVqZWN0aW9uIGhhbmRsZXIuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlcyA9IHtcbiAgICBteVByb21pc2U6IFJTVlAucmVzb2x2ZSgxKSxcbiAgICByZWplY3RlZFByb21pc2U6IFJTVlAucmVqZWN0KG5ldyBFcnJvcigncmVqZWN0ZWRQcm9taXNlJykpLFxuICAgIGFub3RoZXJSZWplY3RlZFByb21pc2U6IFJTVlAucmVqZWN0KG5ldyBFcnJvcignYW5vdGhlclJlamVjdGVkUHJvbWlzZScpKSxcbiAgfTtcblxuICBSU1ZQLmhhc2gocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oaGFzaCl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncmVqZWN0ZWRQcm9taXNlJ1xuICB9KTtcbiAgYGBgXG5cbiAgQW4gaW1wb3J0YW50IG5vdGU6IGBSU1ZQLmhhc2hgIGlzIGludGVuZGVkIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMgdGhhdFxuICBhcmUganVzdCBhIHNldCBvZiBrZXlzIGFuZCB2YWx1ZXMuIGBSU1ZQLmhhc2hgIHdpbGwgTk9UIHByZXNlcnZlIHByb3RvdHlwZVxuICBjaGFpbnMuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGZ1bmN0aW9uIE15Q29uc3RydWN0b3IoKXtcbiAgICB0aGlzLmV4YW1wbGUgPSBSU1ZQLnJlc29sdmUoJ0V4YW1wbGUnKTtcbiAgfVxuXG4gIE15Q29uc3RydWN0b3IucHJvdG90eXBlID0ge1xuICAgIHByb3RvUHJvcGVydHk6IFJTVlAucmVzb2x2ZSgnUHJvdG8gUHJvcGVydHknKVxuICB9O1xuXG4gIGxldCBteU9iamVjdCA9IG5ldyBNeUNvbnN0cnVjdG9yKCk7XG5cbiAgUlNWUC5oYXNoKG15T2JqZWN0KS50aGVuKGZ1bmN0aW9uKGhhc2gpe1xuICAgIC8vIHByb3RvUHJvcGVydHkgd2lsbCBub3QgYmUgcHJlc2VudCwgaW5zdGVhZCB5b3Ugd2lsbCBqdXN0IGhhdmUgYW5cbiAgICAvLyBvYmplY3QgdGhhdCBsb29rcyBsaWtlOlxuICAgIC8vIHtcbiAgICAvLyAgIGV4YW1wbGU6ICdFeGFtcGxlJ1xuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIGhhc2guaGFzT3duUHJvcGVydHkoJ3Byb3RvUHJvcGVydHknKTsgLy8gZmFsc2VcbiAgICAvLyAndW5kZWZpbmVkJyA9PT0gdHlwZW9mIGhhc2gucHJvdG9Qcm9wZXJ0eVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBoYXNoXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIHByb3BlcnRpZXMgb2YgYHByb21pc2VzYFxuICBoYXZlIGJlZW4gZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4qL1xuZnVuY3Rpb24gaGFzaChvYmplY3QsIGxhYmVsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUhhc2goUHJvbWlzZSwgb2JqZWN0LCBsYWJlbCkucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gSGFzaFNldHRsZWQoQ29uc3RydWN0b3IsIG9iamVjdCwgbGFiZWwpIHtcbiAgdGhpcy5fc3VwZXJDb25zdHJ1Y3RvcihDb25zdHJ1Y3Rvciwgb2JqZWN0LCBmYWxzZSwgbGFiZWwpO1xufVxuXG5IYXNoU2V0dGxlZC5wcm90b3R5cGUgPSBvX2NyZWF0ZShQcm9taXNlSGFzaC5wcm90b3R5cGUpO1xuSGFzaFNldHRsZWQucHJvdG90eXBlLl9zdXBlckNvbnN0cnVjdG9yID0gRW51bWVyYXRvcjtcbkhhc2hTZXR0bGVkLnByb3RvdHlwZS5fbWFrZVJlc3VsdCA9IG1ha2VTZXR0bGVkUmVzdWx0O1xuXG5IYXNoU2V0dGxlZC5wcm90b3R5cGUuX3ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignaGFzaFNldHRsZWQgbXVzdCBiZSBjYWxsZWQgd2l0aCBhbiBvYmplY3QnKTtcbn07XG5cbi8qKlxuICBgUlNWUC5oYXNoU2V0dGxlZGAgaXMgc2ltaWxhciB0byBgUlNWUC5hbGxTZXR0bGVkYCwgYnV0IHRha2VzIGFuIG9iamVjdFxuICBpbnN0ZWFkIG9mIGFuIGFycmF5IGZvciBpdHMgYHByb21pc2VzYCBhcmd1bWVudC5cblxuICBVbmxpa2UgYFJTVlAuYWxsYCBvciBgUlNWUC5oYXNoYCwgd2hpY2ggaW1wbGVtZW50IGEgZmFpbC1mYXN0IG1ldGhvZCxcbiAgYnV0IGxpa2UgYFJTVlAuYWxsU2V0dGxlZGAsIGBoYXNoU2V0dGxlZGAgd2FpdHMgdW50aWwgYWxsIHRoZVxuICBjb25zdGl0dWVudCBwcm9taXNlcyBoYXZlIHJldHVybmVkIGFuZCB0aGVuIHNob3dzIHlvdSBhbGwgdGhlIHJlc3VsdHNcbiAgd2l0aCB0aGVpciBzdGF0ZXMgYW5kIHZhbHVlcy9yZWFzb25zLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0b1xuICBoYW5kbGUgbXVsdGlwbGUgcHJvbWlzZXMnIGZhaWx1cmUgc3RhdGVzIHRvZ2V0aGVyIGFzIGEgc2V0LlxuXG4gIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIHRoZSBnaXZlbiBwcm9taXNlcyBoYXZlIGJlZW5cbiAgc2V0dGxlZCwgb3IgcmVqZWN0ZWQgaWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXJzIGFyZSBpbnZhbGlkLlxuXG4gIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIGZ1bGZpbGxlZCB3aXRoIGEgaGFzaCB0aGF0IGhhcyB0aGUgc2FtZSBrZXkgbmFtZXMgYXNcbiAgdGhlIGBwcm9taXNlc2Agb2JqZWN0IGFyZ3VtZW50LiBJZiBhbnkgb2YgdGhlIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGFyZSBub3RcbiAgcHJvbWlzZXMsIHRoZXkgd2lsbCBiZSBjb3BpZWQgb3ZlciB0byB0aGUgZnVsZmlsbGVkIG9iamVjdCBhbmQgbWFya2VkIHdpdGggc3RhdGVcbiAgJ2Z1bGZpbGxlZCcuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlcyA9IHtcbiAgICBteVByb21pc2U6IFJTVlAuUHJvbWlzZS5yZXNvbHZlKDEpLFxuICAgIHlvdXJQcm9taXNlOiBSU1ZQLlByb21pc2UucmVzb2x2ZSgyKSxcbiAgICB0aGVpclByb21pc2U6IFJTVlAuUHJvbWlzZS5yZXNvbHZlKDMpLFxuICAgIG5vdEFQcm9taXNlOiA0XG4gIH07XG5cbiAgUlNWUC5oYXNoU2V0dGxlZChwcm9taXNlcykudGhlbihmdW5jdGlvbihoYXNoKXtcbiAgICAvLyBoYXNoIGhlcmUgaXMgYW4gb2JqZWN0IHRoYXQgbG9va3MgbGlrZTpcbiAgICAvLyB7XG4gICAgLy8gICBteVByb21pc2U6IHsgc3RhdGU6ICdmdWxmaWxsZWQnLCB2YWx1ZTogMSB9LFxuICAgIC8vICAgeW91clByb21pc2U6IHsgc3RhdGU6ICdmdWxmaWxsZWQnLCB2YWx1ZTogMiB9LFxuICAgIC8vICAgdGhlaXJQcm9taXNlOiB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDMgfSxcbiAgICAvLyAgIG5vdEFQcm9taXNlOiB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDQgfVxuICAgIC8vIH1cbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgUlNWUC5oYXNoYCBhcmUgcmVqZWN0ZWQsIHRoZSBzdGF0ZSB3aWxsXG4gIGJlIHNldCB0byAncmVqZWN0ZWQnIGFuZCB0aGUgcmVhc29uIGZvciByZWplY3Rpb24gcHJvdmlkZWQuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlcyA9IHtcbiAgICBteVByb21pc2U6IFJTVlAuUHJvbWlzZS5yZXNvbHZlKDEpLFxuICAgIHJlamVjdGVkUHJvbWlzZTogUlNWUC5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3JlamVjdGlvbicpKSxcbiAgICBhbm90aGVyUmVqZWN0ZWRQcm9taXNlOiBSU1ZQLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcignbW9yZSByZWplY3Rpb24nKSksXG4gIH07XG5cbiAgUlNWUC5oYXNoU2V0dGxlZChwcm9taXNlcykudGhlbihmdW5jdGlvbihoYXNoKXtcbiAgICAvLyBoYXNoIGhlcmUgaXMgYW4gb2JqZWN0IHRoYXQgbG9va3MgbGlrZTpcbiAgICAvLyB7XG4gICAgLy8gICBteVByb21pc2U6ICAgICAgICAgICAgICB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IDEgfSxcbiAgICAvLyAgIHJlamVjdGVkUHJvbWlzZTogICAgICAgIHsgc3RhdGU6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IgfSxcbiAgICAvLyAgIGFub3RoZXJSZWplY3RlZFByb21pc2U6IHsgc3RhdGU6ICdyZWplY3RlZCcsIHJlYXNvbjogRXJyb3IgfSxcbiAgICAvLyB9XG4gICAgLy8gTm90ZSB0aGF0IGZvciByZWplY3RlZFByb21pc2UsIHJlYXNvbi5tZXNzYWdlID09ICdyZWplY3Rpb24nLFxuICAgIC8vIGFuZCBmb3IgYW5vdGhlclJlamVjdGVkUHJvbWlzZSwgcmVhc29uLm1lc3NhZ2UgPT0gJ21vcmUgcmVqZWN0aW9uJy5cbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGltcG9ydGFudCBub3RlOiBgUlNWUC5oYXNoU2V0dGxlZGAgaXMgaW50ZW5kZWQgZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cyB0aGF0XG4gIGFyZSBqdXN0IGEgc2V0IG9mIGtleXMgYW5kIHZhbHVlcy4gYFJTVlAuaGFzaFNldHRsZWRgIHdpbGwgTk9UIHByZXNlcnZlIHByb3RvdHlwZVxuICBjaGFpbnMuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGZ1bmN0aW9uIE15Q29uc3RydWN0b3IoKXtcbiAgICB0aGlzLmV4YW1wbGUgPSBSU1ZQLlByb21pc2UucmVzb2x2ZSgnRXhhbXBsZScpO1xuICB9XG5cbiAgTXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSB7XG4gICAgcHJvdG9Qcm9wZXJ0eTogUlNWUC5Qcm9taXNlLnJlc29sdmUoJ1Byb3RvIFByb3BlcnR5JylcbiAgfTtcblxuICBsZXQgbXlPYmplY3QgPSBuZXcgTXlDb25zdHJ1Y3RvcigpO1xuXG4gIFJTVlAuaGFzaFNldHRsZWQobXlPYmplY3QpLnRoZW4oZnVuY3Rpb24oaGFzaCl7XG4gICAgLy8gcHJvdG9Qcm9wZXJ0eSB3aWxsIG5vdCBiZSBwcmVzZW50LCBpbnN0ZWFkIHlvdSB3aWxsIGp1c3QgaGF2ZSBhblxuICAgIC8vIG9iamVjdCB0aGF0IGxvb2tzIGxpa2U6XG4gICAgLy8ge1xuICAgIC8vICAgZXhhbXBsZTogeyBzdGF0ZTogJ2Z1bGZpbGxlZCcsIHZhbHVlOiAnRXhhbXBsZScgfVxuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIGhhc2guaGFzT3duUHJvcGVydHkoJ3Byb3RvUHJvcGVydHknKTsgLy8gZmFsc2VcbiAgICAvLyAndW5kZWZpbmVkJyA9PT0gdHlwZW9mIGhhc2gucHJvdG9Qcm9wZXJ0eVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBoYXNoU2V0dGxlZFxuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIHRoYXQgZGVzY3JpYmVzIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiB3aGVuIGFsbCBwcm9wZXJ0aWVzIG9mIGBwcm9taXNlc2BcbiAgaGF2ZSBiZWVuIHNldHRsZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBoYXNoU2V0dGxlZChvYmplY3QsIGxhYmVsKSB7XG4gIHJldHVybiBuZXcgSGFzaFNldHRsZWQoUHJvbWlzZSwgb2JqZWN0LCBsYWJlbCkucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gcmV0aHJvdyhyZWFzb24pIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgcmVhc29uO1xuICB9KTtcbiAgdGhyb3cgcmVhc29uO1xufVxuXG4vKipcbiAgYFJTVlAuZGVmZXJgIHJldHVybnMgYW4gb2JqZWN0IHNpbWlsYXIgdG8galF1ZXJ5J3MgYCQuRGVmZXJyZWRgLlxuICBgUlNWUC5kZWZlcmAgc2hvdWxkIGJlIHVzZWQgd2hlbiBwb3J0aW5nIG92ZXIgY29kZSByZWxpYW50IG9uIGAkLkRlZmVycmVkYCdzXG4gIGludGVyZmFjZS4gTmV3IGNvZGUgc2hvdWxkIHVzZSB0aGUgYFJTVlAuUHJvbWlzZWAgY29uc3RydWN0b3IgaW5zdGVhZC5cblxuICBUaGUgb2JqZWN0IHJldHVybmVkIGZyb20gYFJTVlAuZGVmZXJgIGlzIGEgcGxhaW4gb2JqZWN0IHdpdGggdGhyZWUgcHJvcGVydGllczpcblxuICAqIHByb21pc2UgLSBhbiBgUlNWUC5Qcm9taXNlYC5cbiAgKiByZWplY3QgLSBhIGZ1bmN0aW9uIHRoYXQgY2F1c2VzIHRoZSBgcHJvbWlzZWAgcHJvcGVydHkgb24gdGhpcyBvYmplY3QgdG9cbiAgICBiZWNvbWUgcmVqZWN0ZWRcbiAgKiByZXNvbHZlIC0gYSBmdW5jdGlvbiB0aGF0IGNhdXNlcyB0aGUgYHByb21pc2VgIHByb3BlcnR5IG9uIHRoaXMgb2JqZWN0IHRvXG4gICAgYmVjb21lIGZ1bGZpbGxlZC5cblxuICBFeGFtcGxlOlxuXG4gICBgYGBqYXZhc2NyaXB0XG4gICBsZXQgZGVmZXJyZWQgPSBSU1ZQLmRlZmVyKCk7XG5cbiAgIGRlZmVycmVkLnJlc29sdmUoXCJTdWNjZXNzIVwiKTtcblxuICAgZGVmZXJyZWQucHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgLy8gdmFsdWUgaGVyZSBpcyBcIlN1Y2Nlc3MhXCJcbiAgIH0pO1xuICAgYGBgXG5cbiAgQG1ldGhvZCBkZWZlclxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGRlZmVyKGxhYmVsKSB7XG4gIHZhciBkZWZlcnJlZCA9IHsgcmVzb2x2ZTogdW5kZWZpbmVkLCByZWplY3Q6IHVuZGVmaW5lZCB9O1xuXG4gIGRlZmVycmVkLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmZXJyZWQucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgZGVmZXJyZWQucmVqZWN0ID0gcmVqZWN0O1xuICB9LCBsYWJlbCk7XG5cbiAgcmV0dXJuIGRlZmVycmVkO1xufVxuXG4vKipcbiBgUlNWUC5tYXBgIGlzIHNpbWlsYXIgdG8gSmF2YVNjcmlwdCdzIG5hdGl2ZSBgbWFwYCBtZXRob2QsIGV4Y2VwdCB0aGF0IGl0XG4gIHdhaXRzIGZvciBhbGwgcHJvbWlzZXMgdG8gYmVjb21lIGZ1bGZpbGxlZCBiZWZvcmUgcnVubmluZyB0aGUgYG1hcEZuYCBvblxuICBlYWNoIGl0ZW0gaW4gZ2l2ZW4gdG8gYHByb21pc2VzYC4gYFJTVlAubWFwYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGxcbiAgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSByZXN1bHQgb2YgcnVubmluZyBgbWFwRm5gIG9uIHRoZSB2YWx1ZXMgdGhlIHByb21pc2VzXG4gIGJlY29tZSBmdWxmaWxsZWQgd2l0aC5cblxuICBGb3IgZXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG5cbiAgbGV0IHByb21pc2UxID0gUlNWUC5yZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSBSU1ZQLnJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IFJTVlAucmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgbGV0IG1hcEZuID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgcmV0dXJuIGl0ZW0gKyAxO1xuICB9O1xuXG4gIFJTVlAubWFwKHByb21pc2VzLCBtYXBGbikudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCBpcyBbIDIsIDMsIDQgXVxuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBSU1ZQLm1hcGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2Unc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBSU1ZQLnJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IFJTVlAucmVqZWN0KG5ldyBFcnJvcignMicpKTtcbiAgbGV0IHByb21pc2UzID0gUlNWUC5yZWplY3QobmV3IEVycm9yKCczJykpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBsZXQgbWFwRm4gPSBmdW5jdGlvbihpdGVtKXtcbiAgICByZXR1cm4gaXRlbSArIDE7XG4gIH07XG5cbiAgUlNWUC5tYXAocHJvbWlzZXMsIG1hcEZuKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICcyJ1xuICB9KTtcbiAgYGBgXG5cbiAgYFJTVlAubWFwYCB3aWxsIGFsc28gd2FpdCBpZiBhIHByb21pc2UgaXMgcmV0dXJuZWQgZnJvbSBgbWFwRm5gLiBGb3IgZXhhbXBsZSxcbiAgc2F5IHlvdSB3YW50IHRvIGdldCBhbGwgY29tbWVudHMgZnJvbSBhIHNldCBvZiBibG9nIHBvc3RzLCBidXQgeW91IG5lZWRcbiAgdGhlIGJsb2cgcG9zdHMgZmlyc3QgYmVjYXVzZSB0aGV5IGNvbnRhaW4gYSB1cmwgdG8gdGhvc2UgY29tbWVudHMuXG5cbiAgYGBgamF2c2NyaXB0XG5cbiAgbGV0IG1hcEZuID0gZnVuY3Rpb24oYmxvZ1Bvc3Qpe1xuICAgIC8vIGdldENvbW1lbnRzIGRvZXMgc29tZSBhamF4IGFuZCByZXR1cm5zIGFuIFJTVlAuUHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZFxuICAgIC8vIHdpdGggc29tZSBjb21tZW50cyBkYXRhXG4gICAgcmV0dXJuIGdldENvbW1lbnRzKGJsb2dQb3N0LmNvbW1lbnRzX3VybCk7XG4gIH07XG5cbiAgLy8gZ2V0QmxvZ1Bvc3RzIGRvZXMgc29tZSBhamF4IGFuZCByZXR1cm5zIGFuIFJTVlAuUHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZFxuICAvLyB3aXRoIHNvbWUgYmxvZyBwb3N0IGRhdGFcbiAgUlNWUC5tYXAoZ2V0QmxvZ1Bvc3RzKCksIG1hcEZuKS50aGVuKGZ1bmN0aW9uKGNvbW1lbnRzKXtcbiAgICAvLyBjb21tZW50cyBpcyB0aGUgcmVzdWx0IG9mIGFza2luZyB0aGUgc2VydmVyIGZvciB0aGUgY29tbWVudHNcbiAgICAvLyBvZiBhbGwgYmxvZyBwb3N0cyByZXR1cm5lZCBmcm9tIGdldEJsb2dQb3N0cygpXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIG1hcFxuICBAc3RhdGljXG4gIEBmb3IgUlNWUFxuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlc1xuICBAcGFyYW0ge0Z1bmN0aW9ufSBtYXBGbiBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZWFjaCBmdWxmaWxsZWQgcHJvbWlzZS5cbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIHRoZSByZXN1bHQgb2YgY2FsbGluZ1xuICBgbWFwRm5gIG9uIGVhY2ggZnVsZmlsbGVkIHByb21pc2Ugb3IgdmFsdWUgd2hlbiB0aGV5IGJlY29tZSBmdWxmaWxsZWQuXG4gICBUaGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGlmIGFueSBvZiB0aGUgZ2l2ZW4gYHByb21pc2VzYCBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBtYXAocHJvbWlzZXMsIG1hcEZuLCBsYWJlbCkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMsIGxhYmVsKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24obWFwRm4pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIG1hcCdzIHNlY29uZCBhcmd1bWVudC5cIik7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdHNbaV0gPSBtYXBGbih2YWx1ZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzLCBsYWJlbCk7XG4gIH0pO1xufVxuXG4vKipcbiAgVGhpcyBpcyBhIGNvbnZlbmllbnQgYWxpYXMgZm9yIGBSU1ZQLlByb21pc2UucmVzb2x2ZWAuXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgaWRlbnRpZnlpbmcgdGhlIHJldHVybmVkIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlJDIodmFsdWUsIGxhYmVsKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUsIGxhYmVsKTtcbn1cblxuLyoqXG4gIFRoaXMgaXMgYSBjb252ZW5pZW50IGFsaWFzIGZvciBgUlNWUC5Qcm9taXNlLnJlamVjdGAuXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAZm9yIFJTVlBcbiAgQHBhcmFtIHsqfSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGlkZW50aWZ5aW5nIHRoZSByZXR1cm5lZCBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QkMihyZWFzb24sIGxhYmVsKSB7XG4gIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24sIGxhYmVsKTtcbn1cblxuLyoqXG4gYFJTVlAuZmlsdGVyYCBpcyBzaW1pbGFyIHRvIEphdmFTY3JpcHQncyBuYXRpdmUgYGZpbHRlcmAgbWV0aG9kLCBleGNlcHQgdGhhdCBpdFxuICB3YWl0cyBmb3IgYWxsIHByb21pc2VzIHRvIGJlY29tZSBmdWxmaWxsZWQgYmVmb3JlIHJ1bm5pbmcgdGhlIGBmaWx0ZXJGbmAgb25cbiAgZWFjaCBpdGVtIGluIGdpdmVuIHRvIGBwcm9taXNlc2AuIGBSU1ZQLmZpbHRlcmAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsXG4gIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGZpbHRlckZuYCBvbiB0aGUgdmFsdWVzIHRoZVxuICBwcm9taXNlcyBiZWNvbWUgZnVsZmlsbGVkIHdpdGguXG5cbiAgRm9yIGV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuXG4gIGxldCBwcm9taXNlMSA9IFJTVlAucmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gUlNWUC5yZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSBSU1ZQLnJlc29sdmUoMyk7XG5cbiAgbGV0IHByb21pc2VzID0gW3Byb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTNdO1xuXG4gIGxldCBmaWx0ZXJGbiA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAgIHJldHVybiBpdGVtID4gMTtcbiAgfTtcblxuICBSU1ZQLmZpbHRlcihwcm9taXNlcywgZmlsdGVyRm4pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgaXMgWyAyLCAzIF1cbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgUlNWUC5maWx0ZXJgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gUlNWUC5yZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSBSU1ZQLnJlamVjdChuZXcgRXJyb3IoJzInKSk7XG4gIGxldCBwcm9taXNlMyA9IFJTVlAucmVqZWN0KG5ldyBFcnJvcignMycpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgbGV0IGZpbHRlckZuID0gZnVuY3Rpb24oaXRlbSl7XG4gICAgcmV0dXJuIGl0ZW0gPiAxO1xuICB9O1xuXG4gIFJTVlAuZmlsdGVyKHByb21pc2VzLCBmaWx0ZXJGbikudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnMidcbiAgfSk7XG4gIGBgYFxuXG4gIGBSU1ZQLmZpbHRlcmAgd2lsbCBhbHNvIHdhaXQgZm9yIGFueSBwcm9taXNlcyByZXR1cm5lZCBmcm9tIGBmaWx0ZXJGbmAuXG4gIEZvciBpbnN0YW5jZSwgeW91IG1heSB3YW50IHRvIGZldGNoIGEgbGlzdCBvZiB1c2VycyB0aGVuIHJldHVybiBhIHN1YnNldFxuICBvZiB0aG9zZSB1c2VycyBiYXNlZCBvbiBzb21lIGFzeW5jaHJvbm91cyBvcGVyYXRpb246XG5cbiAgYGBgamF2YXNjcmlwdFxuXG4gIGxldCBhbGljZSA9IHsgbmFtZTogJ2FsaWNlJyB9O1xuICBsZXQgYm9iICAgPSB7IG5hbWU6ICdib2InIH07XG4gIGxldCB1c2VycyA9IFsgYWxpY2UsIGJvYiBdO1xuXG4gIGxldCBwcm9taXNlcyA9IHVzZXJzLm1hcChmdW5jdGlvbih1c2VyKXtcbiAgICByZXR1cm4gUlNWUC5yZXNvbHZlKHVzZXIpO1xuICB9KTtcblxuICBsZXQgZmlsdGVyRm4gPSBmdW5jdGlvbih1c2VyKXtcbiAgICAvLyBIZXJlLCBBbGljZSBoYXMgcGVybWlzc2lvbnMgdG8gY3JlYXRlIGEgYmxvZyBwb3N0LCBidXQgQm9iIGRvZXMgbm90LlxuICAgIHJldHVybiBnZXRQcml2aWxlZ2VzRm9yVXNlcih1c2VyKS50aGVuKGZ1bmN0aW9uKHByaXZzKXtcbiAgICAgIHJldHVybiBwcml2cy5jYW5fY3JlYXRlX2Jsb2dfcG9zdCA9PT0gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcbiAgUlNWUC5maWx0ZXIocHJvbWlzZXMsIGZpbHRlckZuKS50aGVuKGZ1bmN0aW9uKHVzZXJzKXtcbiAgICAvLyB0cnVlLCBiZWNhdXNlIHRoZSBzZXJ2ZXIgdG9sZCB1cyBvbmx5IEFsaWNlIGNhbiBjcmVhdGUgYSBibG9nIHBvc3QuXG4gICAgdXNlcnMubGVuZ3RoID09PSAxO1xuICAgIC8vIGZhbHNlLCBiZWNhdXNlIEFsaWNlIGlzIHRoZSBvbmx5IHVzZXIgcHJlc2VudCBpbiBgdXNlcnNgXG4gICAgdXNlcnNbMF0gPT09IGJvYjtcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgZmlsdGVyXG4gIEBzdGF0aWNcbiAgQGZvciBSU1ZQXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzXG4gIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZuIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGVhY2ggcmVzb2x2ZWQgdmFsdWUgdG9cbiAgZmlsdGVyIHRoZSBmaW5hbCByZXN1bHRzLlxuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHByb21pc2UuIFVzZWZ1bCBmb3JcbiAgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX1cbiovXG5cbmZ1bmN0aW9uIHJlc29sdmVBbGwocHJvbWlzZXMsIGxhYmVsKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcywgbGFiZWwpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2luZ2xlKHByb21pc2UsIGxhYmVsKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUocHJvbWlzZSwgbGFiZWwpLnRoZW4oZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBbGwocHJvbWlzZXMsIGxhYmVsKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmaWx0ZXIocHJvbWlzZXMsIGZpbHRlckZuLCBsYWJlbCkge1xuICB2YXIgcHJvbWlzZSA9IGlzQXJyYXkocHJvbWlzZXMpID8gcmVzb2x2ZUFsbChwcm9taXNlcywgbGFiZWwpIDogcmVzb2x2ZVNpbmdsZShwcm9taXNlcywgbGFiZWwpO1xuICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24oZmlsdGVyRm4pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGZpbHRlcidzIHNlY29uZCBhcmd1bWVudC5cIik7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgdmFyIGZpbHRlcmVkID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBmaWx0ZXJlZFtpXSA9IGZpbHRlckZuKHZhbHVlc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmVBbGwoZmlsdGVyZWQsIGxhYmVsKS50aGVuKGZ1bmN0aW9uIChmaWx0ZXJlZCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgIHZhciBuZXdMZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmaWx0ZXJlZFtpXSkge1xuICAgICAgICAgIHJlc3VsdHNbbmV3TGVuZ3RoXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICBuZXdMZW5ndGgrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHRzLmxlbmd0aCA9IG5ld0xlbmd0aDtcblxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWUkMVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlJDFbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDEsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIHNjaGVkdWxlRmx1c2gkMSgpO1xuICB9XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgdmFyIG5leHRUaWNrID0gcHJvY2Vzcy5uZXh0VGljaztcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNldEltbWVkaWF0ZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIGluc3RlYWRcbiAgdmFyIHZlcnNpb24gPSBwcm9jZXNzLnZlcnNpb25zLm5vZGUubWF0Y2goL14oPzooXFxkKylcXC4pPyg/OihcXGQrKVxcLik/KFxcKnxcXGQrKSQvKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmVyc2lvbikgJiYgdmVyc2lvblsxXSA9PT0gJzAnICYmIHZlcnNpb25bMl0gPT09ICcxMCcpIHtcbiAgICBuZXh0VGljayA9IHNldEltbWVkaWF0ZTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICBpZiAodHlwZW9mIHZlcnR4TmV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSQxID0gbmV3IEFycmF5KDEwMDApO1xuXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlJDFbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlJDFbaSArIDFdO1xuXG4gICAgY2FsbGJhY2soYXJnKTtcblxuICAgIHF1ZXVlJDFbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWUkMVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydGV4KCkge1xuICB0cnkge1xuICAgIHZhciByID0gcmVxdWlyZTtcbiAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2gkMSA9IHVuZGVmaW5lZDtcbi8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG5pZiAoaXNOb2RlKSB7XG4gIHNjaGVkdWxlRmx1c2gkMSA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2gkMSA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCQxID0gdXNlTWVzc2FnZUNoYW5uZWwoKTtcbn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gIHNjaGVkdWxlRmx1c2gkMSA9IGF0dGVtcHRWZXJ0ZXgoKTtcbn0gZWxzZSB7XG4gIHNjaGVkdWxlRmx1c2gkMSA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxudmFyIHBsYXRmb3JtID0gdW5kZWZpbmVkO1xuXG4vKiBnbG9iYWwgc2VsZiAqL1xuaWYgKHR5cGVvZiBzZWxmID09PSAnb2JqZWN0Jykge1xuICBwbGF0Zm9ybSA9IHNlbGY7XG5cbiAgLyogZ2xvYmFsIGdsb2JhbCAqL1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0Jykge1xuICAgIHBsYXRmb3JtID0gZ2xvYmFsO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignbm8gZ2xvYmFsOiBgc2VsZmAgb3IgYGdsb2JhbGAgZm91bmQnKTtcbiAgfVxuXG52YXIgX2FzeW5jJGZpbHRlcjtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy8gZGVmYXVsdHNcblxuLy8gdGhlIGRlZmF1bHQgZXhwb3J0IGhlcmUgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXQ6XG4vLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS90aWxkZWlvL3JzdnAuanMvaXNzdWVzLzQzNFxuY29uZmlnLmFzeW5jID0gYXNhcDtcbmNvbmZpZy5hZnRlciA9IGZ1bmN0aW9uIChjYikge1xuICByZXR1cm4gc2V0VGltZW91dChjYiwgMCk7XG59O1xudmFyIGNhc3QgPSByZXNvbHZlJDI7XG5cbnZhciBhc3luYyA9IGZ1bmN0aW9uIGFzeW5jKGNhbGxiYWNrLCBhcmcpIHtcbiAgcmV0dXJuIGNvbmZpZy5hc3luYyhjYWxsYmFjaywgYXJnKTtcbn07XG5cbmZ1bmN0aW9uIG9uKCkge1xuICBjb25maWdbJ29uJ10uYXBwbHkoY29uZmlnLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvZmYoKSB7XG4gIGNvbmZpZ1snb2ZmJ10uYXBwbHkoY29uZmlnLCBhcmd1bWVudHMpO1xufVxuXG4vLyBTZXQgdXAgaW5zdHJ1bWVudGF0aW9uIHRocm91Z2ggYHdpbmRvdy5fX1BST01JU0VfSU5UUlVNRU5UQVRJT05fX2BcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93WydfX1BST01JU0VfSU5TVFJVTUVOVEFUSU9OX18nXSA9PT0gJ29iamVjdCcpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHdpbmRvd1snX19QUk9NSVNFX0lOU1RSVU1FTlRBVElPTl9fJ107XG4gIGNvbmZpZ3VyZSgnaW5zdHJ1bWVudCcsIHRydWUpO1xuICBmb3IgKHZhciBldmVudE5hbWUgaW4gY2FsbGJhY2tzKSB7XG4gICAgaWYgKGNhbGxiYWNrcy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICBvbihldmVudE5hbWUsIGNhbGxiYWNrc1tldmVudE5hbWVdKTtcbiAgICB9XG4gIH1cbn12YXIgcnN2cCA9IChfYXN5bmMkZmlsdGVyID0ge1xuICBjYXN0OiBjYXN0LFxuICBQcm9taXNlOiBQcm9taXNlLFxuICBFdmVudFRhcmdldDogRXZlbnRUYXJnZXQsXG4gIGFsbDogYWxsJDEsXG4gIGFsbFNldHRsZWQ6IGFsbFNldHRsZWQsXG4gIHJhY2U6IHJhY2UkMSxcbiAgaGFzaDogaGFzaCxcbiAgaGFzaFNldHRsZWQ6IGhhc2hTZXR0bGVkLFxuICByZXRocm93OiByZXRocm93LFxuICBkZWZlcjogZGVmZXIsXG4gIGRlbm9kZWlmeTogZGVub2RlaWZ5LFxuICBjb25maWd1cmU6IGNvbmZpZ3VyZSxcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgcmVzb2x2ZTogcmVzb2x2ZSQyLFxuICByZWplY3Q6IHJlamVjdCQyLFxuICBtYXA6IG1hcFxufSwgX2RlZmluZVByb3BlcnR5KF9hc3luYyRmaWx0ZXIsICdhc3luYycsIGFzeW5jKSwgX2RlZmluZVByb3BlcnR5KF9hc3luYyRmaWx0ZXIsICdmaWx0ZXInLCAvLyBiYWJlbCBzZWVtcyB0byBlcnJvciBpZiBhc3luYyBpc24ndCBhIGNvbXB1dGVkIHByb3AgaGVyZS4uLlxuZmlsdGVyKSwgX2FzeW5jJGZpbHRlcik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHJzdnA7XG5leHBvcnRzLmNhc3QgPSBjYXN0O1xuZXhwb3J0cy5Qcm9taXNlID0gUHJvbWlzZTtcbmV4cG9ydHMuRXZlbnRUYXJnZXQgPSBFdmVudFRhcmdldDtcbmV4cG9ydHMuYWxsID0gYWxsJDE7XG5leHBvcnRzLmFsbFNldHRsZWQgPSBhbGxTZXR0bGVkO1xuZXhwb3J0cy5yYWNlID0gcmFjZSQxO1xuZXhwb3J0cy5oYXNoID0gaGFzaDtcbmV4cG9ydHMuaGFzaFNldHRsZWQgPSBoYXNoU2V0dGxlZDtcbmV4cG9ydHMucmV0aHJvdyA9IHJldGhyb3c7XG5leHBvcnRzLmRlZmVyID0gZGVmZXI7XG5leHBvcnRzLmRlbm9kZWlmeSA9IGRlbm9kZWlmeTtcbmV4cG9ydHMuY29uZmlndXJlID0gY29uZmlndXJlO1xuZXhwb3J0cy5vbiA9IG9uO1xuZXhwb3J0cy5vZmYgPSBvZmY7XG5leHBvcnRzLnJlc29sdmUgPSByZXNvbHZlJDI7XG5leHBvcnRzLnJlamVjdCA9IHJlamVjdCQyO1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLmFzeW5jID0gYXN5bmM7XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJzdnAubWFwIl19\n"]}