{"version":3,"sources":["duocoder.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_$","$","extend","panelVars","language","editor","matchings","lines","_this","this","panel","exam_mode","setLanguage","index","setEditor","setMatchings","setCode","setLines","enterExamMode","exitExamMode","getLanguage","getEditor","getMatchings","getCode","readable","replace","getLines","isExamMode","2","3","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_class","name","dir","children","arguments","undefined","parent","element","next","forEach","child","value","4","Language","Category","./category","./language","5","ace","ext","Server","languages","getLanguages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","../server","6","app","viewCode","to","enter","addClass","css","setReadOnly","setValue","exit","keep_code","removeClass","../app","./view_code","7","setupMain","initEditor","initCategories","setupLayout","setupMatching","setupExam","viewDesc","viewComparison","exam","./exam","./init_categories","./init_editor","./set_language","./setup_exam","./setup_layout","./setup_main","./setup_matching","./view_comparison","./view_desc","8","Storage","from","loadCategory","category","loadCode","then","loadDesc","categories","$index","append","$sub_index","j","click","$li","$ul","data","sub","set","get","../storage","9","afterRender","$panel","$code","find","edit","attr","setTheme","getSession","setMode","setUseWrapMode","setShowFoldWidgets","renderer","on","10","$title","text","11","util","calculateProgress","code_answer","code_user","similarity","zip","progress","getValue","s1","s2","longer","shorter","longerLength","editDistance","parseFloat","costs","lastValue","newValue","charAt","Math","min","../util","12","$next","hasClass","$active","is","$active_parent","alert","13","setupLanguages","setupStickToBottom","setupSmoothScroll","./setup_languages","./setup_smooth_scroll","./setup_stick_to_bottom","14","_arr","_loop","container","_i","$container","$lang","$logo","$lang_to","$lang_from_selected","$lang_to_selected","from_index","to_index","val","submit","../../server","15","location","pathname","hostname","hash","slice","animate","scrollTop","offset","top","$unfocused","onScroll","toggleClass","document","window","scroll","16","$stick_to_bottom_fake","$stick_to_bottom_real","$lang_from","$fullscreen","onResize","height","bottom","resize","17","mousemove","pageX","pageY","each","$match","_$match$offset","left","right","width","match","filter","18","split","omit_num","num","content","parseInt","push","join","19","_slicedToArray","sliceIterator","arr","_n","_d","_e","_s","Array","isArray","$desc","pair","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","matching","editors","$temp_snippets","_i4","html","line","$textLayer","$renderLine","comparisons","_arr2","_loop2","_i2","_i3","_matchings","every","empty","last_line","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop3","comparison","_comparison","pieces_from","pieces_to","is_same","$line","_arr3","_i5","pieces","$group","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","piece","$piece","clone","_iterator2","20","desc","converter","showdown","Converter","makeHtml","21","RSVP","DOM","App","_require","getCategories","reason","console","assert","main","learn","lang_from_ext","getUrlParameter","lang_to_ext","changed","lang_from","getWithExt","lang_to","sParam","params","decodeURIComponent","search","substring","param","./app","./app/constructor","./bean","./dom","./server","./storage","rsvp","22","request","url","type","./request","23","ajax","defaults","options","Promise","resolve","reject","callbacks","success","response","error","opts","24","../bean","25","26","./get_categories","./get_languages","./load_code","./load_desc","27","path","./ajax/get","28","29","_typeof","obj","constructor","_set","_get","getName","substr","dirs","grep","v","_ret","./manager","30","31","32","Cookies","remove","33","trim","34","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","apply","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","35","global","factory","define","amd","indexOf","callback","callbacksFor","object","_promiseCallbacks","configure","config","objectOrFunction","x","isFunction","isMaybeThenable","F","scheduleFlush","entry","payload","guid","id","childGuid","childId","stack","instrument","eventName","promise","_guidKey","_id","detail","_result","label","_label","timeStamp","now","resolve$1","withOwnPromise","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","async","sealed","fulfill","handleOwnThenable","_state","FULFILLED","REJECTED","_onError","subscribe","handleMaybeThenable","maybeThenable","then$$","publishRejection","publish","PENDING","_subscribers","onFulfillment","onRejection","subscribers","settled","invokeCallback","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","resolved","_arguments","state","result","makeSettledResult","position","Enumerator","input","abortOnReject","_instanceConstructor","_abortOnReject","_validateInput","_input","_remaining","_init","_enumerate","_validationError","all","entries","race","reject$1","needsResolver","needsNew","counter","Result","getThen$1","ERROR","tryApply","makeObject","_","argumentNames","_name","arrayResult","wrapThenable","_then","onFulFillment","denodeify","nodeFunc","fn","self","promiseInput","arg","needsPromiseInput","GET_THEN_ERROR$1","p","handlePromiseInput","handleValueInput","__proto__","all$1","AllSettled","_superConstructor","allSettled","race$1","PromiseHash","HashSettled","hashSettled","rethrow","defer","deferred","map","promises","mapFn","values","results","resolve$2","reject$2","resolveAll","resolveSingle","filterFn","filtered","newLength","asap","queue$1","scheduleFlush$1","useNextTick","node","setImmediate","flush","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","observer","BrowserMutationObserver","createTextNode","observe","characterData","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","attemptVertex","vertx","runOnLoop","runOnContext","_defineProperty","EventTarget","mixin","allCallbacks","splice","trigger","_isArray","toString","Date","getTime","o_create","create","_eachEntry","_settleMaybeThenable","c","_settledAt","_makeResult","_willSettleAt","enumerator","guidKey","cast","after","catch","finally","hasOwnProperty","browserWindow","browserGlobal","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","platform","_async$filter","cb","_process"],"mappings":"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","file":"duocoder.js","sourcesContent":["/**\n * DuoCoder - Duolingo for Coders\n * @version v0.0.1\n * @author Jason Park\n * @link https://github.com/parkjs814/DuoCoder\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar panelVars = {\n  language: null,\n  editor: null,\n  matchings: null,\n  code: '',\n  lines: -1\n};\n\nmodule.exports = function () {\n  var _this = this;\n\n  this.panel = [extend(true, {}, panelVars), extend(true, {}, panelVars)];\n  this.exam_mode = false;\n\n  this.setLanguage = function (index, language) {\n    _this.panel[index].language = language;\n  };\n\n  this.setEditor = function (index, editor) {\n    _this.panel[index].editor = editor;\n  };\n\n  this.setMatchings = function (index, matchings) {\n    _this.panel[index].matchings = matchings;\n  };\n\n  this.setCode = function (index, code) {\n    _this.panel[index].code = code;\n  };\n\n  this.setLines = function (index, lines) {\n    _this.panel[index].lines = lines;\n  };\n\n  this.enterExamMode = function () {\n    _this.exam_mode = true;\n  };\n\n  this.exitExamMode = function () {\n    _this.exam_mode = false;\n  };\n\n  this.getLanguage = function (index) {\n    return _this.panel[index].language;\n  };\n\n  this.getEditor = function (index) {\n    return _this.panel[index].editor;\n  };\n\n  this.getMatchings = function (index) {\n    return _this.panel[index].matchings;\n  };\n\n  this.getCode = function (index, readable) {\n    var code = _this.panel[index].code;\n    if (readable) return code.replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, '$2');else return code;\n  };\n\n  this.getLines = function (index) {\n    return _this.panel[index].lines;\n  };\n\n  this.isExamMode = function () {\n    return _this.exam_mode;\n  };\n};\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, dir) {\n    var _this = this;\n\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, _class);\n\n    this.parent = null;\n    this.name = name;\n    this.dir = dir;\n    this.children = children;\n    this.element = null;\n    this.next = null;\n    children.forEach(function (child) {\n      child.parent = _this;\n    });\n  }\n\n  _createClass(_class, [{\n    key: \"sub\",\n    value: function sub(index) {\n      return this.children[index];\n    }\n  }]);\n\n  return _class;\n}();\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar Language = require('./language');\nvar Category = require('./category');\n\nmodule.exports = {\n  Language: Language,\n  Category: Category\n};\n\n},{\"./category\":3,\"./language\":5}],5:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nmodule.exports = function () {\n  function _class(name, ace, ext) {\n    _classCallCheck(this, _class);\n\n    this.name = name;\n    this.ace = ace;\n    this.ext = ext;\n  }\n\n  _createClass(_class, null, [{\n    key: 'getWithExt',\n    value: function getWithExt(ext) {\n      var Server = require('../server');\n      var languages = Server.getLanguages();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var language = _step.value;\n\n          if (language.ext == ext) return language;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return _class;\n}();\n\n},{\"../server\":26}],6:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar viewCode = require('./view_code');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = {\n  enter: function enter() {\n    app.enterExamMode();\n    $('#next').addClass('selected');\n    $('.desc-container .blur').css('display', 'block');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(false);\n    editor.setValue('');\n  },\n  exit: function exit(keep_code) {\n    app.exitExamMode();\n    $('#next').removeClass('selected next');\n    $('.desc-container .blur').css('display', '');\n    var editor = app.getEditor(to);\n    editor.setReadOnly(true);\n    if (!keep_code) viewCode(to, app.getCode(to));\n  }\n};\n\n},{\"../app\":2,\"./view_code\":18}],7:[function(require,module,exports){\n'use strict';\n\nvar setupMain = require('./setup_main');\nvar initEditor = require('./init_editor');\nvar initCategories = require('./init_categories');\nvar setupLayout = require('./setup_layout');\nvar setupMatching = require('./setup_matching');\nvar setupExam = require('./setup_exam');\nvar setLanguage = require('./set_language');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar viewComparison = require('./view_comparison');\nvar exam = require('./exam');\n\nmodule.exports = {\n  setupMain: setupMain,\n  initEditor: initEditor,\n  initCategories: initCategories,\n  setupLayout: setupLayout,\n  setupMatching: setupMatching,\n  setupExam: setupExam,\n  setLanguage: setLanguage,\n  viewCode: viewCode,\n  viewDesc: viewDesc,\n  viewComparison: viewComparison,\n  exam: exam\n};\n\n},{\"./exam\":6,\"./init_categories\":8,\"./init_editor\":9,\"./set_language\":10,\"./setup_exam\":11,\"./setup_layout\":12,\"./setup_main\":13,\"./setup_matching\":17,\"./view_code\":18,\"./view_comparison\":19,\"./view_desc\":20}],8:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../server');\nvar Storage = require('../storage');\nvar app = require('../app');\nvar viewCode = require('./view_code');\nvar viewDesc = require('./view_desc');\nvar exam = require('./exam');\n\nvar from = 0,\n    to = 1;\n\nvar loadCategory = function loadCategory(index, category, language) {\n  Server.loadCode(category, language).then(function (code) {\n    exam.exit();\n    app.setCode(index, code);\n    viewCode(index, code);\n  });\n  if (index == to) {\n    Server.loadDesc(category, language).then(viewDesc);\n  }\n};\n\nmodule.exports = function (categories) {\n  var $index = $('#index');\n  categories.forEach(function (category, i) {\n    category.element = $('<li>' + (i + 1) + '| ' + category.name + '</li>');\n    $index.append(category.element);\n    var $sub_index = $('<ul class=\"sub\" data-category=\"' + i + '\"></ul>');\n    $index.append($sub_index);\n    category.children.forEach(function (category, j) {\n      category.element = $('<li data-subcategory=\"' + j + '\">' + category.name + '</li>');\n      $sub_index.append(category.element);\n    });\n  });\n\n  $('#index > li').click(function () {\n    $('#index > li.active').removeClass('active');\n    $(this).addClass('active');\n  });\n\n  $('ul.sub > li').click(function () {\n    $('ul.sub > li.active').removeClass('active');\n    $(this).addClass('active');\n    var $li = $(this);\n    var $ul = $(this).parent();\n    var category = categories[$ul.data('category')].sub($li.data('subcategory'));\n    Storage.category.set(category);\n    loadCategory(from, category, app.getLanguage(from));\n    loadCategory(to, category, app.getLanguage(to));\n    exam.exit();\n  });\n\n  var category = Storage.category.get();\n  do {\n    category.element.click();\n    category = category.parent;\n  } while (category);\n};\n\n},{\"../app\":2,\"../server\":26,\"../storage\":30,\"./exam\":6,\"./view_code\":18,\"./view_desc\":20}],9:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar viewComparison = require('./view_comparison');\n\nmodule.exports = function (index, language, afterRender) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $code = $panel.find('.code');\n  var editor = ace.edit($code.attr('id'));\n  editor.setTheme('ace/theme/monokai');\n  if (index == 0) $panel.find('.desc').addClass('ace-monokai');\n  editor.getSession().setMode('ace/mode/' + language.ace);\n  editor.getSession().setUseWrapMode(true);\n  editor.setShowFoldWidgets(false);\n  editor.setReadOnly(true);\n  editor.renderer.on('timeToUpdateComparison', function () {\n    if (app.isExamMode()) return;\n    viewComparison();\n  });\n  return editor;\n};\n\n},{\"../app\":2,\"./view_comparison\":19}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (index, language) {\n  var $panel = $('.panel:eq(' + index + ')');\n  var $title = $panel.find('.title');\n  $title.text(language.name);\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\nvar util = require('../util');\n\nvar from = 0,\n    to = 1;\n\nvar calculateProgress = function calculateProgress(code_answer, code_user) {\n  return similarity(util.zip(code_answer), util.zip(code_user));\n};\n\nmodule.exports = function () {\n  var editor = app.getEditor(to);\n  editor.on('change', function (e) {\n    if (!app.isExamMode()) return;\n    var progress = calculateProgress(app.getCode(to, true), editor.getValue());\n    $('.progress').css('width', progress * 100 + '%');\n    if (progress == 1) {\n      exam.exit(true);\n      $('#next').addClass('next');\n      $('.progress').css('width', '');\n    }\n  });\n};\n\n/**\n * http://stackoverflow.com/questions/10473745/compare-strings-javascript-return-of-likely\n */\n\nvar similarity = function similarity(s1, s2) {\n  var longer = s1;\n  var shorter = s2;\n  if (s1.length < s2.length) {\n    longer = s2;\n    shorter = s1;\n  }\n  var longerLength = longer.length;\n  if (longerLength == 0) {\n    return 1.0;\n  }\n  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);\n};\n\nvar editDistance = function editDistance(s1, s2) {\n  var costs = [];\n  for (var i = 0; i <= s1.length; i++) {\n    var lastValue = i;\n    for (var j = 0; j <= s2.length; j++) {\n      if (i == 0) costs[j] = j;else {\n        if (j > 0) {\n          var newValue = costs[j - 1];\n          if (s1.charAt(i - 1) != s2.charAt(j - 1)) newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;\n          costs[j - 1] = lastValue;\n          lastValue = newValue;\n        }\n      }\n    }\n    if (i > 0) costs[s2.length] = lastValue;\n  }\n  return costs[s2.length];\n};\n\n},{\"../app\":2,\"../util\":33,\"./exam\":6}],12:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar exam = require('./exam');\n\nmodule.exports = function () {\n  $('#next').click(function () {\n    var $next = $(this);\n    if ($next.hasClass('next')) {\n      var $active = $('.sub > li.active');\n      if ($active.is(':last-child')) {\n        var $active_parent = $('#index > li.active');\n        if ($active_parent.is(':nth-last-child(2)')) {\n          alert('Congrats!');\n        } else {\n          $active_parent.next().next().click();\n          $('#index > li.active + .sub > li:first-child').click();\n        }\n      } else {\n        $active.next().click();\n      }\n      $next.removeClass('next');\n    } else {\n      if (app.isExamMode()) {\n        exam.exit();\n      } else {\n        exam.enter();\n      }\n    }\n  });\n};\n\n},{\"../app\":2,\"./exam\":6}],13:[function(require,module,exports){\n'use strict';\n\nvar setupLanguages = require('./setup_languages');\nvar setupStickToBottom = require('./setup_stick_to_bottom');\nvar setupSmoothScroll = require('./setup_smooth_scroll');\n\nmodule.exports = function () {\n  setupLanguages();\n  setupStickToBottom();\n  setupSmoothScroll();\n};\n\n},{\"./setup_languages\":14,\"./setup_smooth_scroll\":15,\"./setup_stick_to_bottom\":16}],14:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../../server');\n\nvar languages = Server.getLanguages();\n\nmodule.exports = function () {\n  var _arr = ['#lang-from', '#lang-to'];\n\n  var _loop = function _loop() {\n    var container = _arr[_i];\n    var $container = $(container);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var language = _step.value;\n\n        var $lang = $('<a class=\"lang\" href=\"' + (container == '#lang-from' ? '#dots' : '#top') + '\"></a>');\n        $container.append($lang);\n        var $logo = $('<div class=\"logo\" style=\"background-image: url(\\'./images/lang_' + language.ext + '.png\\')\"></div>');\n        $lang.append($logo);\n        $logo.append('<div class=\"logo mono\" style=\"background-image: url(\\'./images/lang_' + language.ext + '_mono.png\\')\"></div>');\n        $lang.append('<div class=\"name\">' + language.name + '</div>');\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    $container.find('.lang').click(function () {\n      $container.find('.lang.selected').removeClass('selected');\n      $(this).addClass('selected');\n    });\n  };\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    _loop();\n  }\n  $('.lang').click(function () {\n    var $lang_to = $('#lang-to');\n    var $lang_from_selected = $('#lang-from .lang.selected');\n    var $lang_to_selected = $('#lang-to .lang.selected');\n    if ($lang_from_selected.length && $lang_to_selected.length) {\n      var from_index = $lang_from_selected.index();\n      var to_index = $lang_to_selected.index() - 2;\n      $lang_to.find('[name=\"lang_from\"]').val(languages[from_index].ext);\n      $lang_to.find('[name=\"lang_to\"]').val(languages[to_index].ext);\n      $lang_to.submit();\n    }\n  });\n};\n\n},{\"../../server\":26}],15:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function () {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 500);\n        return false;\n      }\n    }\n  });\n  var $unfocused = $('.focused');\n  var onScroll = function onScroll() {\n    $unfocused.toggleClass('unfocused', $(document).scrollTop() <= 168);\n  };\n  onScroll();\n  $(window).scroll(onScroll);\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var $stick_to_bottom_fake = $('.stick-to-bottom.fake');\n  var $stick_to_bottom_real = $('.stick-to-bottom.real');\n  var $lang_from = $('#lang-from');\n  var $fullscreen = $('.fullscreen');\n  var onResize = function onResize() {\n    var top = $lang_from.offset().top + $lang_from.height();\n    var bottom = $stick_to_bottom_fake.offset().top;\n    $fullscreen.toggleClass('full', top < bottom);\n    $stick_to_bottom_real.toggleClass('stick', top < bottom);\n  };\n  onResize();\n  $(window).resize(onResize);\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('.code, #comparison').mousemove(function (e) {\n    $('.match').removeClass('selected');\n    var $code = $(this);\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    $code.find('.match').each(function () {\n      var $match = $(this);\n\n      var _$match$offset = $match.offset(),\n          top = _$match$offset.top,\n          left = _$match$offset.left;\n\n      var bottom = top + $match.height();\n      var right = left + $match.width();\n      if (top < pageY && pageY < bottom && left < pageX && pageX < right) {\n        (function () {\n          var match = $match.data('match');\n          $('.match').filter(function () {\n            return $(this).data('match') == match;\n          }).addClass('selected');\n        })();\n      }\n    });\n  });\n};\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nmodule.exports = function (index, code) {\n  var matchings = [];\n  app.setMatchings(index, matchings);\n  var lines = code.split(/\\r?\\n/);\n  app.setLines(index, lines.length);\n  var omit_num = 99999;\n\n  var _loop = function _loop(i) {\n    lines[i] = lines[i].replace(/(^|\\]\\})(((?!#\\d+\\{\\[).)+)/gm, '$1#' + omit_num + '{[$2]}');\n    lines[i] = lines[i].replace(/#(\\d+)\\{\\[(((?!\\]\\}).)*)\\]\\}/g, function (match, num, content) {\n      num = parseInt(num);\n      if (num == omit_num) num = -1;\n      matchings.push([content, num, i]);\n      return content;\n    });\n  };\n\n  for (var i = 0; i < lines.length; i++) {\n    _loop(i);\n  }\n  code = lines.join('\\n');\n  app.getEditor(index).setValue(code, -1);\n};\n\n},{\"../app\":2}],19:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\n\nvar from = 0,\n    to = 1;\n\nmodule.exports = function () {\n  var $desc = $('#comparison');\n  var pair = [app.getMatchings(from), app.getMatchings(to)];\n\n  var max = -1;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = pair[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var matchings = _step.value;\n\n      if (matchings == null) return;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = matchings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var matching = _step3.value;\n\n          max = Math.max(max, matching[1]);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var editors = [app.getEditor(from), app.getEditor(to)];\n  var $temp_snippets = [$('.temp-snippet:eq(0)'), $('.temp-snippet:eq(1)')];\n  var _arr = [from, to];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _i4 = _arr[_i];\n    var html = [];\n    var editor = editors[_i4];\n    var lines = app.getLines(_i4);\n    for (var line = 0; line <= lines; line++) {\n      editor.renderer.$textLayer.$renderLine(html, line, true, false);\n    }\n    $temp_snippets[_i4].html(html.join(''));\n  }\n\n  var comparisons = [];\n  for (var i = 0; i <= max; i++) {\n    comparisons.push([[], [], -1]);\n  }\n  var _arr2 = [from, to];\n\n  var _loop2 = function _loop2() {\n    var i = _arr2[_i2];\n    $temp_snippets[i].find('.match').each(function () {\n      var $match = $(this);\n      var match = $match.data('match');\n      comparisons[match][i].push($match);\n      if (i == 0 && comparisons[match][2] == -1) {\n        comparisons[match][2] = $match.parent().parent().index();\n      }\n    });\n  };\n\n  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n    _loop2();\n  }\n\n  var _loop = function _loop(_i3) {\n    if (comparisons[_i3][2] == -1) {\n      var _matchings = pair[0];\n      _matchings.every(function (matching) {\n        if (matching[1] == _i3) {\n          comparisons[_i3][2] = matching[2];\n          return false;\n        }\n        return true;\n      });\n    }\n  };\n\n  for (var _i3 = 0; _i3 <= max; _i3++) {\n    _loop(_i3);\n  }\n  $desc.empty();\n  $desc.append('<h2>Key Changes</h2>');\n  $desc.append('<h6>Not all changes are shown.</h6>');\n  var last_line = -1;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    var _loop3 = function _loop3() {\n      var comparison = _step2.value;\n\n      var _comparison = _slicedToArray(comparison, 2),\n          pieces_from = _comparison[0],\n          pieces_to = _comparison[1];\n\n      var is_same = pieces_from.length == pieces_to.length && pieces_from.every(function (element, index) {\n        return element.text() == pieces_to[index].text();\n      });\n      if (is_same) return 'continue';\n      var line = comparison[2];\n      if (last_line != line) {\n        last_line = line;\n        $desc.append('<div class=\"line line-number\">Line ' + (line + 1) + '</div>');\n      }\n      var $line = $('<div class=\"line\"></div>');\n      $desc.append($line);\n      var _arr3 = [pieces_from, pieces_to];\n      for (var _i5 = 0; _i5 < _arr3.length; _i5++) {\n        var pieces = _arr3[_i5];\n        var $group = $('<span class=\"group\"></span>');\n        $line.append($group);\n        if (!pieces.length) {\n          $group.append('<span class=\"empty\"></span>');\n        }\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = pieces[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var piece = _step4.value;\n\n            var $piece = piece.clone();\n            $piece.data('match', piece.data('match'));\n            $group.append($piece);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    };\n\n    for (var _iterator2 = comparisons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ret3 = _loop3();\n\n      if (_ret3 === 'continue') continue;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n};\n\n},{\"../app\":2}],20:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (desc) {\n  var converter = new showdown.Converter();\n\n  var $desc = $('#description');\n  $desc.html(converter.makeHtml(desc));\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar DOM = require('./dom');\nvar Server = require('./server');\nvar Storage = require('./storage');\nvar app = require('./app');\nvar App = require('./app/constructor');\n\nvar _require = require('./bean'),\n    Language = _require.Language;\n\nvar _$ = $,\n    extend = _$.extend;\n\n\nvar categories = Server.getCategories();\nvar from = 0,\n    to = 1;\n\n// set global promise error handler\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\nextend(true, window, {\n  main: DOM.setupMain,\n  learn: function learn() {\n    extend(true, app, new App());\n    extend(true, window, { app: app });\n    var lang_from_ext = getUrlParameter('lang_from');\n    var lang_to_ext = getUrlParameter('lang_to');\n    if (lang_from_ext && lang_to_ext) {\n      var changed = Storage.language.set(from, lang_from_ext) || Storage.language.set(to, lang_to_ext);\n      if (changed) Storage.category.set(categories[0].sub(0));\n    } else {\n      lang_from_ext = Storage.language.get(from);\n      lang_to_ext = Storage.language.get(to);\n    }\n    var lang_from = Language.getWithExt(lang_from_ext);\n    var lang_to = Language.getWithExt(lang_to_ext);\n    app.setLanguage(from, lang_from);\n    app.setLanguage(to, lang_to);\n    app.setEditor(from, DOM.initEditor(from, lang_from));\n    app.setEditor(to, DOM.initEditor(to, lang_to));\n    DOM.initCategories(categories);\n    DOM.setupLayout();\n    DOM.setupMatching();\n    DOM.setupExam();\n    DOM.setLanguage(from, lang_from);\n    DOM.setLanguage(to, lang_to);\n  }\n});\n\nvar getUrlParameter = function getUrlParameter(sParam) {\n  var params = decodeURIComponent(window.location.search.substring(1)).split('&');\n  for (var i = 0; i < params.length; i++) {\n    var param = params[i].split('=');\n    if (param[0] === sParam) {\n      return param[1] === undefined ? true : param[1];\n    }\n  }\n  return null;\n};\n\n},{\"./app\":2,\"./app/constructor\":1,\"./bean\":4,\"./dom\":7,\"./server\":26,\"./storage\":30,\"rsvp\":35}],22:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":23}],23:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar _$ = $,\n    ajax = _$.ajax,\n    extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        resolve(response);\n      },\n      error: function error(reason) {\n        reject(reason);\n      }\n    };\n    var opts = extend({}, defaults, options, callbacks, { url: url });\n    ajax(opts);\n  });\n};\n\n},{\"rsvp\":35}],24:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Category = _require.Category;\n\nmodule.exports = function () {\n  return categories;\n};\n\nvar categories = [new Category('Comments', 'comment', [new Category('Single Line Comments', 'single'), new Category('Multiple Lines Comments', 'multi')]), new Category('Variables', 'var', [new Category('Definition', 'def'), new Category('Boolean Type', 'bool'), new Category('Numeric Types', 'num'), new Category('Strings', 'str'), new Category('Data Structures', 'data_structure'), new Category('Constants', 'const')]), new Category('Operators', 'operator', [new Category('Boolean Operations', 'bool'), new Category('Comparisons', 'compare'), new Category('Bitwise Operations', 'bitwise')]), new Category('Conditionals', 'conditional', [new Category('If / Else Statement', 'if_else'), new Category('Switch / Case Statement', 'switch_case'), new Category('Ternary Operator', 'ternary')]), new Category('Loops', 'loop', [new Category('For Statement', 'for'), new Category('While Statement', 'while'), new Category('Continue Statement', 'continue'), new Category('Break Statement', 'break')]), new Category('Functions', 'func', [new Category('Definition', 'def'), new Category('Parameters', 'param'), new Category('Return Statement', 'return')]), new Category('Classes', 'class', [new Category('Definition', 'def'), new Category('Class Variables', 'cls_var'), new Category('Class Functions', 'cls_func'), new Category('Instances', 'obj'), new Category('Instance Variables', 'obj_var'), new Category('Instance Functions', 'obj_func'), new Category('Inheritance', 'inherit')]), new Category('Built-In', 'built_in', [new Category('Math Functions', 'math'), new Category('String Functions', 'str'), new Category('Data Structure Operations', 'data_structure'), new Category('Others', 'etc')])];\n\n},{\"../bean\":4}],25:[function(require,module,exports){\n'use strict';\n\nvar _require = require('../bean'),\n    Language = _require.Language;\n\nmodule.exports = function () {\n  return languages;\n};\n\nvar languages = [new Language('C++', 'c_cpp', 'cpp'), new Language('Python', 'python', 'py'), new Language('Java', 'java', 'java'), new Language('EMCAScript', 'javascript', 'js'), new Language('Nada.', null, 'idk')];\n\n},{\"../bean\":4}],26:[function(require,module,exports){\n'use strict';\n\nvar loadCode = require('./load_code');\nvar loadDesc = require('./load_desc');\nvar getCategories = require('./get_categories');\nvar getLanguages = require('./get_languages');\n\nmodule.exports = {\n  loadCode: loadCode,\n  loadDesc: loadDesc,\n  getCategories: getCategories,\n  getLanguages: getLanguages\n};\n\n},{\"./get_categories\":24,\"./get_languages\":25,\"./load_code\":27,\"./load_desc\":28}],27:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/code.' + language.ext;\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],28:[function(require,module,exports){\n'use strict';\n\nvar get = require('./ajax/get');\n\nmodule.exports = function (category, language) {\n  var path = language.ext + '/desc.md';\n  do {\n    path = category.dir + '/' + path;\n    category = category.parent;\n  } while (category);\n  return get('./data/' + path);\n};\n\n},{\"./ajax/get\":22}],29:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar Server = require('../server');\n\nvar getName = function getName() {\n  return 'category';\n};\n\nmodule.exports = {\n  set: function set(category) {\n    var path = '';\n    do {\n      path = category.dir + '/' + path;\n      category = category.parent;\n    } while (category);\n    path.substr(0, path.length - 1);\n    return _set(getName(), path);\n  },\n  get: function get() {\n    var categories = Server.getCategories();\n    var dirs = _get(getName()).split('/');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var dir = _step.value;\n\n        var category = $.grep(categories, function (category) {\n          return category.dir == dir;\n        })[0];\n        categories = category.children;\n        if (!categories.length) return {\n            v: category\n          };\n      };\n\n      for (var _iterator = dirs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ret = _loop();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n},{\"../server\":26,\"./manager\":32}],30:[function(require,module,exports){\n'use strict';\n\nvar language = require('./language');\nvar category = require('./category');\n\nmodule.exports = {\n  language: language,\n  category: category\n};\n\n},{\"./category\":29,\"./language\":31}],31:[function(require,module,exports){\n'use strict';\n\nvar _require = require('./manager'),\n    _set = _require.set,\n    _get = _require.get;\n\nvar getName = function getName(index) {\n  return 'lang_' + index;\n};\n\nmodule.exports = {\n  set: function set(index, ext) {\n    return _set(getName(index), ext);\n  },\n  get: function get(index) {\n    return _get(getName(index));\n  }\n};\n\n},{\"./manager\":32}],32:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = {\n  set: function set(name, value) {\n    if (Cookies.get(name) == value) return false;\n    Cookies.set(name, value);\n    return true;\n  },\n  get: function get(name) {\n    return Cookies.get(name);\n  },\n  remove: function remove(name) {\n    Cookies.remove(name);\n    return true;\n  }\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  zip: function zip(code) {\n    return code.trim().replace(/^\\s*[\\r\\n]/gm, '').replace(/\\b\\s+\\B/g, '').replace(/\\B\\s+\\b/g, '').replace(/\\B\\s+\\B/g, '');\n  }\n};\n\n},{}],34:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],35:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.3.3\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.RSVP = global.RSVP || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction indexOf(callbacks, callback) {\n  for (var i = 0, l = callbacks.length; i < l; i++) {\n    if (callbacks[i] === callback) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function mixin(object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function on(eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (indexOf(callbacks, callback) === -1) {\n      callbacks.push(callback);\n    }\n  },\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function off(eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        index = undefined;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = indexOf(callbacks, callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function trigger(eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = undefined,\n        callback = undefined;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (name === 'onerror') {\n    // handle for legacy users that expect the actual\n    // error to be passed to their function added via\n    // `RSVP.configure('onerror', someFunctionHere);`\n    config['on']('error', value);\n    return;\n  }\n\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isMaybeThenable(x) {\n  return typeof x === 'object' && x !== null;\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\n// Date.now is not available in browsers < IE9\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now#Compatibility\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nfunction F() {}\n\nvar o_create = Object.create || function (o) {\n  if (arguments.length > 1) {\n    throw new Error('Second argument not supported');\n  }\n  if (typeof o !== 'object') {\n    throw new TypeError('Argument must be an object');\n  }\n  F.prototype = o;\n  return new F();\n};\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  config.async(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable !== value) {\n        resolve(promise, value, undefined);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && promise.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, withOwnPromise());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      resolve(promise, value);\n    } else if (failed) {\n      reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var _arguments = arguments;\n\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state) {\n    (function () {\n      var callback = _arguments[state - 1];\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\nfunction makeSettledResult(state, position, value) {\n  if (state === FULFILLED) {\n    return {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    return {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\nfunction Enumerator(Constructor, input, abortOnReject, label) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop, label);\n  this._abortOnReject = abortOnReject;\n\n  if (this._validateInput(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._init();\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    reject(this.promise, this._validationError());\n  }\n}\n\nEnumerator.prototype._validateInput = function (input) {\n  return isArray(input);\n};\n\nEnumerator.prototype._validationError = function () {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._init = function () {\n  this._result = new Array(this.length);\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var promise = this.promise;\n  var input = this._input;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    this._eachEntry(input[i], i);\n  }\n};\n\nEnumerator.prototype._settleMaybeThenable = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve = c.resolve;\n\n  if (resolve === resolve$1) {\n    var then$$ = getThen(entry);\n\n    if (then$$ === then && entry._state !== PENDING) {\n      entry._onError = null;\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof then$$ !== 'function') {\n      this._remaining--;\n      this._result[i] = this._makeResult(FULFILLED, i, entry);\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, then$$);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve) {\n        return resolve(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve(entry), i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  if (isMaybeThenable(entry)) {\n    this._settleMaybeThenable(entry, i);\n  } else {\n    this._remaining--;\n    this._result[i] = this._makeResult(FULFILLED, i, entry);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (this._abortOnReject && state === REJECTED) {\n      reject(promise, value);\n    } else {\n      this._result[i] = this._makeResult(state, i, value);\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._makeResult = function (state, i, value) {\n  return value;\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  return new Enumerator(this, entries, true, /* abort on reject */label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver, label) {\n  this._id = counter++;\n  this._label = label;\n  this._state = undefined;\n  this._result = undefined;\n  this._subscribers = [];\n\n  config.instrument && instrument('created', this);\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.cast = resolve$1; // deprecated\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  _guidKey: guidKey,\n\n  _onError: function _onError(reason) {\n    var promise = this;\n    config.after(function () {\n      if (promise._onError) {\n        config['trigger']('error', reason, promise._label);\n      }\n    });\n  },\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  },\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  'finally': function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  }\n};\n\nfunction Result() {\n  this.value = undefined;\n}\n\nvar ERROR = new Result();\nvar GET_THEN_ERROR$1 = new Result();\n\nfunction getThen$1(obj) {\n  try {\n    return obj.then;\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction tryApply(f, s, a) {\n  try {\n    f.apply(s, a);\n  } catch (error) {\n    ERROR.value = error;\n    return ERROR;\n  }\n}\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var _name = argumentNames[i];\n    obj[_name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(_then, promise) {\n  return {\n    then: function then(onFulFillment, onRejection) {\n      return _then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function fn() {\n    var self = this;\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === GET_THEN_ERROR$1) {\n          var p = new Promise(noop);\n          reject(p, GET_THEN_ERROR$1.value);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, self);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, self);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryApply(nodeFunc, self, args);\n  if (result === ERROR) {\n    reject(promise, result.value);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen$1(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction AllSettled(Constructor, entries, label) {\n  this._superConstructor(Constructor, entries, false, /* don't abort on reject */label);\n}\n\nAllSettled.prototype = o_create(Enumerator.prototype);\nAllSettled.prototype._superConstructor = Enumerator;\nAllSettled.prototype._makeResult = makeSettledResult;\nAllSettled.prototype._validationError = function () {\n  return new Error('allSettled must be called with an array');\n};\n\n/**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n\n  Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n\n  ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n\n  @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n*/\nfunction allSettled(entries, label) {\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction PromiseHash(Constructor, object, label) {\n  this._superConstructor(Constructor, object, true, label);\n}\n\nPromiseHash.prototype = o_create(Enumerator.prototype);\nPromiseHash.prototype._superConstructor = Enumerator;\nPromiseHash.prototype._init = function () {\n  this._result = {};\n};\n\nPromiseHash.prototype._validateInput = function (input) {\n  return input && typeof input === 'object';\n};\n\nPromiseHash.prototype._validationError = function () {\n  return new Error('Promise.hash must be called with an object');\n};\n\nPromiseHash.prototype._enumerate = function () {\n  var enumerator = this;\n  var promise = enumerator.promise;\n  var input = enumerator._input;\n  var results = [];\n\n  for (var key in input) {\n    if (promise._state === PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n      results.push({\n        position: key,\n        entry: input[key]\n      });\n    }\n  }\n\n  var length = results.length;\n  enumerator._remaining = length;\n  var result = undefined;\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    result = results[i];\n    enumerator._eachEntry(result.entry, result.position);\n  }\n};\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction HashSettled(Constructor, object, label) {\n  this._superConstructor(Constructor, object, false, label);\n}\n\nHashSettled.prototype = o_create(PromiseHash.prototype);\nHashSettled.prototype._superConstructor = Enumerator;\nHashSettled.prototype._makeResult = makeSettledResult;\n\nHashSettled.prototype._validationError = function () {\n  return new Error('hashSettled must be called with an object');\n};\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\nfunction hashSettled(object, label) {\n  return new HashSettled(Promise, object, label).promise;\n}\n\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method, except that it\n  waits for all promises to become fulfilled before running the `mapFn` on\n  each item in given to `promises`. `RSVP.map` returns a promise that will\n  become fulfilled with the result of running `mapFn` on the values the promises\n  become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\nfunction map(promises, mapFn, label) {\n  return Promise.all(promises, label).then(function (values) {\n    if (!isFunction(mapFn)) {\n      throw new TypeError(\"You must pass a function as map's second argument.\");\n    }\n\n    var length = values.length;\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = mapFn(values[i]);\n    }\n\n    return Promise.all(results, label);\n  });\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n  waits for all promises to become fulfilled before running the `filterFn` on\n  each item in given to `promises`. `RSVP.filter` returns a promise that will\n  become fulfilled with the result of running `filterFn` on the values the\n  promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction resolveAll(promises, label) {\n  return Promise.all(promises, label);\n}\n\nfunction resolveSingle(promise, label) {\n  return Promise.resolve(promise, label).then(function (promises) {\n    return resolveAll(promises, label);\n  });\n}\nfunction filter(promises, filterFn, label) {\n  var promise = isArray(promises) ? resolveAll(promises, label) : resolveSingle(promises, label);\n  return promise.then(function (values) {\n    if (!isFunction(filterFn)) {\n      throw new TypeError(\"You must pass a function as filter's second argument.\");\n    }\n\n    var length = values.length;\n    var filtered = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      filtered[i] = filterFn(values[i]);\n    }\n\n    return resolveAll(filtered, label).then(function (filtered) {\n      var results = new Array(length);\n      var newLength = 0;\n\n      for (var i = 0; i < length; i++) {\n        if (filtered[i]) {\n          results[newLength] = values[i];\n          newLength++;\n        }\n      }\n\n      results.length = newLength;\n\n      return results;\n    });\n  });\n}\n\nvar len = 0;\nvar vertxNext = undefined;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar platform = undefined;\n\n/* global self */\nif (typeof self === 'object') {\n  platform = self;\n\n  /* global global */\n} else if (typeof global === 'object') {\n    platform = global;\n  } else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\nvar _async$filter;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\nvar cast = resolve$2;\n\nvar async = function async(callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}var rsvp = (_async$filter = {\n  cast: cast,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_async$filter, 'async', async), _defineProperty(_async$filter, 'filter', // babel seems to error if async isn't a computed prop here...\nfilter), _async$filter);\n\nexports['default'] = rsvp;\nexports.cast = cast;\nexports.Promise = Promise;\nexports.EventTarget = EventTarget;\nexports.all = all$1;\nexports.allSettled = allSettled;\nexports.race = race$1;\nexports.hash = hash;\nexports.hashSettled = hashSettled;\nexports.rethrow = rethrow;\nexports.defer = defer;\nexports.denodeify = denodeify;\nexports.configure = configure;\nexports.on = on;\nexports.off = off;\nexports.resolve = resolve$2;\nexports.reject = reject$2;\nexports.map = map;\nexports.async = async;\nexports.filter = filter;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":34}]},{},[21])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}